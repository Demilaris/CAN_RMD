
stm32f767_nucleo_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036b4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080038b4  080038b4  000138b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039ec  080039ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080039ec  080039ec  000139ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039f4  080039f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039f4  080039f4  000139f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080039fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  08003a6c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08003a6c  00020148  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a696  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e76  00000000  00000000  0002a734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  0002c5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000618  00000000  00000000  0002ccc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d0f  00000000  00000000  0002d2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d66  00000000  00000000  00054fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef07b  00000000  00000000  0005dd4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014cdc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002200  00000000  00000000  0014ce1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800389c 	.word	0x0800389c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800389c 	.word	0x0800389c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_CAN1_Init+0x64>)
 80005de:	4a18      	ldr	r2, [pc, #96]	; (8000640 <MX_CAN1_Init+0x68>)
 80005e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_CAN1_Init+0x64>)
 80005e4:	2206      	movs	r2, #6
 80005e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_CAN1_Init+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_CAN1_Init+0x64>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_CAN1_Init+0x64>)
 80005f6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80005fa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_CAN1_Init+0x64>)
 80005fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000602:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <MX_CAN1_Init+0x64>)
 8000606:	2200      	movs	r2, #0
 8000608:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_CAN1_Init+0x64>)
 800060c:	2201      	movs	r2, #1
 800060e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <MX_CAN1_Init+0x64>)
 8000612:	2200      	movs	r2, #0
 8000614:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_CAN1_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <MX_CAN1_Init+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_CAN1_Init+0x64>)
 8000624:	2200      	movs	r2, #0
 8000626:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_CAN1_Init+0x64>)
 800062a:	f000 fb6d 	bl	8000d08 <HAL_CAN_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000634:	f000 f9a6 	bl	8000984 <Error_Handler>
  }

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000098 	.word	0x20000098
 8000640:	40006400 	.word	0x40006400

08000644 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a1b      	ldr	r2, [pc, #108]	; (80006d0 <HAL_CAN_MspInit+0x8c>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d130      	bne.n	80006c8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000666:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <HAL_CAN_MspInit+0x90>)
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	4a1a      	ldr	r2, [pc, #104]	; (80006d4 <HAL_CAN_MspInit+0x90>)
 800066c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000670:	6413      	str	r3, [r2, #64]	; 0x40
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <HAL_CAN_MspInit+0x90>)
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_CAN_MspInit+0x90>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <HAL_CAN_MspInit+0x90>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_CAN_MspInit+0x90>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000696:	f44f 7340 	mov.w	r3, #768	; 0x300
 800069a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a4:	2303      	movs	r3, #3
 80006a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006a8:	2309      	movs	r3, #9
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	4809      	ldr	r0, [pc, #36]	; (80006d8 <HAL_CAN_MspInit+0x94>)
 80006b4:	f001 faa8 	bl	8001c08 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	2014      	movs	r0, #20
 80006be:	f001 fa6c 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006c2:	2014      	movs	r0, #20
 80006c4:	f001 fa85 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	; 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40006400 	.word	0x40006400
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020400 	.word	0x40020400

080006dc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_GPIO_Init+0x2c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a08      	ldr	r2, [pc, #32]	; (8000708 <MX_GPIO_Init+0x2c>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_GPIO_Init+0x2c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000712:	f000 fa9c 	bl	8000c4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000716:	f000 f88b 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071a:	f7ff ffdf 	bl	80006dc <MX_GPIO_Init>
  MX_CAN1_Init();
 800071e:	f7ff ff5b 	bl	80005d8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  printf("CAN_motor\r\n");
 8000722:	4839      	ldr	r0, [pc, #228]	; (8000808 <main+0xfc>)
 8000724:	f002 f974 	bl	8002a10 <puts>
  if(HAL_CAN_Start(&hcan1) != HAL_OK) // включили CAN
 8000728:	4838      	ldr	r0, [pc, #224]	; (800080c <main+0x100>)
 800072a:	f000 fcd5 	bl	80010d8 <HAL_CAN_Start>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <main+0x2e>
  {
	  printf("HAL_CAN_start Err\r\n");
 8000734:	4836      	ldr	r0, [pc, #216]	; (8000810 <main+0x104>)
 8000736:	f002 f96b 	bl	8002a10 <puts>
  }
  sFilterConfig.FilterBank = 0;
 800073a:	4b36      	ldr	r3, [pc, #216]	; (8000814 <main+0x108>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000740:	4b34      	ldr	r3, [pc, #208]	; (8000814 <main+0x108>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000746:	4b33      	ldr	r3, [pc, #204]	; (8000814 <main+0x108>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800074c:	4b31      	ldr	r3, [pc, #196]	; (8000814 <main+0x108>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000752:	4b30      	ldr	r3, [pc, #192]	; (8000814 <main+0x108>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000758:	4b2e      	ldr	r3, [pc, #184]	; (8000814 <main+0x108>)
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800075e:	4b2d      	ldr	r3, [pc, #180]	; (8000814 <main+0x108>)
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000764:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <main+0x108>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800076a:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <main+0x108>)
 800076c:	2201      	movs	r2, #1
 800076e:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <main+0x108>)
 8000772:	220e      	movs	r2, #14
 8000774:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_CAN_ConfigFilter (&hcan1, &sFilterConfig) != HAL_OK)
 8000776:	4927      	ldr	r1, [pc, #156]	; (8000814 <main+0x108>)
 8000778:	4824      	ldr	r0, [pc, #144]	; (800080c <main+0x100>)
 800077a:	f000 fbc1 	bl	8000f00 <HAL_CAN_ConfigFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <main+0x7e>
  {
	  printf("HAL_CAN_start_filter Err\r\n");
 8000784:	4824      	ldr	r0, [pc, #144]	; (8000818 <main+0x10c>)
 8000786:	f002 f943 	bl	8002a10 <puts>
  }

  if(HAL_CAN_ActivateNotification (&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800078a:	2102      	movs	r1, #2
 800078c:	481f      	ldr	r0, [pc, #124]	; (800080c <main+0x100>)
 800078e:	f000 fed4 	bl	800153a <HAL_CAN_ActivateNotification>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <main+0x92>
  {
	  printf("HAL_CAN_ActivateNotofication Err\r\n");
 8000798:	4820      	ldr	r0, [pc, #128]	; (800081c <main+0x110>)
 800079a:	f002 f939 	bl	8002a10 <puts>
  }

  Motor_ID = 8;
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <main+0x114>)
 80007a0:	2208      	movs	r2, #8
 80007a2:	701a      	strb	r2, [r3, #0]
  pHeader.DLC = 8;
 80007a4:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <main+0x118>)
 80007a6:	2208      	movs	r2, #8
 80007a8:	611a      	str	r2, [r3, #16]
  pHeader.StdId = 0x140 + Motor_ID;
 80007aa:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <main+0x114>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80007b2:	461a      	mov	r2, r3
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <main+0x118>)
 80007b6:	601a      	str	r2, [r3, #0]
  pHeader.IDE = 0; //Standard identifier.
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <main+0x118>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  pHeader.RTR = 0; //Data frame
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <main+0x118>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  aData[0] = 0x88;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <main+0x11c>)
 80007c6:	2288      	movs	r2, #136	; 0x88
 80007c8:	701a      	strb	r2, [r3, #0]
  aData[1] = 0x00;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <main+0x11c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	705a      	strb	r2, [r3, #1]
  aData[2] = 0x00;
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <main+0x11c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	709a      	strb	r2, [r3, #2]
  aData[3] = 0x00;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <main+0x11c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	70da      	strb	r2, [r3, #3]
  aData[4] = 0x00;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <main+0x11c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	711a      	strb	r2, [r3, #4]
  aData[5] = 0x00;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <main+0x11c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	715a      	strb	r2, [r3, #5]
  aData[6] = 0x00;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <main+0x11c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	719a      	strb	r2, [r3, #6]
  aData[7] = 0x00;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <main+0x11c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	71da      	strb	r2, [r3, #7]
  status = HAL_CAN_AddTxMessage (&hcan1, &pHeader, aData, &pTxMailbox);
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <main+0x120>)
 80007f6:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <main+0x11c>)
 80007f8:	490a      	ldr	r1, [pc, #40]	; (8000824 <main+0x118>)
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <main+0x100>)
 80007fc:	f000 fcb0 	bl	8001160 <HAL_CAN_AddTxMessage>
 8000800:	4603      	mov	r3, r0
 8000802:	71fb      	strb	r3, [r7, #7]
  //printf("HAL_CAN_AddTxMessage - status - %d\r\n",status);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000804:	e7fe      	b.n	8000804 <main+0xf8>
 8000806:	bf00      	nop
 8000808:	080038b4 	.word	0x080038b4
 800080c:	20000098 	.word	0x20000098
 8000810:	080038c0 	.word	0x080038c0
 8000814:	200000c0 	.word	0x200000c0
 8000818:	080038d4 	.word	0x080038d4
 800081c:	080038f0 	.word	0x080038f0
 8000820:	20000108 	.word	0x20000108
 8000824:	2000011c 	.word	0x2000011c
 8000828:	2000010c 	.word	0x2000010c
 800082c:	200000e8 	.word	0x200000e8

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b094      	sub	sp, #80	; 0x50
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2234      	movs	r2, #52	; 0x34
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f002 f858 	bl	80028f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000854:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <SystemClock_Config+0xd0>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	4a29      	ldr	r2, [pc, #164]	; (8000900 <SystemClock_Config+0xd0>)
 800085a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
 8000860:	4b27      	ldr	r3, [pc, #156]	; (8000900 <SystemClock_Config+0xd0>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800086c:	4b25      	ldr	r3, [pc, #148]	; (8000904 <SystemClock_Config+0xd4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a24      	ldr	r2, [pc, #144]	; (8000904 <SystemClock_Config+0xd4>)
 8000872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <SystemClock_Config+0xd4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000884:	2302      	movs	r3, #2
 8000886:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000888:	2301      	movs	r3, #1
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800088c:	2310      	movs	r3, #16
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000890:	2302      	movs	r3, #2
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000894:	2300      	movs	r3, #0
 8000896:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000898:	2308      	movs	r3, #8
 800089a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800089c:	23d8      	movs	r3, #216	; 0xd8
 800089e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 fba7 	bl	8002000 <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008b8:	f000 f864 	bl	8000984 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008bc:	f001 fb50 	bl	8001f60 <HAL_PWREx_EnableOverDrive>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008c6:	f000 f85d 	bl	8000984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ca:	230f      	movs	r3, #15
 80008cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ce:	2302      	movs	r3, #2
 80008d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	2107      	movs	r1, #7
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fe37 	bl	800255c <HAL_RCC_ClockConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80008f4:	f000 f846 	bl	8000984 <Error_Handler>
  }
}
 80008f8:	bf00      	nop
 80008fa:	3750      	adds	r7, #80	; 0x50
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40023800 	.word	0x40023800
 8000904:	40007000 	.word	0x40007000

08000908 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback (CAN_HandleTypeDef * hcan)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pHeader_rd, aData_rd) != HAL_OK)
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000912:	4a16      	ldr	r2, [pc, #88]	; (800096c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000914:	2100      	movs	r1, #0
 8000916:	4816      	ldr	r0, [pc, #88]	; (8000970 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000918:	f000 fcfd 	bl	8001316 <HAL_CAN_GetRxMessage>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d003      	beq.n	800092a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		printf("HAL_CAN_GetRxMessage Error\r\n");
 8000922:	4814      	ldr	r0, [pc, #80]	; (8000974 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000924:	f002 f874 	bl	8002a10 <puts>
		{
			printf(" %x ", aData_rd[i]);
		}
		printf("\r\n");
	}
}
 8000928:	e01a      	b.n	8000960 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
		printf("%lx: ", pHeader_rd.StdId);
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4619      	mov	r1, r3
 8000930:	4811      	ldr	r0, [pc, #68]	; (8000978 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000932:	f001 ffe7 	bl	8002904 <iprintf>
		for (i = 0; i <pHeader_rd.DLC; i++)
 8000936:	2300      	movs	r3, #0
 8000938:	73fb      	strb	r3, [r7, #15]
 800093a:	e009      	b.n	8000950 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
			printf(" %x ", aData_rd[i]);
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000940:	5cd3      	ldrb	r3, [r2, r3]
 8000942:	4619      	mov	r1, r3
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000946:	f001 ffdd 	bl	8002904 <iprintf>
		for (i = 0; i <pHeader_rd.DLC; i++)
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	3301      	adds	r3, #1
 800094e:	73fb      	strb	r3, [r7, #15]
 8000950:	7bfa      	ldrb	r2, [r7, #15]
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000954:	691b      	ldr	r3, [r3, #16]
 8000956:	429a      	cmp	r2, r3
 8000958:	d3f0      	bcc.n	800093c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		printf("\r\n");
 800095a:	4809      	ldr	r0, [pc, #36]	; (8000980 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800095c:	f002 f858 	bl	8002a10 <puts>
}
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000114 	.word	0x20000114
 800096c:	200000ec 	.word	0x200000ec
 8000970:	20000098 	.word	0x20000098
 8000974:	08003914 	.word	0x08003914
 8000978:	08003930 	.word	0x08003930
 800097c:	08003938 	.word	0x08003938
 8000980:	08003940 	.word	0x08003940

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>

0800098e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000996:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800099a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d013      	beq.n	80009ce <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80009a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009aa:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80009ae:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d00b      	beq.n	80009ce <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80009b6:	e000      	b.n	80009ba <ITM_SendChar+0x2c>
    {
      __NOP();
 80009b8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80009ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d0f9      	beq.n	80009b8 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80009c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80009ce:	687b      	ldr	r3, [r7, #4]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_write>:
#include "printf_SWO.h"

char test_msg[300];

int _write(int file, char *ptr, int len)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
    //return usart_write(platform_get_console(), (u8 *)ptr, len);
      int i=0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
      for(i=0 ; i<len ; i++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	e009      	b.n	8000a06 <_write+0x2a>
        ITM_SendChar((*ptr++));
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	60ba      	str	r2, [r7, #8]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ffc7 	bl	800098e <ITM_SendChar>
      for(i=0 ; i<len ; i++)
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	3301      	adds	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	697a      	ldr	r2, [r7, #20]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	dbf1      	blt.n	80009f2 <_write+0x16>
      return len;
 8000a0e:	687b      	ldr	r3, [r7, #4]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_MspInit+0x44>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <HAL_MspInit+0x44>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <HAL_MspInit+0x44>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_MspInit+0x44>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <HAL_MspInit+0x44>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_MspInit+0x44>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <NMI_Handler+0x4>

08000a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <MemManage_Handler+0x4>

08000a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aac:	f000 f90c 	bl	8000cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <CAN1_RX0_IRQHandler+0x10>)
 8000aba:	f000 fd64 	bl	8001586 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000098 	.word	0x20000098

08000ac8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	e00a      	b.n	8000af0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ada:	f3af 8000 	nop.w
 8000ade:	4601      	mov	r1, r0
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	60ba      	str	r2, [r7, #8]
 8000ae6:	b2ca      	uxtb	r2, r1
 8000ae8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	3301      	adds	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	dbf0      	blt.n	8000ada <_read+0x12>
	}

return len;
 8000af8:	687b      	ldr	r3, [r7, #4]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
	return -1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b2a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <_isatty>:

int _isatty(int file)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
	return 1;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b74:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <_sbrk+0x5c>)
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <_sbrk+0x60>)
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d102      	bne.n	8000b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <_sbrk+0x64>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <_sbrk+0x68>)
 8000b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d207      	bcs.n	8000bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b9c:	f001 fe80 	bl	80028a0 <__errno>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	e009      	b.n	8000bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <_sbrk+0x64>)
 8000bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20080000 	.word	0x20080000
 8000bcc:	00000400 	.word	0x00000400
 8000bd0:	2000008c 	.word	0x2000008c
 8000bd4:	20000148 	.word	0x20000148

08000bd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c02:	490e      	ldr	r1, [pc, #56]	; (8000c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c04:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c18:	4c0b      	ldr	r4, [pc, #44]	; (8000c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c26:	f7ff ffd7 	bl	8000bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f001 fe3f 	bl	80028ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2e:	f7ff fd6d 	bl	800070c <main>
  bx  lr    
 8000c32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c34:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c40:	080039fc 	.word	0x080039fc
  ldr r2, =_sbss
 8000c44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c48:	20000148 	.word	0x20000148

08000c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC_IRQHandler>

08000c4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c52:	2003      	movs	r0, #3
 8000c54:	f000 ff96 	bl	8001b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f000 f805 	bl	8000c68 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c5e:	f7ff fedb 	bl	8000a18 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_InitTick+0x54>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_InitTick+0x58>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 ffb1 	bl	8001bee <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00e      	b.n	8000cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d80a      	bhi.n	8000cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f000 ff79 	bl	8001b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca8:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <HAL_InitTick+0x5c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e000      	b.n	8000cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x24>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_IncTick+0x24>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000134 	.word	0x20000134

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <HAL_GetTick+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000134 	.word	0x20000134

08000d08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e0ed      	b.n	8000ef6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d102      	bne.n	8000d2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff fc8c 	bl	8000644 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 0202 	bic.w	r2, r2, #2
 8000d3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d3c:	f7ff ffd8 	bl	8000cf0 <HAL_GetTick>
 8000d40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d42:	e012      	b.n	8000d6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d44:	f7ff ffd4 	bl	8000cf0 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2b0a      	cmp	r3, #10
 8000d50:	d90b      	bls.n	8000d6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2205      	movs	r2, #5
 8000d62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e0c5      	b.n	8000ef6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1e5      	bne.n	8000d44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f042 0201 	orr.w	r2, r2, #1
 8000d86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d88:	f7ff ffb2 	bl	8000cf0 <HAL_GetTick>
 8000d8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d8e:	e012      	b.n	8000db6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d90:	f7ff ffae 	bl	8000cf0 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b0a      	cmp	r3, #10
 8000d9c:	d90b      	bls.n	8000db6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2205      	movs	r2, #5
 8000dae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e09f      	b.n	8000ef6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0e5      	beq.n	8000d90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7e1b      	ldrb	r3, [r3, #24]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d108      	bne.n	8000dde <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	e007      	b.n	8000dee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7e5b      	ldrb	r3, [r3, #25]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d108      	bne.n	8000e08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	e007      	b.n	8000e18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	7e9b      	ldrb	r3, [r3, #26]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d108      	bne.n	8000e32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 0220 	orr.w	r2, r2, #32
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	e007      	b.n	8000e42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 0220 	bic.w	r2, r2, #32
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7edb      	ldrb	r3, [r3, #27]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d108      	bne.n	8000e5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0210 	bic.w	r2, r2, #16
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	e007      	b.n	8000e6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f042 0210 	orr.w	r2, r2, #16
 8000e6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	7f1b      	ldrb	r3, [r3, #28]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d108      	bne.n	8000e86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f042 0208 	orr.w	r2, r2, #8
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	e007      	b.n	8000e96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 0208 	bic.w	r2, r2, #8
 8000e94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	7f5b      	ldrb	r3, [r3, #29]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d108      	bne.n	8000eb0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f042 0204 	orr.w	r2, r2, #4
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	e007      	b.n	8000ec0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0204 	bic.w	r2, r2, #4
 8000ebe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	ea42 0103 	orr.w	r1, r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	1e5a      	subs	r2, r3, #1
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b087      	sub	sp, #28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f16:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f18:	7cfb      	ldrb	r3, [r7, #19]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d003      	beq.n	8000f26 <HAL_CAN_ConfigFilter+0x26>
 8000f1e:	7cfb      	ldrb	r3, [r7, #19]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	f040 80c7 	bne.w	80010b4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a69      	ldr	r2, [pc, #420]	; (80010d0 <HAL_CAN_ConfigFilter+0x1d0>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d001      	beq.n	8000f34 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8000f30:	4b68      	ldr	r3, [pc, #416]	; (80010d4 <HAL_CAN_ConfigFilter+0x1d4>)
 8000f32:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f3a:	f043 0201 	orr.w	r2, r3, #1
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	4a63      	ldr	r2, [pc, #396]	; (80010d4 <HAL_CAN_ConfigFilter+0x1d4>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d111      	bne.n	8000f70 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f52:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	f003 031f 	and.w	r3, r3, #31
 8000f78:	2201      	movs	r2, #1
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d123      	bne.n	8000fe2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fbc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3248      	adds	r2, #72	; 0x48
 8000fc2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fd6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fd8:	6979      	ldr	r1, [r7, #20]
 8000fda:	3348      	adds	r3, #72	; 0x48
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	440b      	add	r3, r1
 8000fe0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d122      	bne.n	8001030 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800100a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3248      	adds	r2, #72	; 0x48
 8001010:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001024:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001026:	6979      	ldr	r1, [r7, #20]
 8001028:	3348      	adds	r3, #72	; 0x48
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	440b      	add	r3, r1
 800102e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d109      	bne.n	800104c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	43db      	mvns	r3, r3
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800104a:	e007      	b.n	800105c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	431a      	orrs	r2, r3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d109      	bne.n	8001078 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	43db      	mvns	r3, r3
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001076:	e007      	b.n	8001088 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	431a      	orrs	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d107      	bne.n	80010a0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	431a      	orrs	r2, r3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010a6:	f023 0201 	bic.w	r2, r3, #1
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	e006      	b.n	80010c2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
  }
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40003400 	.word	0x40003400
 80010d4:	40006400 	.word	0x40006400

080010d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d12e      	bne.n	800114a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2202      	movs	r2, #2
 80010f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 0201 	bic.w	r2, r2, #1
 8001102:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001104:	f7ff fdf4 	bl	8000cf0 <HAL_GetTick>
 8001108:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800110a:	e012      	b.n	8001132 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800110c:	f7ff fdf0 	bl	8000cf0 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b0a      	cmp	r3, #10
 8001118:	d90b      	bls.n	8001132 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2205      	movs	r2, #5
 800112a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e012      	b.n	8001158 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1e5      	bne.n	800110c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e006      	b.n	8001158 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
  }
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001174:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800117e:	7ffb      	ldrb	r3, [r7, #31]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d003      	beq.n	800118c <HAL_CAN_AddTxMessage+0x2c>
 8001184:	7ffb      	ldrb	r3, [r7, #31]
 8001186:	2b02      	cmp	r3, #2
 8001188:	f040 80b8 	bne.w	80012fc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10a      	bne.n	80011ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800119c:	2b00      	cmp	r3, #0
 800119e:	d105      	bne.n	80011ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 80a0 	beq.w	80012ec <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	0e1b      	lsrs	r3, r3, #24
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d907      	bls.n	80011cc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e09e      	b.n	800130a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80011cc:	2201      	movs	r2, #1
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	409a      	lsls	r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10d      	bne.n	80011fa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011e8:	68f9      	ldr	r1, [r7, #12]
 80011ea:	6809      	ldr	r1, [r1, #0]
 80011ec:	431a      	orrs	r2, r3
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3318      	adds	r3, #24
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	440b      	add	r3, r1
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	e00f      	b.n	800121a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001204:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800120a:	68f9      	ldr	r1, [r7, #12]
 800120c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800120e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3318      	adds	r3, #24
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	440b      	add	r3, r1
 8001218:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6819      	ldr	r1, [r3, #0]
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3318      	adds	r3, #24
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	440b      	add	r3, r1
 800122a:	3304      	adds	r3, #4
 800122c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	7d1b      	ldrb	r3, [r3, #20]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d111      	bne.n	800125a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3318      	adds	r3, #24
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	4413      	add	r3, r2
 8001242:	3304      	adds	r3, #4
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	6811      	ldr	r1, [r2, #0]
 800124a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3318      	adds	r3, #24
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	440b      	add	r3, r1
 8001256:	3304      	adds	r3, #4
 8001258:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3307      	adds	r3, #7
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	061a      	lsls	r2, r3, #24
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3306      	adds	r3, #6
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	041b      	lsls	r3, r3, #16
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3305      	adds	r3, #5
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	4313      	orrs	r3, r2
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	3204      	adds	r2, #4
 800127a:	7812      	ldrb	r2, [r2, #0]
 800127c:	4610      	mov	r0, r2
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	6811      	ldr	r1, [r2, #0]
 8001282:	ea43 0200 	orr.w	r2, r3, r0
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	011b      	lsls	r3, r3, #4
 800128a:	440b      	add	r3, r1
 800128c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001290:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3303      	adds	r3, #3
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	061a      	lsls	r2, r3, #24
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3302      	adds	r3, #2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	041b      	lsls	r3, r3, #16
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3301      	adds	r3, #1
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	4313      	orrs	r3, r2
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	7812      	ldrb	r2, [r2, #0]
 80012b2:	4610      	mov	r0, r2
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	6811      	ldr	r1, [r2, #0]
 80012b8:	ea43 0200 	orr.w	r2, r3, r0
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	440b      	add	r3, r1
 80012c2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80012c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3318      	adds	r3, #24
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	4413      	add	r3, r2
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	6811      	ldr	r1, [r2, #0]
 80012da:	f043 0201 	orr.w	r2, r3, #1
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3318      	adds	r3, #24
 80012e2:	011b      	lsls	r3, r3, #4
 80012e4:	440b      	add	r3, r1
 80012e6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	e00e      	b.n	800130a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e006      	b.n	800130a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
  }
}
 800130a:	4618      	mov	r0, r3
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001316:	b480      	push	{r7}
 8001318:	b087      	sub	sp, #28
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f893 3020 	ldrb.w	r3, [r3, #32]
 800132a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800132c:	7dfb      	ldrb	r3, [r7, #23]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d003      	beq.n	800133a <HAL_CAN_GetRxMessage+0x24>
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	2b02      	cmp	r3, #2
 8001336:	f040 80f3 	bne.w	8001520 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d10e      	bne.n	800135e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d116      	bne.n	800137c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001352:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e0e7      	b.n	800152e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b00      	cmp	r3, #0
 800136a:	d107      	bne.n	800137c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e0d8      	b.n	800152e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	331b      	adds	r3, #27
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	4413      	add	r3, r2
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0204 	and.w	r2, r3, #4
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10c      	bne.n	80013b4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	331b      	adds	r3, #27
 80013a2:	011b      	lsls	r3, r3, #4
 80013a4:	4413      	add	r3, r2
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	0d5b      	lsrs	r3, r3, #21
 80013aa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	e00b      	b.n	80013cc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	331b      	adds	r3, #27
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	4413      	add	r3, r2
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	08db      	lsrs	r3, r3, #3
 80013c4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	331b      	adds	r3, #27
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	4413      	add	r3, r2
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0202 	and.w	r2, r3, #2
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	331b      	adds	r3, #27
 80013ea:	011b      	lsls	r3, r3, #4
 80013ec:	4413      	add	r3, r2
 80013ee:	3304      	adds	r3, #4
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 020f 	and.w	r2, r3, #15
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	331b      	adds	r3, #27
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	4413      	add	r3, r2
 8001406:	3304      	adds	r3, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	0a1b      	lsrs	r3, r3, #8
 800140c:	b2da      	uxtb	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	331b      	adds	r3, #27
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	4413      	add	r3, r2
 800141e:	3304      	adds	r3, #4
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	0c1b      	lsrs	r3, r3, #16
 8001424:	b29a      	uxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	4413      	add	r3, r2
 8001434:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	4413      	add	r3, r2
 800144a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0a1a      	lsrs	r2, r3, #8
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4413      	add	r3, r2
 8001464:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	0c1a      	lsrs	r2, r3, #16
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	3302      	adds	r3, #2
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	4413      	add	r3, r2
 800147e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	0e1a      	lsrs	r2, r3, #24
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	3303      	adds	r3, #3
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	4413      	add	r3, r2
 8001498:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	3304      	adds	r3, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	0a1a      	lsrs	r2, r3, #8
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	3305      	adds	r3, #5
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	4413      	add	r3, r2
 80014ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	0c1a      	lsrs	r2, r3, #16
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	3306      	adds	r3, #6
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	4413      	add	r3, r2
 80014e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	0e1a      	lsrs	r2, r3, #24
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	3307      	adds	r3, #7
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d108      	bne.n	800150c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f042 0220 	orr.w	r2, r2, #32
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	e007      	b.n	800151c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	691a      	ldr	r2, [r3, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0220 	orr.w	r2, r2, #32
 800151a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	e006      	b.n	800152e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
  }
}
 800152e:	4618      	mov	r0, r3
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800153a:	b480      	push	{r7}
 800153c:	b085      	sub	sp, #20
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800154a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d002      	beq.n	8001558 <HAL_CAN_ActivateNotification+0x1e>
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d109      	bne.n	800156c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6959      	ldr	r1, [r3, #20]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	e006      	b.n	800157a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
  }
}
 800157a:	4618      	mov	r0, r3
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b08a      	sub	sp, #40	; 0x28
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d07c      	beq.n	80016c6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d023      	beq.n	800161e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2201      	movs	r2, #1
 80015dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f983 	bl	80018f4 <HAL_CAN_TxMailbox0CompleteCallback>
 80015ee:	e016      	b.n	800161e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d004      	beq.n	8001604 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
 8001602:	e00c      	b.n	800161e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
 8001616:	e002      	b.n	800161e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f989 	bl	8001930 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001624:	2b00      	cmp	r3, #0
 8001626:	d024      	beq.n	8001672 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001630:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f963 	bl	8001908 <HAL_CAN_TxMailbox1CompleteCallback>
 8001642:	e016      	b.n	8001672 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164a:	2b00      	cmp	r3, #0
 800164c:	d004      	beq.n	8001658 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
 8001656:	e00c      	b.n	8001672 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165e:	2b00      	cmp	r3, #0
 8001660:	d004      	beq.n	800166c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
 800166a:	e002      	b.n	8001672 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f969 	bl	8001944 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d024      	beq.n	80016c6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001684:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 f943 	bl	800191c <HAL_CAN_TxMailbox2CompleteCallback>
 8001696:	e016      	b.n	80016c6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d004      	beq.n	80016ac <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
 80016aa:	e00c      	b.n	80016c6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d004      	beq.n	80016c0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
 80016be:	e002      	b.n	80016c6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f949 	bl	8001958 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00c      	beq.n	80016ea <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d007      	beq.n	80016ea <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2210      	movs	r2, #16
 80016e8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00b      	beq.n	800170c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d006      	beq.n	800170c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2208      	movs	r2, #8
 8001704:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f930 	bl	800196c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800170c:	6a3b      	ldr	r3, [r7, #32]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d009      	beq.n	800172a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d002      	beq.n	800172a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff f8ef 	bl	8000908 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00c      	beq.n	800174e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	2b00      	cmp	r3, #0
 800173c:	d007      	beq.n	800174e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001744:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2210      	movs	r2, #16
 800174c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	f003 0320 	and.w	r3, r3, #32
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00b      	beq.n	8001770 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d006      	beq.n	8001770 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2208      	movs	r2, #8
 8001768:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f912 	bl	8001994 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	2b00      	cmp	r3, #0
 8001778:	d009      	beq.n	800178e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d002      	beq.n	800178e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f8f9 	bl	8001980 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00b      	beq.n	80017b0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d006      	beq.n	80017b0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2210      	movs	r2, #16
 80017a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f8fc 	bl	80019a8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80017b0:	6a3b      	ldr	r3, [r7, #32]
 80017b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00b      	beq.n	80017d2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2208      	movs	r2, #8
 80017ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 f8f5 	bl	80019bc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d07b      	beq.n	80018d4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d072      	beq.n	80018cc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017e6:	6a3b      	ldr	r3, [r7, #32]
 80017e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001824:	2b00      	cmp	r3, #0
 8001826:	d008      	beq.n	800183a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001840:	2b00      	cmp	r3, #0
 8001842:	d043      	beq.n	80018cc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800184a:	2b00      	cmp	r3, #0
 800184c:	d03e      	beq.n	80018cc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001854:	2b60      	cmp	r3, #96	; 0x60
 8001856:	d02b      	beq.n	80018b0 <HAL_CAN_IRQHandler+0x32a>
 8001858:	2b60      	cmp	r3, #96	; 0x60
 800185a:	d82e      	bhi.n	80018ba <HAL_CAN_IRQHandler+0x334>
 800185c:	2b50      	cmp	r3, #80	; 0x50
 800185e:	d022      	beq.n	80018a6 <HAL_CAN_IRQHandler+0x320>
 8001860:	2b50      	cmp	r3, #80	; 0x50
 8001862:	d82a      	bhi.n	80018ba <HAL_CAN_IRQHandler+0x334>
 8001864:	2b40      	cmp	r3, #64	; 0x40
 8001866:	d019      	beq.n	800189c <HAL_CAN_IRQHandler+0x316>
 8001868:	2b40      	cmp	r3, #64	; 0x40
 800186a:	d826      	bhi.n	80018ba <HAL_CAN_IRQHandler+0x334>
 800186c:	2b30      	cmp	r3, #48	; 0x30
 800186e:	d010      	beq.n	8001892 <HAL_CAN_IRQHandler+0x30c>
 8001870:	2b30      	cmp	r3, #48	; 0x30
 8001872:	d822      	bhi.n	80018ba <HAL_CAN_IRQHandler+0x334>
 8001874:	2b10      	cmp	r3, #16
 8001876:	d002      	beq.n	800187e <HAL_CAN_IRQHandler+0x2f8>
 8001878:	2b20      	cmp	r3, #32
 800187a:	d005      	beq.n	8001888 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800187c:	e01d      	b.n	80018ba <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001886:	e019      	b.n	80018bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	f043 0310 	orr.w	r3, r3, #16
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001890:	e014      	b.n	80018bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	f043 0320 	orr.w	r3, r3, #32
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800189a:	e00f      	b.n	80018bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018a4:	e00a      	b.n	80018bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018ae:	e005      	b.n	80018bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018b8:	e000      	b.n	80018bc <HAL_CAN_IRQHandler+0x336>
            break;
 80018ba:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	699a      	ldr	r2, [r3, #24]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018ca:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2204      	movs	r2, #4
 80018d2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d008      	beq.n	80018ec <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f872 	bl	80019d0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80018ec:	bf00      	nop
 80018ee:	3728      	adds	r7, #40	; 0x28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <__NVIC_SetPriorityGrouping>:
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <__NVIC_SetPriorityGrouping+0x40>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <__NVIC_SetPriorityGrouping+0x40>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00
 8001a28:	05fa0000 	.word	0x05fa0000

08001a2c <__NVIC_GetPriorityGrouping>:
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_EnableIRQ>:
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	db0b      	blt.n	8001a72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	4907      	ldr	r1, [pc, #28]	; (8001a80 <__NVIC_EnableIRQ+0x38>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2001      	movs	r0, #1
 8001a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <__NVIC_SetPriority>:
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db0a      	blt.n	8001aae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <__NVIC_SetPriority+0x4c>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001aac:	e00a      	b.n	8001ac4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <__NVIC_SetPriority+0x50>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3b04      	subs	r3, #4
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	761a      	strb	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <NVIC_EncodePriority>:
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf28      	it	cs
 8001af6:	2304      	movcs	r3, #4
 8001af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d902      	bls.n	8001b08 <NVIC_EncodePriority+0x30>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b03      	subs	r3, #3
 8001b06:	e000      	b.n	8001b0a <NVIC_EncodePriority+0x32>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	4313      	orrs	r3, r2
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <SysTick_Config>:
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b50:	d301      	bcc.n	8001b56 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00f      	b.n	8001b76 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <SysTick_Config+0x40>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5e:	210f      	movs	r1, #15
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f7ff ff8e 	bl	8001a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <SysTick_Config+0x40>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <SysTick_Config+0x40>)
 8001b70:	2207      	movs	r2, #7
 8001b72:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	e000e010 	.word	0xe000e010

08001b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff29 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bac:	f7ff ff3e 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f7ff ff8e 	bl	8001ad8 <NVIC_EncodePriority>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff5d 	bl	8001a84 <__NVIC_SetPriority>
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff31 	bl	8001a48 <__NVIC_EnableIRQ>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffa2 	bl	8001b40 <SysTick_Config>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	e175      	b.n	8001f14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	f040 8164 	bne.w	8001f0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d00b      	beq.n	8001c66 <HAL_GPIO_Init+0x5e>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d007      	beq.n	8001c66 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c5a:	2b11      	cmp	r3, #17
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b12      	cmp	r3, #18
 8001c64:	d130      	bne.n	8001cc8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	2203      	movs	r2, #3
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	f003 0201 	and.w	r2, r3, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x100>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b12      	cmp	r3, #18
 8001d06:	d123      	bne.n	8001d50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	08da      	lsrs	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3208      	adds	r2, #8
 8001d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	08da      	lsrs	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3208      	adds	r2, #8
 8001d4a:	69b9      	ldr	r1, [r7, #24]
 8001d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0203 	and.w	r2, r3, #3
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80be 	beq.w	8001f0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	4b66      	ldr	r3, [pc, #408]	; (8001f2c <HAL_GPIO_Init+0x324>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	4a65      	ldr	r2, [pc, #404]	; (8001f2c <HAL_GPIO_Init+0x324>)
 8001d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9e:	4b63      	ldr	r3, [pc, #396]	; (8001f2c <HAL_GPIO_Init+0x324>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001daa:	4a61      	ldr	r2, [pc, #388]	; (8001f30 <HAL_GPIO_Init+0x328>)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a58      	ldr	r2, [pc, #352]	; (8001f34 <HAL_GPIO_Init+0x32c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d037      	beq.n	8001e46 <HAL_GPIO_Init+0x23e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a57      	ldr	r2, [pc, #348]	; (8001f38 <HAL_GPIO_Init+0x330>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d031      	beq.n	8001e42 <HAL_GPIO_Init+0x23a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a56      	ldr	r2, [pc, #344]	; (8001f3c <HAL_GPIO_Init+0x334>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d02b      	beq.n	8001e3e <HAL_GPIO_Init+0x236>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a55      	ldr	r2, [pc, #340]	; (8001f40 <HAL_GPIO_Init+0x338>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d025      	beq.n	8001e3a <HAL_GPIO_Init+0x232>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a54      	ldr	r2, [pc, #336]	; (8001f44 <HAL_GPIO_Init+0x33c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d01f      	beq.n	8001e36 <HAL_GPIO_Init+0x22e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a53      	ldr	r2, [pc, #332]	; (8001f48 <HAL_GPIO_Init+0x340>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d019      	beq.n	8001e32 <HAL_GPIO_Init+0x22a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a52      	ldr	r2, [pc, #328]	; (8001f4c <HAL_GPIO_Init+0x344>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_GPIO_Init+0x226>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a51      	ldr	r2, [pc, #324]	; (8001f50 <HAL_GPIO_Init+0x348>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00d      	beq.n	8001e2a <HAL_GPIO_Init+0x222>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a50      	ldr	r2, [pc, #320]	; (8001f54 <HAL_GPIO_Init+0x34c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d007      	beq.n	8001e26 <HAL_GPIO_Init+0x21e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4f      	ldr	r2, [pc, #316]	; (8001f58 <HAL_GPIO_Init+0x350>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d101      	bne.n	8001e22 <HAL_GPIO_Init+0x21a>
 8001e1e:	2309      	movs	r3, #9
 8001e20:	e012      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e22:	230a      	movs	r3, #10
 8001e24:	e010      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e26:	2308      	movs	r3, #8
 8001e28:	e00e      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	e00c      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e2e:	2306      	movs	r3, #6
 8001e30:	e00a      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e32:	2305      	movs	r3, #5
 8001e34:	e008      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e36:	2304      	movs	r3, #4
 8001e38:	e006      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e004      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e002      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e46:	2300      	movs	r3, #0
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	f002 0203 	and.w	r2, r2, #3
 8001e4e:	0092      	lsls	r2, r2, #2
 8001e50:	4093      	lsls	r3, r2
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e58:	4935      	ldr	r1, [pc, #212]	; (8001f30 <HAL_GPIO_Init+0x328>)
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e66:	4b3d      	ldr	r3, [pc, #244]	; (8001f5c <HAL_GPIO_Init+0x354>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e8a:	4a34      	ldr	r2, [pc, #208]	; (8001f5c <HAL_GPIO_Init+0x354>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e90:	4b32      	ldr	r3, [pc, #200]	; (8001f5c <HAL_GPIO_Init+0x354>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb4:	4a29      	ldr	r2, [pc, #164]	; (8001f5c <HAL_GPIO_Init+0x354>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eba:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <HAL_GPIO_Init+0x354>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ede:	4a1f      	ldr	r2, [pc, #124]	; (8001f5c <HAL_GPIO_Init+0x354>)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <HAL_GPIO_Init+0x354>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f08:	4a14      	ldr	r2, [pc, #80]	; (8001f5c <HAL_GPIO_Init+0x354>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3301      	adds	r3, #1
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	f67f ae86 	bls.w	8001c28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3724      	adds	r7, #36	; 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40013800 	.word	0x40013800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	40020800 	.word	0x40020800
 8001f40:	40020c00 	.word	0x40020c00
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40021400 	.word	0x40021400
 8001f4c:	40021800 	.word	0x40021800
 8001f50:	40021c00 	.word	0x40021c00
 8001f54:	40022000 	.word	0x40022000
 8001f58:	40022400 	.word	0x40022400
 8001f5c:	40013c00 	.word	0x40013c00

08001f60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	4b23      	ldr	r3, [pc, #140]	; (8001ff8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	4a22      	ldr	r2, [pc, #136]	; (8001ff8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f74:	6413      	str	r3, [r2, #64]	; 0x40
 8001f76:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f82:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f8e:	f7fe feaf 	bl	8000cf0 <HAL_GetTick>
 8001f92:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f94:	e009      	b.n	8001faa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f96:	f7fe feab 	bl	8000cf0 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fa4:	d901      	bls.n	8001faa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e022      	b.n	8001ff0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001faa:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb6:	d1ee      	bne.n	8001f96 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0f      	ldr	r2, [pc, #60]	; (8001ffc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fc4:	f7fe fe94 	bl	8000cf0 <HAL_GetTick>
 8001fc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fca:	e009      	b.n	8001fe0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fcc:	f7fe fe90 	bl	8000cf0 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fda:	d901      	bls.n	8001fe0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e007      	b.n	8001ff0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fec:	d1ee      	bne.n	8001fcc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40007000 	.word	0x40007000

08002000 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002008:	2300      	movs	r3, #0
 800200a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e29b      	b.n	800254e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 8087 	beq.w	8002132 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002024:	4b96      	ldr	r3, [pc, #600]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b04      	cmp	r3, #4
 800202e:	d00c      	beq.n	800204a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002030:	4b93      	ldr	r3, [pc, #588]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b08      	cmp	r3, #8
 800203a:	d112      	bne.n	8002062 <HAL_RCC_OscConfig+0x62>
 800203c:	4b90      	ldr	r3, [pc, #576]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002048:	d10b      	bne.n	8002062 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204a:	4b8d      	ldr	r3, [pc, #564]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d06c      	beq.n	8002130 <HAL_RCC_OscConfig+0x130>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d168      	bne.n	8002130 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e275      	b.n	800254e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206a:	d106      	bne.n	800207a <HAL_RCC_OscConfig+0x7a>
 800206c:	4b84      	ldr	r3, [pc, #528]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a83      	ldr	r2, [pc, #524]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 8002072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	e02e      	b.n	80020d8 <HAL_RCC_OscConfig+0xd8>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10c      	bne.n	800209c <HAL_RCC_OscConfig+0x9c>
 8002082:	4b7f      	ldr	r3, [pc, #508]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a7e      	ldr	r2, [pc, #504]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 8002088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	4b7c      	ldr	r3, [pc, #496]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a7b      	ldr	r2, [pc, #492]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 8002094:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e01d      	b.n	80020d8 <HAL_RCC_OscConfig+0xd8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0xc0>
 80020a6:	4b76      	ldr	r3, [pc, #472]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a75      	ldr	r2, [pc, #468]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 80020ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b73      	ldr	r3, [pc, #460]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a72      	ldr	r2, [pc, #456]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0xd8>
 80020c0:	4b6f      	ldr	r3, [pc, #444]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a6e      	ldr	r2, [pc, #440]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 80020c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b6c      	ldr	r3, [pc, #432]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a6b      	ldr	r2, [pc, #428]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 80020d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d013      	beq.n	8002108 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e0:	f7fe fe06 	bl	8000cf0 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e8:	f7fe fe02 	bl	8000cf0 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e229      	b.n	800254e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	4b61      	ldr	r3, [pc, #388]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0xe8>
 8002106:	e014      	b.n	8002132 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7fe fdf2 	bl	8000cf0 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002110:	f7fe fdee 	bl	8000cf0 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e215      	b.n	800254e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	4b57      	ldr	r3, [pc, #348]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x110>
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d069      	beq.n	8002212 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800213e:	4b50      	ldr	r3, [pc, #320]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00b      	beq.n	8002162 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214a:	4b4d      	ldr	r3, [pc, #308]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b08      	cmp	r3, #8
 8002154:	d11c      	bne.n	8002190 <HAL_RCC_OscConfig+0x190>
 8002156:	4b4a      	ldr	r3, [pc, #296]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d116      	bne.n	8002190 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002162:	4b47      	ldr	r3, [pc, #284]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <HAL_RCC_OscConfig+0x17a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d001      	beq.n	800217a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e1e9      	b.n	800254e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217a:	4b41      	ldr	r3, [pc, #260]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	493d      	ldr	r1, [pc, #244]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	e040      	b.n	8002212 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d023      	beq.n	80021e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002198:	4b39      	ldr	r3, [pc, #228]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a38      	ldr	r2, [pc, #224]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7fe fda4 	bl	8000cf0 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ac:	f7fe fda0 	bl	8000cf0 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e1c7      	b.n	800254e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021be:	4b30      	ldr	r3, [pc, #192]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ca:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4929      	ldr	r1, [pc, #164]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]
 80021de:	e018      	b.n	8002212 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e0:	4b27      	ldr	r3, [pc, #156]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a26      	ldr	r2, [pc, #152]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7fe fd80 	bl	8000cf0 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f4:	f7fe fd7c 	bl	8000cf0 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e1a3      	b.n	800254e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002206:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d038      	beq.n	8002290 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d019      	beq.n	800225a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002226:	4b16      	ldr	r3, [pc, #88]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 8002228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222a:	4a15      	ldr	r2, [pc, #84]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002232:	f7fe fd5d 	bl	8000cf0 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223a:	f7fe fd59 	bl	8000cf0 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e180      	b.n	800254e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 800224e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x23a>
 8002258:	e01a      	b.n	8002290 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 800225c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800225e:	4a08      	ldr	r2, [pc, #32]	; (8002280 <HAL_RCC_OscConfig+0x280>)
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002266:	f7fe fd43 	bl	8000cf0 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800226c:	e00a      	b.n	8002284 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226e:	f7fe fd3f 	bl	8000cf0 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d903      	bls.n	8002284 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e166      	b.n	800254e <HAL_RCC_OscConfig+0x54e>
 8002280:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002284:	4b92      	ldr	r3, [pc, #584]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 8002286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1ee      	bne.n	800226e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80a4 	beq.w	80023e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229e:	4b8c      	ldr	r3, [pc, #560]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10d      	bne.n	80022c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4b89      	ldr	r3, [pc, #548]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	4a88      	ldr	r2, [pc, #544]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	6413      	str	r3, [r2, #64]	; 0x40
 80022b6:	4b86      	ldr	r3, [pc, #536]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c2:	2301      	movs	r3, #1
 80022c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c6:	4b83      	ldr	r3, [pc, #524]	; (80024d4 <HAL_RCC_OscConfig+0x4d4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d118      	bne.n	8002304 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80022d2:	4b80      	ldr	r3, [pc, #512]	; (80024d4 <HAL_RCC_OscConfig+0x4d4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a7f      	ldr	r2, [pc, #508]	; (80024d4 <HAL_RCC_OscConfig+0x4d4>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022de:	f7fe fd07 	bl	8000cf0 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e6:	f7fe fd03 	bl	8000cf0 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b64      	cmp	r3, #100	; 0x64
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e12a      	b.n	800254e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f8:	4b76      	ldr	r3, [pc, #472]	; (80024d4 <HAL_RCC_OscConfig+0x4d4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d106      	bne.n	800231a <HAL_RCC_OscConfig+0x31a>
 800230c:	4b70      	ldr	r3, [pc, #448]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	4a6f      	ldr	r2, [pc, #444]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6713      	str	r3, [r2, #112]	; 0x70
 8002318:	e02d      	b.n	8002376 <HAL_RCC_OscConfig+0x376>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0x33c>
 8002322:	4b6b      	ldr	r3, [pc, #428]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 8002324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002326:	4a6a      	ldr	r2, [pc, #424]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6713      	str	r3, [r2, #112]	; 0x70
 800232e:	4b68      	ldr	r3, [pc, #416]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	4a67      	ldr	r2, [pc, #412]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	6713      	str	r3, [r2, #112]	; 0x70
 800233a:	e01c      	b.n	8002376 <HAL_RCC_OscConfig+0x376>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d10c      	bne.n	800235e <HAL_RCC_OscConfig+0x35e>
 8002344:	4b62      	ldr	r3, [pc, #392]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 8002346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002348:	4a61      	ldr	r2, [pc, #388]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6713      	str	r3, [r2, #112]	; 0x70
 8002350:	4b5f      	ldr	r3, [pc, #380]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	4a5e      	ldr	r2, [pc, #376]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6713      	str	r3, [r2, #112]	; 0x70
 800235c:	e00b      	b.n	8002376 <HAL_RCC_OscConfig+0x376>
 800235e:	4b5c      	ldr	r3, [pc, #368]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 8002360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002362:	4a5b      	ldr	r2, [pc, #364]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6713      	str	r3, [r2, #112]	; 0x70
 800236a:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236e:	4a58      	ldr	r2, [pc, #352]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d015      	beq.n	80023aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237e:	f7fe fcb7 	bl	8000cf0 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7fe fcb3 	bl	8000cf0 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f241 3288 	movw	r2, #5000	; 0x1388
 8002394:	4293      	cmp	r3, r2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0d8      	b.n	800254e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239c:	4b4c      	ldr	r3, [pc, #304]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ee      	beq.n	8002386 <HAL_RCC_OscConfig+0x386>
 80023a8:	e014      	b.n	80023d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023aa:	f7fe fca1 	bl	8000cf0 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	e00a      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7fe fc9d 	bl	8000cf0 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e0c2      	b.n	800254e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c8:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 80023ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1ee      	bne.n	80023b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d105      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023da:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4a3c      	ldr	r2, [pc, #240]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 80023e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 80ae 	beq.w	800254c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f0:	4b37      	ldr	r3, [pc, #220]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d06d      	beq.n	80024d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d14b      	bne.n	800249c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002404:	4b32      	ldr	r3, [pc, #200]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a31      	ldr	r2, [pc, #196]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 800240a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800240e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7fe fc6e 	bl	8000cf0 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002418:	f7fe fc6a 	bl	8000cf0 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e091      	b.n	800254e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242a:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69da      	ldr	r2, [r3, #28]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	019b      	lsls	r3, r3, #6
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	085b      	lsrs	r3, r3, #1
 800244e:	3b01      	subs	r3, #1
 8002450:	041b      	lsls	r3, r3, #16
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	061b      	lsls	r3, r3, #24
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	071b      	lsls	r3, r3, #28
 8002462:	491b      	ldr	r1, [pc, #108]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 8002464:	4313      	orrs	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a18      	ldr	r2, [pc, #96]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 800246e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe fc3c 	bl	8000cf0 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247c:	f7fe fc38 	bl	8000cf0 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e05f      	b.n	800254e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x47c>
 800249a:	e057      	b.n	800254c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a0b      	ldr	r2, [pc, #44]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 80024a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe fc22 	bl	8000cf0 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b0:	f7fe fc1e 	bl	8000cf0 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e045      	b.n	800254e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c2:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <HAL_RCC_OscConfig+0x4d0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x4b0>
 80024ce:	e03d      	b.n	800254c <HAL_RCC_OscConfig+0x54c>
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80024d8:	4b1f      	ldr	r3, [pc, #124]	; (8002558 <HAL_RCC_OscConfig+0x558>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d030      	beq.n	8002548 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d129      	bne.n	8002548 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d122      	bne.n	8002548 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002508:	4013      	ands	r3, r2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800250e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002510:	4293      	cmp	r3, r2
 8002512:	d119      	bne.n	8002548 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251e:	085b      	lsrs	r3, r3, #1
 8002520:	3b01      	subs	r3, #1
 8002522:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002524:	429a      	cmp	r2, r3
 8002526:	d10f      	bne.n	8002548 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002534:	429a      	cmp	r2, r3
 8002536:	d107      	bne.n	8002548 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800

0800255c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0d0      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b6a      	ldr	r3, [pc, #424]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d910      	bls.n	80025a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b67      	ldr	r3, [pc, #412]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 020f 	bic.w	r2, r3, #15
 800258a:	4965      	ldr	r1, [pc, #404]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b63      	ldr	r3, [pc, #396]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0b8      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d020      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025bc:	4b59      	ldr	r3, [pc, #356]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4a58      	ldr	r2, [pc, #352]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 80025c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025d4:	4b53      	ldr	r3, [pc, #332]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	4a52      	ldr	r2, [pc, #328]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 80025da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e0:	4b50      	ldr	r3, [pc, #320]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	494d      	ldr	r1, [pc, #308]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d040      	beq.n	8002680 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d107      	bne.n	8002616 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002606:	4b47      	ldr	r3, [pc, #284]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d115      	bne.n	800263e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e07f      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261e:	4b41      	ldr	r3, [pc, #260]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e073      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262e:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e06b      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263e:	4b39      	ldr	r3, [pc, #228]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f023 0203 	bic.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4936      	ldr	r1, [pc, #216]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 800264c:	4313      	orrs	r3, r2
 800264e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002650:	f7fe fb4e 	bl	8000cf0 <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	e00a      	b.n	800266e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002658:	f7fe fb4a 	bl	8000cf0 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	; 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e053      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 020c 	and.w	r2, r3, #12
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	429a      	cmp	r2, r3
 800267e:	d1eb      	bne.n	8002658 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002680:	4b27      	ldr	r3, [pc, #156]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d210      	bcs.n	80026b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b24      	ldr	r3, [pc, #144]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 020f 	bic.w	r2, r3, #15
 8002696:	4922      	ldr	r1, [pc, #136]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	4313      	orrs	r3, r2
 800269c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269e:	4b20      	ldr	r3, [pc, #128]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e032      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4916      	ldr	r1, [pc, #88]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	490e      	ldr	r1, [pc, #56]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ee:	f000 f821 	bl	8002734 <HAL_RCC_GetSysClockFreq>
 80026f2:	4602      	mov	r2, r0
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	490a      	ldr	r1, [pc, #40]	; (8002728 <HAL_RCC_ClockConfig+0x1cc>)
 8002700:	5ccb      	ldrb	r3, [r1, r3]
 8002702:	fa22 f303 	lsr.w	r3, r2, r3
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <HAL_RCC_ClockConfig+0x1d0>)
 8002708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_RCC_ClockConfig+0x1d4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe faaa 	bl	8000c68 <HAL_InitTick>

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40023c00 	.word	0x40023c00
 8002724:	40023800 	.word	0x40023800
 8002728:	08003944 	.word	0x08003944
 800272c:	20000000 	.word	0x20000000
 8002730:	20000004 	.word	0x20000004

08002734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002734:	b5b0      	push	{r4, r5, r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800273a:	2100      	movs	r1, #0
 800273c:	6079      	str	r1, [r7, #4]
 800273e:	2100      	movs	r1, #0
 8002740:	60f9      	str	r1, [r7, #12]
 8002742:	2100      	movs	r1, #0
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002746:	2100      	movs	r1, #0
 8002748:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800274a:	4952      	ldr	r1, [pc, #328]	; (8002894 <HAL_RCC_GetSysClockFreq+0x160>)
 800274c:	6889      	ldr	r1, [r1, #8]
 800274e:	f001 010c 	and.w	r1, r1, #12
 8002752:	2908      	cmp	r1, #8
 8002754:	d00d      	beq.n	8002772 <HAL_RCC_GetSysClockFreq+0x3e>
 8002756:	2908      	cmp	r1, #8
 8002758:	f200 8094 	bhi.w	8002884 <HAL_RCC_GetSysClockFreq+0x150>
 800275c:	2900      	cmp	r1, #0
 800275e:	d002      	beq.n	8002766 <HAL_RCC_GetSysClockFreq+0x32>
 8002760:	2904      	cmp	r1, #4
 8002762:	d003      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0x38>
 8002764:	e08e      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002766:	4b4c      	ldr	r3, [pc, #304]	; (8002898 <HAL_RCC_GetSysClockFreq+0x164>)
 8002768:	60bb      	str	r3, [r7, #8]
      break;
 800276a:	e08e      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800276c:	4b4b      	ldr	r3, [pc, #300]	; (800289c <HAL_RCC_GetSysClockFreq+0x168>)
 800276e:	60bb      	str	r3, [r7, #8]
      break;
 8002770:	e08b      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002772:	4948      	ldr	r1, [pc, #288]	; (8002894 <HAL_RCC_GetSysClockFreq+0x160>)
 8002774:	6849      	ldr	r1, [r1, #4]
 8002776:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800277a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800277c:	4945      	ldr	r1, [pc, #276]	; (8002894 <HAL_RCC_GetSysClockFreq+0x160>)
 800277e:	6849      	ldr	r1, [r1, #4]
 8002780:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002784:	2900      	cmp	r1, #0
 8002786:	d024      	beq.n	80027d2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002788:	4942      	ldr	r1, [pc, #264]	; (8002894 <HAL_RCC_GetSysClockFreq+0x160>)
 800278a:	6849      	ldr	r1, [r1, #4]
 800278c:	0989      	lsrs	r1, r1, #6
 800278e:	4608      	mov	r0, r1
 8002790:	f04f 0100 	mov.w	r1, #0
 8002794:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002798:	f04f 0500 	mov.w	r5, #0
 800279c:	ea00 0204 	and.w	r2, r0, r4
 80027a0:	ea01 0305 	and.w	r3, r1, r5
 80027a4:	493d      	ldr	r1, [pc, #244]	; (800289c <HAL_RCC_GetSysClockFreq+0x168>)
 80027a6:	fb01 f003 	mul.w	r0, r1, r3
 80027aa:	2100      	movs	r1, #0
 80027ac:	fb01 f102 	mul.w	r1, r1, r2
 80027b0:	1844      	adds	r4, r0, r1
 80027b2:	493a      	ldr	r1, [pc, #232]	; (800289c <HAL_RCC_GetSysClockFreq+0x168>)
 80027b4:	fba2 0101 	umull	r0, r1, r2, r1
 80027b8:	1863      	adds	r3, r4, r1
 80027ba:	4619      	mov	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	461a      	mov	r2, r3
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	f7fd fd8c 	bl	80002e0 <__aeabi_uldivmod>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4613      	mov	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	e04a      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d2:	4b30      	ldr	r3, [pc, #192]	; (8002894 <HAL_RCC_GetSysClockFreq+0x160>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	099b      	lsrs	r3, r3, #6
 80027d8:	461a      	mov	r2, r3
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027e2:	f04f 0100 	mov.w	r1, #0
 80027e6:	ea02 0400 	and.w	r4, r2, r0
 80027ea:	ea03 0501 	and.w	r5, r3, r1
 80027ee:	4620      	mov	r0, r4
 80027f0:	4629      	mov	r1, r5
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	014b      	lsls	r3, r1, #5
 80027fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002800:	0142      	lsls	r2, r0, #5
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	1b00      	subs	r0, r0, r4
 8002808:	eb61 0105 	sbc.w	r1, r1, r5
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	018b      	lsls	r3, r1, #6
 8002816:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800281a:	0182      	lsls	r2, r0, #6
 800281c:	1a12      	subs	r2, r2, r0
 800281e:	eb63 0301 	sbc.w	r3, r3, r1
 8002822:	f04f 0000 	mov.w	r0, #0
 8002826:	f04f 0100 	mov.w	r1, #0
 800282a:	00d9      	lsls	r1, r3, #3
 800282c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002830:	00d0      	lsls	r0, r2, #3
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	1912      	adds	r2, r2, r4
 8002838:	eb45 0303 	adc.w	r3, r5, r3
 800283c:	f04f 0000 	mov.w	r0, #0
 8002840:	f04f 0100 	mov.w	r1, #0
 8002844:	0299      	lsls	r1, r3, #10
 8002846:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800284a:	0290      	lsls	r0, r2, #10
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	461a      	mov	r2, r3
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	f7fd fd40 	bl	80002e0 <__aeabi_uldivmod>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4613      	mov	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <HAL_RCC_GetSysClockFreq+0x160>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	3301      	adds	r3, #1
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	60bb      	str	r3, [r7, #8]
      break;
 8002882:	e002      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <HAL_RCC_GetSysClockFreq+0x164>)
 8002886:	60bb      	str	r3, [r7, #8]
      break;
 8002888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800288a:	68bb      	ldr	r3, [r7, #8]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bdb0      	pop	{r4, r5, r7, pc}
 8002894:	40023800 	.word	0x40023800
 8002898:	00f42400 	.word	0x00f42400
 800289c:	017d7840 	.word	0x017d7840

080028a0 <__errno>:
 80028a0:	4b01      	ldr	r3, [pc, #4]	; (80028a8 <__errno+0x8>)
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	2000000c 	.word	0x2000000c

080028ac <__libc_init_array>:
 80028ac:	b570      	push	{r4, r5, r6, lr}
 80028ae:	4d0d      	ldr	r5, [pc, #52]	; (80028e4 <__libc_init_array+0x38>)
 80028b0:	4c0d      	ldr	r4, [pc, #52]	; (80028e8 <__libc_init_array+0x3c>)
 80028b2:	1b64      	subs	r4, r4, r5
 80028b4:	10a4      	asrs	r4, r4, #2
 80028b6:	2600      	movs	r6, #0
 80028b8:	42a6      	cmp	r6, r4
 80028ba:	d109      	bne.n	80028d0 <__libc_init_array+0x24>
 80028bc:	4d0b      	ldr	r5, [pc, #44]	; (80028ec <__libc_init_array+0x40>)
 80028be:	4c0c      	ldr	r4, [pc, #48]	; (80028f0 <__libc_init_array+0x44>)
 80028c0:	f000 ffec 	bl	800389c <_init>
 80028c4:	1b64      	subs	r4, r4, r5
 80028c6:	10a4      	asrs	r4, r4, #2
 80028c8:	2600      	movs	r6, #0
 80028ca:	42a6      	cmp	r6, r4
 80028cc:	d105      	bne.n	80028da <__libc_init_array+0x2e>
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
 80028d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d4:	4798      	blx	r3
 80028d6:	3601      	adds	r6, #1
 80028d8:	e7ee      	b.n	80028b8 <__libc_init_array+0xc>
 80028da:	f855 3b04 	ldr.w	r3, [r5], #4
 80028de:	4798      	blx	r3
 80028e0:	3601      	adds	r6, #1
 80028e2:	e7f2      	b.n	80028ca <__libc_init_array+0x1e>
 80028e4:	080039f4 	.word	0x080039f4
 80028e8:	080039f4 	.word	0x080039f4
 80028ec:	080039f4 	.word	0x080039f4
 80028f0:	080039f8 	.word	0x080039f8

080028f4 <memset>:
 80028f4:	4402      	add	r2, r0
 80028f6:	4603      	mov	r3, r0
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d100      	bne.n	80028fe <memset+0xa>
 80028fc:	4770      	bx	lr
 80028fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002902:	e7f9      	b.n	80028f8 <memset+0x4>

08002904 <iprintf>:
 8002904:	b40f      	push	{r0, r1, r2, r3}
 8002906:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <iprintf+0x2c>)
 8002908:	b513      	push	{r0, r1, r4, lr}
 800290a:	681c      	ldr	r4, [r3, #0]
 800290c:	b124      	cbz	r4, 8002918 <iprintf+0x14>
 800290e:	69a3      	ldr	r3, [r4, #24]
 8002910:	b913      	cbnz	r3, 8002918 <iprintf+0x14>
 8002912:	4620      	mov	r0, r4
 8002914:	f000 fa5e 	bl	8002dd4 <__sinit>
 8002918:	ab05      	add	r3, sp, #20
 800291a:	9a04      	ldr	r2, [sp, #16]
 800291c:	68a1      	ldr	r1, [r4, #8]
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	4620      	mov	r0, r4
 8002922:	f000 fc2f 	bl	8003184 <_vfiprintf_r>
 8002926:	b002      	add	sp, #8
 8002928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800292c:	b004      	add	sp, #16
 800292e:	4770      	bx	lr
 8002930:	2000000c 	.word	0x2000000c

08002934 <_puts_r>:
 8002934:	b570      	push	{r4, r5, r6, lr}
 8002936:	460e      	mov	r6, r1
 8002938:	4605      	mov	r5, r0
 800293a:	b118      	cbz	r0, 8002944 <_puts_r+0x10>
 800293c:	6983      	ldr	r3, [r0, #24]
 800293e:	b90b      	cbnz	r3, 8002944 <_puts_r+0x10>
 8002940:	f000 fa48 	bl	8002dd4 <__sinit>
 8002944:	69ab      	ldr	r3, [r5, #24]
 8002946:	68ac      	ldr	r4, [r5, #8]
 8002948:	b913      	cbnz	r3, 8002950 <_puts_r+0x1c>
 800294a:	4628      	mov	r0, r5
 800294c:	f000 fa42 	bl	8002dd4 <__sinit>
 8002950:	4b2c      	ldr	r3, [pc, #176]	; (8002a04 <_puts_r+0xd0>)
 8002952:	429c      	cmp	r4, r3
 8002954:	d120      	bne.n	8002998 <_puts_r+0x64>
 8002956:	686c      	ldr	r4, [r5, #4]
 8002958:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800295a:	07db      	lsls	r3, r3, #31
 800295c:	d405      	bmi.n	800296a <_puts_r+0x36>
 800295e:	89a3      	ldrh	r3, [r4, #12]
 8002960:	0598      	lsls	r0, r3, #22
 8002962:	d402      	bmi.n	800296a <_puts_r+0x36>
 8002964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002966:	f000 fad3 	bl	8002f10 <__retarget_lock_acquire_recursive>
 800296a:	89a3      	ldrh	r3, [r4, #12]
 800296c:	0719      	lsls	r1, r3, #28
 800296e:	d51d      	bpl.n	80029ac <_puts_r+0x78>
 8002970:	6923      	ldr	r3, [r4, #16]
 8002972:	b1db      	cbz	r3, 80029ac <_puts_r+0x78>
 8002974:	3e01      	subs	r6, #1
 8002976:	68a3      	ldr	r3, [r4, #8]
 8002978:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800297c:	3b01      	subs	r3, #1
 800297e:	60a3      	str	r3, [r4, #8]
 8002980:	bb39      	cbnz	r1, 80029d2 <_puts_r+0x9e>
 8002982:	2b00      	cmp	r3, #0
 8002984:	da38      	bge.n	80029f8 <_puts_r+0xc4>
 8002986:	4622      	mov	r2, r4
 8002988:	210a      	movs	r1, #10
 800298a:	4628      	mov	r0, r5
 800298c:	f000 f848 	bl	8002a20 <__swbuf_r>
 8002990:	3001      	adds	r0, #1
 8002992:	d011      	beq.n	80029b8 <_puts_r+0x84>
 8002994:	250a      	movs	r5, #10
 8002996:	e011      	b.n	80029bc <_puts_r+0x88>
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <_puts_r+0xd4>)
 800299a:	429c      	cmp	r4, r3
 800299c:	d101      	bne.n	80029a2 <_puts_r+0x6e>
 800299e:	68ac      	ldr	r4, [r5, #8]
 80029a0:	e7da      	b.n	8002958 <_puts_r+0x24>
 80029a2:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <_puts_r+0xd8>)
 80029a4:	429c      	cmp	r4, r3
 80029a6:	bf08      	it	eq
 80029a8:	68ec      	ldreq	r4, [r5, #12]
 80029aa:	e7d5      	b.n	8002958 <_puts_r+0x24>
 80029ac:	4621      	mov	r1, r4
 80029ae:	4628      	mov	r0, r5
 80029b0:	f000 f888 	bl	8002ac4 <__swsetup_r>
 80029b4:	2800      	cmp	r0, #0
 80029b6:	d0dd      	beq.n	8002974 <_puts_r+0x40>
 80029b8:	f04f 35ff 	mov.w	r5, #4294967295
 80029bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029be:	07da      	lsls	r2, r3, #31
 80029c0:	d405      	bmi.n	80029ce <_puts_r+0x9a>
 80029c2:	89a3      	ldrh	r3, [r4, #12]
 80029c4:	059b      	lsls	r3, r3, #22
 80029c6:	d402      	bmi.n	80029ce <_puts_r+0x9a>
 80029c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029ca:	f000 faa2 	bl	8002f12 <__retarget_lock_release_recursive>
 80029ce:	4628      	mov	r0, r5
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	da04      	bge.n	80029e0 <_puts_r+0xac>
 80029d6:	69a2      	ldr	r2, [r4, #24]
 80029d8:	429a      	cmp	r2, r3
 80029da:	dc06      	bgt.n	80029ea <_puts_r+0xb6>
 80029dc:	290a      	cmp	r1, #10
 80029de:	d004      	beq.n	80029ea <_puts_r+0xb6>
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	6022      	str	r2, [r4, #0]
 80029e6:	7019      	strb	r1, [r3, #0]
 80029e8:	e7c5      	b.n	8002976 <_puts_r+0x42>
 80029ea:	4622      	mov	r2, r4
 80029ec:	4628      	mov	r0, r5
 80029ee:	f000 f817 	bl	8002a20 <__swbuf_r>
 80029f2:	3001      	adds	r0, #1
 80029f4:	d1bf      	bne.n	8002976 <_puts_r+0x42>
 80029f6:	e7df      	b.n	80029b8 <_puts_r+0x84>
 80029f8:	6823      	ldr	r3, [r4, #0]
 80029fa:	250a      	movs	r5, #10
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	6022      	str	r2, [r4, #0]
 8002a00:	701d      	strb	r5, [r3, #0]
 8002a02:	e7db      	b.n	80029bc <_puts_r+0x88>
 8002a04:	08003978 	.word	0x08003978
 8002a08:	08003998 	.word	0x08003998
 8002a0c:	08003958 	.word	0x08003958

08002a10 <puts>:
 8002a10:	4b02      	ldr	r3, [pc, #8]	; (8002a1c <puts+0xc>)
 8002a12:	4601      	mov	r1, r0
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	f7ff bf8d 	b.w	8002934 <_puts_r>
 8002a1a:	bf00      	nop
 8002a1c:	2000000c 	.word	0x2000000c

08002a20 <__swbuf_r>:
 8002a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a22:	460e      	mov	r6, r1
 8002a24:	4614      	mov	r4, r2
 8002a26:	4605      	mov	r5, r0
 8002a28:	b118      	cbz	r0, 8002a32 <__swbuf_r+0x12>
 8002a2a:	6983      	ldr	r3, [r0, #24]
 8002a2c:	b90b      	cbnz	r3, 8002a32 <__swbuf_r+0x12>
 8002a2e:	f000 f9d1 	bl	8002dd4 <__sinit>
 8002a32:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <__swbuf_r+0x98>)
 8002a34:	429c      	cmp	r4, r3
 8002a36:	d12b      	bne.n	8002a90 <__swbuf_r+0x70>
 8002a38:	686c      	ldr	r4, [r5, #4]
 8002a3a:	69a3      	ldr	r3, [r4, #24]
 8002a3c:	60a3      	str	r3, [r4, #8]
 8002a3e:	89a3      	ldrh	r3, [r4, #12]
 8002a40:	071a      	lsls	r2, r3, #28
 8002a42:	d52f      	bpl.n	8002aa4 <__swbuf_r+0x84>
 8002a44:	6923      	ldr	r3, [r4, #16]
 8002a46:	b36b      	cbz	r3, 8002aa4 <__swbuf_r+0x84>
 8002a48:	6923      	ldr	r3, [r4, #16]
 8002a4a:	6820      	ldr	r0, [r4, #0]
 8002a4c:	1ac0      	subs	r0, r0, r3
 8002a4e:	6963      	ldr	r3, [r4, #20]
 8002a50:	b2f6      	uxtb	r6, r6
 8002a52:	4283      	cmp	r3, r0
 8002a54:	4637      	mov	r7, r6
 8002a56:	dc04      	bgt.n	8002a62 <__swbuf_r+0x42>
 8002a58:	4621      	mov	r1, r4
 8002a5a:	4628      	mov	r0, r5
 8002a5c:	f000 f926 	bl	8002cac <_fflush_r>
 8002a60:	bb30      	cbnz	r0, 8002ab0 <__swbuf_r+0x90>
 8002a62:	68a3      	ldr	r3, [r4, #8]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	60a3      	str	r3, [r4, #8]
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	6022      	str	r2, [r4, #0]
 8002a6e:	701e      	strb	r6, [r3, #0]
 8002a70:	6963      	ldr	r3, [r4, #20]
 8002a72:	3001      	adds	r0, #1
 8002a74:	4283      	cmp	r3, r0
 8002a76:	d004      	beq.n	8002a82 <__swbuf_r+0x62>
 8002a78:	89a3      	ldrh	r3, [r4, #12]
 8002a7a:	07db      	lsls	r3, r3, #31
 8002a7c:	d506      	bpl.n	8002a8c <__swbuf_r+0x6c>
 8002a7e:	2e0a      	cmp	r6, #10
 8002a80:	d104      	bne.n	8002a8c <__swbuf_r+0x6c>
 8002a82:	4621      	mov	r1, r4
 8002a84:	4628      	mov	r0, r5
 8002a86:	f000 f911 	bl	8002cac <_fflush_r>
 8002a8a:	b988      	cbnz	r0, 8002ab0 <__swbuf_r+0x90>
 8002a8c:	4638      	mov	r0, r7
 8002a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <__swbuf_r+0x9c>)
 8002a92:	429c      	cmp	r4, r3
 8002a94:	d101      	bne.n	8002a9a <__swbuf_r+0x7a>
 8002a96:	68ac      	ldr	r4, [r5, #8]
 8002a98:	e7cf      	b.n	8002a3a <__swbuf_r+0x1a>
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <__swbuf_r+0xa0>)
 8002a9c:	429c      	cmp	r4, r3
 8002a9e:	bf08      	it	eq
 8002aa0:	68ec      	ldreq	r4, [r5, #12]
 8002aa2:	e7ca      	b.n	8002a3a <__swbuf_r+0x1a>
 8002aa4:	4621      	mov	r1, r4
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	f000 f80c 	bl	8002ac4 <__swsetup_r>
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d0cb      	beq.n	8002a48 <__swbuf_r+0x28>
 8002ab0:	f04f 37ff 	mov.w	r7, #4294967295
 8002ab4:	e7ea      	b.n	8002a8c <__swbuf_r+0x6c>
 8002ab6:	bf00      	nop
 8002ab8:	08003978 	.word	0x08003978
 8002abc:	08003998 	.word	0x08003998
 8002ac0:	08003958 	.word	0x08003958

08002ac4 <__swsetup_r>:
 8002ac4:	4b32      	ldr	r3, [pc, #200]	; (8002b90 <__swsetup_r+0xcc>)
 8002ac6:	b570      	push	{r4, r5, r6, lr}
 8002ac8:	681d      	ldr	r5, [r3, #0]
 8002aca:	4606      	mov	r6, r0
 8002acc:	460c      	mov	r4, r1
 8002ace:	b125      	cbz	r5, 8002ada <__swsetup_r+0x16>
 8002ad0:	69ab      	ldr	r3, [r5, #24]
 8002ad2:	b913      	cbnz	r3, 8002ada <__swsetup_r+0x16>
 8002ad4:	4628      	mov	r0, r5
 8002ad6:	f000 f97d 	bl	8002dd4 <__sinit>
 8002ada:	4b2e      	ldr	r3, [pc, #184]	; (8002b94 <__swsetup_r+0xd0>)
 8002adc:	429c      	cmp	r4, r3
 8002ade:	d10f      	bne.n	8002b00 <__swsetup_r+0x3c>
 8002ae0:	686c      	ldr	r4, [r5, #4]
 8002ae2:	89a3      	ldrh	r3, [r4, #12]
 8002ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ae8:	0719      	lsls	r1, r3, #28
 8002aea:	d42c      	bmi.n	8002b46 <__swsetup_r+0x82>
 8002aec:	06dd      	lsls	r5, r3, #27
 8002aee:	d411      	bmi.n	8002b14 <__swsetup_r+0x50>
 8002af0:	2309      	movs	r3, #9
 8002af2:	6033      	str	r3, [r6, #0]
 8002af4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002af8:	81a3      	strh	r3, [r4, #12]
 8002afa:	f04f 30ff 	mov.w	r0, #4294967295
 8002afe:	e03e      	b.n	8002b7e <__swsetup_r+0xba>
 8002b00:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <__swsetup_r+0xd4>)
 8002b02:	429c      	cmp	r4, r3
 8002b04:	d101      	bne.n	8002b0a <__swsetup_r+0x46>
 8002b06:	68ac      	ldr	r4, [r5, #8]
 8002b08:	e7eb      	b.n	8002ae2 <__swsetup_r+0x1e>
 8002b0a:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <__swsetup_r+0xd8>)
 8002b0c:	429c      	cmp	r4, r3
 8002b0e:	bf08      	it	eq
 8002b10:	68ec      	ldreq	r4, [r5, #12]
 8002b12:	e7e6      	b.n	8002ae2 <__swsetup_r+0x1e>
 8002b14:	0758      	lsls	r0, r3, #29
 8002b16:	d512      	bpl.n	8002b3e <__swsetup_r+0x7a>
 8002b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b1a:	b141      	cbz	r1, 8002b2e <__swsetup_r+0x6a>
 8002b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b20:	4299      	cmp	r1, r3
 8002b22:	d002      	beq.n	8002b2a <__swsetup_r+0x66>
 8002b24:	4630      	mov	r0, r6
 8002b26:	f000 fa59 	bl	8002fdc <_free_r>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	6363      	str	r3, [r4, #52]	; 0x34
 8002b2e:	89a3      	ldrh	r3, [r4, #12]
 8002b30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b34:	81a3      	strh	r3, [r4, #12]
 8002b36:	2300      	movs	r3, #0
 8002b38:	6063      	str	r3, [r4, #4]
 8002b3a:	6923      	ldr	r3, [r4, #16]
 8002b3c:	6023      	str	r3, [r4, #0]
 8002b3e:	89a3      	ldrh	r3, [r4, #12]
 8002b40:	f043 0308 	orr.w	r3, r3, #8
 8002b44:	81a3      	strh	r3, [r4, #12]
 8002b46:	6923      	ldr	r3, [r4, #16]
 8002b48:	b94b      	cbnz	r3, 8002b5e <__swsetup_r+0x9a>
 8002b4a:	89a3      	ldrh	r3, [r4, #12]
 8002b4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b54:	d003      	beq.n	8002b5e <__swsetup_r+0x9a>
 8002b56:	4621      	mov	r1, r4
 8002b58:	4630      	mov	r0, r6
 8002b5a:	f000 f9ff 	bl	8002f5c <__smakebuf_r>
 8002b5e:	89a0      	ldrh	r0, [r4, #12]
 8002b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b64:	f010 0301 	ands.w	r3, r0, #1
 8002b68:	d00a      	beq.n	8002b80 <__swsetup_r+0xbc>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60a3      	str	r3, [r4, #8]
 8002b6e:	6963      	ldr	r3, [r4, #20]
 8002b70:	425b      	negs	r3, r3
 8002b72:	61a3      	str	r3, [r4, #24]
 8002b74:	6923      	ldr	r3, [r4, #16]
 8002b76:	b943      	cbnz	r3, 8002b8a <__swsetup_r+0xc6>
 8002b78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002b7c:	d1ba      	bne.n	8002af4 <__swsetup_r+0x30>
 8002b7e:	bd70      	pop	{r4, r5, r6, pc}
 8002b80:	0781      	lsls	r1, r0, #30
 8002b82:	bf58      	it	pl
 8002b84:	6963      	ldrpl	r3, [r4, #20]
 8002b86:	60a3      	str	r3, [r4, #8]
 8002b88:	e7f4      	b.n	8002b74 <__swsetup_r+0xb0>
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	e7f7      	b.n	8002b7e <__swsetup_r+0xba>
 8002b8e:	bf00      	nop
 8002b90:	2000000c 	.word	0x2000000c
 8002b94:	08003978 	.word	0x08003978
 8002b98:	08003998 	.word	0x08003998
 8002b9c:	08003958 	.word	0x08003958

08002ba0 <__sflush_r>:
 8002ba0:	898a      	ldrh	r2, [r1, #12]
 8002ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ba6:	4605      	mov	r5, r0
 8002ba8:	0710      	lsls	r0, r2, #28
 8002baa:	460c      	mov	r4, r1
 8002bac:	d458      	bmi.n	8002c60 <__sflush_r+0xc0>
 8002bae:	684b      	ldr	r3, [r1, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	dc05      	bgt.n	8002bc0 <__sflush_r+0x20>
 8002bb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	dc02      	bgt.n	8002bc0 <__sflush_r+0x20>
 8002bba:	2000      	movs	r0, #0
 8002bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bc2:	2e00      	cmp	r6, #0
 8002bc4:	d0f9      	beq.n	8002bba <__sflush_r+0x1a>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002bcc:	682f      	ldr	r7, [r5, #0]
 8002bce:	602b      	str	r3, [r5, #0]
 8002bd0:	d032      	beq.n	8002c38 <__sflush_r+0x98>
 8002bd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002bd4:	89a3      	ldrh	r3, [r4, #12]
 8002bd6:	075a      	lsls	r2, r3, #29
 8002bd8:	d505      	bpl.n	8002be6 <__sflush_r+0x46>
 8002bda:	6863      	ldr	r3, [r4, #4]
 8002bdc:	1ac0      	subs	r0, r0, r3
 8002bde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002be0:	b10b      	cbz	r3, 8002be6 <__sflush_r+0x46>
 8002be2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002be4:	1ac0      	subs	r0, r0, r3
 8002be6:	2300      	movs	r3, #0
 8002be8:	4602      	mov	r2, r0
 8002bea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bec:	6a21      	ldr	r1, [r4, #32]
 8002bee:	4628      	mov	r0, r5
 8002bf0:	47b0      	blx	r6
 8002bf2:	1c43      	adds	r3, r0, #1
 8002bf4:	89a3      	ldrh	r3, [r4, #12]
 8002bf6:	d106      	bne.n	8002c06 <__sflush_r+0x66>
 8002bf8:	6829      	ldr	r1, [r5, #0]
 8002bfa:	291d      	cmp	r1, #29
 8002bfc:	d82c      	bhi.n	8002c58 <__sflush_r+0xb8>
 8002bfe:	4a2a      	ldr	r2, [pc, #168]	; (8002ca8 <__sflush_r+0x108>)
 8002c00:	40ca      	lsrs	r2, r1
 8002c02:	07d6      	lsls	r6, r2, #31
 8002c04:	d528      	bpl.n	8002c58 <__sflush_r+0xb8>
 8002c06:	2200      	movs	r2, #0
 8002c08:	6062      	str	r2, [r4, #4]
 8002c0a:	04d9      	lsls	r1, r3, #19
 8002c0c:	6922      	ldr	r2, [r4, #16]
 8002c0e:	6022      	str	r2, [r4, #0]
 8002c10:	d504      	bpl.n	8002c1c <__sflush_r+0x7c>
 8002c12:	1c42      	adds	r2, r0, #1
 8002c14:	d101      	bne.n	8002c1a <__sflush_r+0x7a>
 8002c16:	682b      	ldr	r3, [r5, #0]
 8002c18:	b903      	cbnz	r3, 8002c1c <__sflush_r+0x7c>
 8002c1a:	6560      	str	r0, [r4, #84]	; 0x54
 8002c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c1e:	602f      	str	r7, [r5, #0]
 8002c20:	2900      	cmp	r1, #0
 8002c22:	d0ca      	beq.n	8002bba <__sflush_r+0x1a>
 8002c24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c28:	4299      	cmp	r1, r3
 8002c2a:	d002      	beq.n	8002c32 <__sflush_r+0x92>
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	f000 f9d5 	bl	8002fdc <_free_r>
 8002c32:	2000      	movs	r0, #0
 8002c34:	6360      	str	r0, [r4, #52]	; 0x34
 8002c36:	e7c1      	b.n	8002bbc <__sflush_r+0x1c>
 8002c38:	6a21      	ldr	r1, [r4, #32]
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	47b0      	blx	r6
 8002c40:	1c41      	adds	r1, r0, #1
 8002c42:	d1c7      	bne.n	8002bd4 <__sflush_r+0x34>
 8002c44:	682b      	ldr	r3, [r5, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0c4      	beq.n	8002bd4 <__sflush_r+0x34>
 8002c4a:	2b1d      	cmp	r3, #29
 8002c4c:	d001      	beq.n	8002c52 <__sflush_r+0xb2>
 8002c4e:	2b16      	cmp	r3, #22
 8002c50:	d101      	bne.n	8002c56 <__sflush_r+0xb6>
 8002c52:	602f      	str	r7, [r5, #0]
 8002c54:	e7b1      	b.n	8002bba <__sflush_r+0x1a>
 8002c56:	89a3      	ldrh	r3, [r4, #12]
 8002c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c5c:	81a3      	strh	r3, [r4, #12]
 8002c5e:	e7ad      	b.n	8002bbc <__sflush_r+0x1c>
 8002c60:	690f      	ldr	r7, [r1, #16]
 8002c62:	2f00      	cmp	r7, #0
 8002c64:	d0a9      	beq.n	8002bba <__sflush_r+0x1a>
 8002c66:	0793      	lsls	r3, r2, #30
 8002c68:	680e      	ldr	r6, [r1, #0]
 8002c6a:	bf08      	it	eq
 8002c6c:	694b      	ldreq	r3, [r1, #20]
 8002c6e:	600f      	str	r7, [r1, #0]
 8002c70:	bf18      	it	ne
 8002c72:	2300      	movne	r3, #0
 8002c74:	eba6 0807 	sub.w	r8, r6, r7
 8002c78:	608b      	str	r3, [r1, #8]
 8002c7a:	f1b8 0f00 	cmp.w	r8, #0
 8002c7e:	dd9c      	ble.n	8002bba <__sflush_r+0x1a>
 8002c80:	6a21      	ldr	r1, [r4, #32]
 8002c82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c84:	4643      	mov	r3, r8
 8002c86:	463a      	mov	r2, r7
 8002c88:	4628      	mov	r0, r5
 8002c8a:	47b0      	blx	r6
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	dc06      	bgt.n	8002c9e <__sflush_r+0xfe>
 8002c90:	89a3      	ldrh	r3, [r4, #12]
 8002c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c96:	81a3      	strh	r3, [r4, #12]
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9c:	e78e      	b.n	8002bbc <__sflush_r+0x1c>
 8002c9e:	4407      	add	r7, r0
 8002ca0:	eba8 0800 	sub.w	r8, r8, r0
 8002ca4:	e7e9      	b.n	8002c7a <__sflush_r+0xda>
 8002ca6:	bf00      	nop
 8002ca8:	20400001 	.word	0x20400001

08002cac <_fflush_r>:
 8002cac:	b538      	push	{r3, r4, r5, lr}
 8002cae:	690b      	ldr	r3, [r1, #16]
 8002cb0:	4605      	mov	r5, r0
 8002cb2:	460c      	mov	r4, r1
 8002cb4:	b913      	cbnz	r3, 8002cbc <_fflush_r+0x10>
 8002cb6:	2500      	movs	r5, #0
 8002cb8:	4628      	mov	r0, r5
 8002cba:	bd38      	pop	{r3, r4, r5, pc}
 8002cbc:	b118      	cbz	r0, 8002cc6 <_fflush_r+0x1a>
 8002cbe:	6983      	ldr	r3, [r0, #24]
 8002cc0:	b90b      	cbnz	r3, 8002cc6 <_fflush_r+0x1a>
 8002cc2:	f000 f887 	bl	8002dd4 <__sinit>
 8002cc6:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <_fflush_r+0x6c>)
 8002cc8:	429c      	cmp	r4, r3
 8002cca:	d11b      	bne.n	8002d04 <_fflush_r+0x58>
 8002ccc:	686c      	ldr	r4, [r5, #4]
 8002cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0ef      	beq.n	8002cb6 <_fflush_r+0xa>
 8002cd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002cd8:	07d0      	lsls	r0, r2, #31
 8002cda:	d404      	bmi.n	8002ce6 <_fflush_r+0x3a>
 8002cdc:	0599      	lsls	r1, r3, #22
 8002cde:	d402      	bmi.n	8002ce6 <_fflush_r+0x3a>
 8002ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ce2:	f000 f915 	bl	8002f10 <__retarget_lock_acquire_recursive>
 8002ce6:	4628      	mov	r0, r5
 8002ce8:	4621      	mov	r1, r4
 8002cea:	f7ff ff59 	bl	8002ba0 <__sflush_r>
 8002cee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cf0:	07da      	lsls	r2, r3, #31
 8002cf2:	4605      	mov	r5, r0
 8002cf4:	d4e0      	bmi.n	8002cb8 <_fflush_r+0xc>
 8002cf6:	89a3      	ldrh	r3, [r4, #12]
 8002cf8:	059b      	lsls	r3, r3, #22
 8002cfa:	d4dd      	bmi.n	8002cb8 <_fflush_r+0xc>
 8002cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cfe:	f000 f908 	bl	8002f12 <__retarget_lock_release_recursive>
 8002d02:	e7d9      	b.n	8002cb8 <_fflush_r+0xc>
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <_fflush_r+0x70>)
 8002d06:	429c      	cmp	r4, r3
 8002d08:	d101      	bne.n	8002d0e <_fflush_r+0x62>
 8002d0a:	68ac      	ldr	r4, [r5, #8]
 8002d0c:	e7df      	b.n	8002cce <_fflush_r+0x22>
 8002d0e:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <_fflush_r+0x74>)
 8002d10:	429c      	cmp	r4, r3
 8002d12:	bf08      	it	eq
 8002d14:	68ec      	ldreq	r4, [r5, #12]
 8002d16:	e7da      	b.n	8002cce <_fflush_r+0x22>
 8002d18:	08003978 	.word	0x08003978
 8002d1c:	08003998 	.word	0x08003998
 8002d20:	08003958 	.word	0x08003958

08002d24 <std>:
 8002d24:	2300      	movs	r3, #0
 8002d26:	b510      	push	{r4, lr}
 8002d28:	4604      	mov	r4, r0
 8002d2a:	e9c0 3300 	strd	r3, r3, [r0]
 8002d2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d32:	6083      	str	r3, [r0, #8]
 8002d34:	8181      	strh	r1, [r0, #12]
 8002d36:	6643      	str	r3, [r0, #100]	; 0x64
 8002d38:	81c2      	strh	r2, [r0, #14]
 8002d3a:	6183      	str	r3, [r0, #24]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	2208      	movs	r2, #8
 8002d40:	305c      	adds	r0, #92	; 0x5c
 8002d42:	f7ff fdd7 	bl	80028f4 <memset>
 8002d46:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <std+0x38>)
 8002d48:	6263      	str	r3, [r4, #36]	; 0x24
 8002d4a:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <std+0x3c>)
 8002d4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <std+0x40>)
 8002d50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <std+0x44>)
 8002d54:	6224      	str	r4, [r4, #32]
 8002d56:	6323      	str	r3, [r4, #48]	; 0x30
 8002d58:	bd10      	pop	{r4, pc}
 8002d5a:	bf00      	nop
 8002d5c:	0800372d 	.word	0x0800372d
 8002d60:	0800374f 	.word	0x0800374f
 8002d64:	08003787 	.word	0x08003787
 8002d68:	080037ab 	.word	0x080037ab

08002d6c <_cleanup_r>:
 8002d6c:	4901      	ldr	r1, [pc, #4]	; (8002d74 <_cleanup_r+0x8>)
 8002d6e:	f000 b8af 	b.w	8002ed0 <_fwalk_reent>
 8002d72:	bf00      	nop
 8002d74:	08002cad 	.word	0x08002cad

08002d78 <__sfmoreglue>:
 8002d78:	b570      	push	{r4, r5, r6, lr}
 8002d7a:	1e4a      	subs	r2, r1, #1
 8002d7c:	2568      	movs	r5, #104	; 0x68
 8002d7e:	4355      	muls	r5, r2
 8002d80:	460e      	mov	r6, r1
 8002d82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002d86:	f000 f979 	bl	800307c <_malloc_r>
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	b140      	cbz	r0, 8002da0 <__sfmoreglue+0x28>
 8002d8e:	2100      	movs	r1, #0
 8002d90:	e9c0 1600 	strd	r1, r6, [r0]
 8002d94:	300c      	adds	r0, #12
 8002d96:	60a0      	str	r0, [r4, #8]
 8002d98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002d9c:	f7ff fdaa 	bl	80028f4 <memset>
 8002da0:	4620      	mov	r0, r4
 8002da2:	bd70      	pop	{r4, r5, r6, pc}

08002da4 <__sfp_lock_acquire>:
 8002da4:	4801      	ldr	r0, [pc, #4]	; (8002dac <__sfp_lock_acquire+0x8>)
 8002da6:	f000 b8b3 	b.w	8002f10 <__retarget_lock_acquire_recursive>
 8002daa:	bf00      	nop
 8002dac:	20000140 	.word	0x20000140

08002db0 <__sfp_lock_release>:
 8002db0:	4801      	ldr	r0, [pc, #4]	; (8002db8 <__sfp_lock_release+0x8>)
 8002db2:	f000 b8ae 	b.w	8002f12 <__retarget_lock_release_recursive>
 8002db6:	bf00      	nop
 8002db8:	20000140 	.word	0x20000140

08002dbc <__sinit_lock_acquire>:
 8002dbc:	4801      	ldr	r0, [pc, #4]	; (8002dc4 <__sinit_lock_acquire+0x8>)
 8002dbe:	f000 b8a7 	b.w	8002f10 <__retarget_lock_acquire_recursive>
 8002dc2:	bf00      	nop
 8002dc4:	2000013b 	.word	0x2000013b

08002dc8 <__sinit_lock_release>:
 8002dc8:	4801      	ldr	r0, [pc, #4]	; (8002dd0 <__sinit_lock_release+0x8>)
 8002dca:	f000 b8a2 	b.w	8002f12 <__retarget_lock_release_recursive>
 8002dce:	bf00      	nop
 8002dd0:	2000013b 	.word	0x2000013b

08002dd4 <__sinit>:
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	f7ff fff0 	bl	8002dbc <__sinit_lock_acquire>
 8002ddc:	69a3      	ldr	r3, [r4, #24]
 8002dde:	b11b      	cbz	r3, 8002de8 <__sinit+0x14>
 8002de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002de4:	f7ff bff0 	b.w	8002dc8 <__sinit_lock_release>
 8002de8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002dec:	6523      	str	r3, [r4, #80]	; 0x50
 8002dee:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <__sinit+0x68>)
 8002df0:	4a13      	ldr	r2, [pc, #76]	; (8002e40 <__sinit+0x6c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	62a2      	str	r2, [r4, #40]	; 0x28
 8002df6:	42a3      	cmp	r3, r4
 8002df8:	bf04      	itt	eq
 8002dfa:	2301      	moveq	r3, #1
 8002dfc:	61a3      	streq	r3, [r4, #24]
 8002dfe:	4620      	mov	r0, r4
 8002e00:	f000 f820 	bl	8002e44 <__sfp>
 8002e04:	6060      	str	r0, [r4, #4]
 8002e06:	4620      	mov	r0, r4
 8002e08:	f000 f81c 	bl	8002e44 <__sfp>
 8002e0c:	60a0      	str	r0, [r4, #8]
 8002e0e:	4620      	mov	r0, r4
 8002e10:	f000 f818 	bl	8002e44 <__sfp>
 8002e14:	2200      	movs	r2, #0
 8002e16:	60e0      	str	r0, [r4, #12]
 8002e18:	2104      	movs	r1, #4
 8002e1a:	6860      	ldr	r0, [r4, #4]
 8002e1c:	f7ff ff82 	bl	8002d24 <std>
 8002e20:	68a0      	ldr	r0, [r4, #8]
 8002e22:	2201      	movs	r2, #1
 8002e24:	2109      	movs	r1, #9
 8002e26:	f7ff ff7d 	bl	8002d24 <std>
 8002e2a:	68e0      	ldr	r0, [r4, #12]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	2112      	movs	r1, #18
 8002e30:	f7ff ff78 	bl	8002d24 <std>
 8002e34:	2301      	movs	r3, #1
 8002e36:	61a3      	str	r3, [r4, #24]
 8002e38:	e7d2      	b.n	8002de0 <__sinit+0xc>
 8002e3a:	bf00      	nop
 8002e3c:	08003954 	.word	0x08003954
 8002e40:	08002d6d 	.word	0x08002d6d

08002e44 <__sfp>:
 8002e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e46:	4607      	mov	r7, r0
 8002e48:	f7ff ffac 	bl	8002da4 <__sfp_lock_acquire>
 8002e4c:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <__sfp+0x84>)
 8002e4e:	681e      	ldr	r6, [r3, #0]
 8002e50:	69b3      	ldr	r3, [r6, #24]
 8002e52:	b913      	cbnz	r3, 8002e5a <__sfp+0x16>
 8002e54:	4630      	mov	r0, r6
 8002e56:	f7ff ffbd 	bl	8002dd4 <__sinit>
 8002e5a:	3648      	adds	r6, #72	; 0x48
 8002e5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	d503      	bpl.n	8002e6c <__sfp+0x28>
 8002e64:	6833      	ldr	r3, [r6, #0]
 8002e66:	b30b      	cbz	r3, 8002eac <__sfp+0x68>
 8002e68:	6836      	ldr	r6, [r6, #0]
 8002e6a:	e7f7      	b.n	8002e5c <__sfp+0x18>
 8002e6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002e70:	b9d5      	cbnz	r5, 8002ea8 <__sfp+0x64>
 8002e72:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <__sfp+0x88>)
 8002e74:	60e3      	str	r3, [r4, #12]
 8002e76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002e7a:	6665      	str	r5, [r4, #100]	; 0x64
 8002e7c:	f000 f847 	bl	8002f0e <__retarget_lock_init_recursive>
 8002e80:	f7ff ff96 	bl	8002db0 <__sfp_lock_release>
 8002e84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002e88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002e8c:	6025      	str	r5, [r4, #0]
 8002e8e:	61a5      	str	r5, [r4, #24]
 8002e90:	2208      	movs	r2, #8
 8002e92:	4629      	mov	r1, r5
 8002e94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002e98:	f7ff fd2c 	bl	80028f4 <memset>
 8002e9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002ea0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ea8:	3468      	adds	r4, #104	; 0x68
 8002eaa:	e7d9      	b.n	8002e60 <__sfp+0x1c>
 8002eac:	2104      	movs	r1, #4
 8002eae:	4638      	mov	r0, r7
 8002eb0:	f7ff ff62 	bl	8002d78 <__sfmoreglue>
 8002eb4:	4604      	mov	r4, r0
 8002eb6:	6030      	str	r0, [r6, #0]
 8002eb8:	2800      	cmp	r0, #0
 8002eba:	d1d5      	bne.n	8002e68 <__sfp+0x24>
 8002ebc:	f7ff ff78 	bl	8002db0 <__sfp_lock_release>
 8002ec0:	230c      	movs	r3, #12
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	e7ee      	b.n	8002ea4 <__sfp+0x60>
 8002ec6:	bf00      	nop
 8002ec8:	08003954 	.word	0x08003954
 8002ecc:	ffff0001 	.word	0xffff0001

08002ed0 <_fwalk_reent>:
 8002ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ed4:	4606      	mov	r6, r0
 8002ed6:	4688      	mov	r8, r1
 8002ed8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002edc:	2700      	movs	r7, #0
 8002ede:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ee2:	f1b9 0901 	subs.w	r9, r9, #1
 8002ee6:	d505      	bpl.n	8002ef4 <_fwalk_reent+0x24>
 8002ee8:	6824      	ldr	r4, [r4, #0]
 8002eea:	2c00      	cmp	r4, #0
 8002eec:	d1f7      	bne.n	8002ede <_fwalk_reent+0xe>
 8002eee:	4638      	mov	r0, r7
 8002ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ef4:	89ab      	ldrh	r3, [r5, #12]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d907      	bls.n	8002f0a <_fwalk_reent+0x3a>
 8002efa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002efe:	3301      	adds	r3, #1
 8002f00:	d003      	beq.n	8002f0a <_fwalk_reent+0x3a>
 8002f02:	4629      	mov	r1, r5
 8002f04:	4630      	mov	r0, r6
 8002f06:	47c0      	blx	r8
 8002f08:	4307      	orrs	r7, r0
 8002f0a:	3568      	adds	r5, #104	; 0x68
 8002f0c:	e7e9      	b.n	8002ee2 <_fwalk_reent+0x12>

08002f0e <__retarget_lock_init_recursive>:
 8002f0e:	4770      	bx	lr

08002f10 <__retarget_lock_acquire_recursive>:
 8002f10:	4770      	bx	lr

08002f12 <__retarget_lock_release_recursive>:
 8002f12:	4770      	bx	lr

08002f14 <__swhatbuf_r>:
 8002f14:	b570      	push	{r4, r5, r6, lr}
 8002f16:	460e      	mov	r6, r1
 8002f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f1c:	2900      	cmp	r1, #0
 8002f1e:	b096      	sub	sp, #88	; 0x58
 8002f20:	4614      	mov	r4, r2
 8002f22:	461d      	mov	r5, r3
 8002f24:	da07      	bge.n	8002f36 <__swhatbuf_r+0x22>
 8002f26:	2300      	movs	r3, #0
 8002f28:	602b      	str	r3, [r5, #0]
 8002f2a:	89b3      	ldrh	r3, [r6, #12]
 8002f2c:	061a      	lsls	r2, r3, #24
 8002f2e:	d410      	bmi.n	8002f52 <__swhatbuf_r+0x3e>
 8002f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f34:	e00e      	b.n	8002f54 <__swhatbuf_r+0x40>
 8002f36:	466a      	mov	r2, sp
 8002f38:	f000 fc5e 	bl	80037f8 <_fstat_r>
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	dbf2      	blt.n	8002f26 <__swhatbuf_r+0x12>
 8002f40:	9a01      	ldr	r2, [sp, #4]
 8002f42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002f46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002f4a:	425a      	negs	r2, r3
 8002f4c:	415a      	adcs	r2, r3
 8002f4e:	602a      	str	r2, [r5, #0]
 8002f50:	e7ee      	b.n	8002f30 <__swhatbuf_r+0x1c>
 8002f52:	2340      	movs	r3, #64	; 0x40
 8002f54:	2000      	movs	r0, #0
 8002f56:	6023      	str	r3, [r4, #0]
 8002f58:	b016      	add	sp, #88	; 0x58
 8002f5a:	bd70      	pop	{r4, r5, r6, pc}

08002f5c <__smakebuf_r>:
 8002f5c:	898b      	ldrh	r3, [r1, #12]
 8002f5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f60:	079d      	lsls	r5, r3, #30
 8002f62:	4606      	mov	r6, r0
 8002f64:	460c      	mov	r4, r1
 8002f66:	d507      	bpl.n	8002f78 <__smakebuf_r+0x1c>
 8002f68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f6c:	6023      	str	r3, [r4, #0]
 8002f6e:	6123      	str	r3, [r4, #16]
 8002f70:	2301      	movs	r3, #1
 8002f72:	6163      	str	r3, [r4, #20]
 8002f74:	b002      	add	sp, #8
 8002f76:	bd70      	pop	{r4, r5, r6, pc}
 8002f78:	ab01      	add	r3, sp, #4
 8002f7a:	466a      	mov	r2, sp
 8002f7c:	f7ff ffca 	bl	8002f14 <__swhatbuf_r>
 8002f80:	9900      	ldr	r1, [sp, #0]
 8002f82:	4605      	mov	r5, r0
 8002f84:	4630      	mov	r0, r6
 8002f86:	f000 f879 	bl	800307c <_malloc_r>
 8002f8a:	b948      	cbnz	r0, 8002fa0 <__smakebuf_r+0x44>
 8002f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f90:	059a      	lsls	r2, r3, #22
 8002f92:	d4ef      	bmi.n	8002f74 <__smakebuf_r+0x18>
 8002f94:	f023 0303 	bic.w	r3, r3, #3
 8002f98:	f043 0302 	orr.w	r3, r3, #2
 8002f9c:	81a3      	strh	r3, [r4, #12]
 8002f9e:	e7e3      	b.n	8002f68 <__smakebuf_r+0xc>
 8002fa0:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <__smakebuf_r+0x7c>)
 8002fa2:	62b3      	str	r3, [r6, #40]	; 0x28
 8002fa4:	89a3      	ldrh	r3, [r4, #12]
 8002fa6:	6020      	str	r0, [r4, #0]
 8002fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fac:	81a3      	strh	r3, [r4, #12]
 8002fae:	9b00      	ldr	r3, [sp, #0]
 8002fb0:	6163      	str	r3, [r4, #20]
 8002fb2:	9b01      	ldr	r3, [sp, #4]
 8002fb4:	6120      	str	r0, [r4, #16]
 8002fb6:	b15b      	cbz	r3, 8002fd0 <__smakebuf_r+0x74>
 8002fb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fbc:	4630      	mov	r0, r6
 8002fbe:	f000 fc2d 	bl	800381c <_isatty_r>
 8002fc2:	b128      	cbz	r0, 8002fd0 <__smakebuf_r+0x74>
 8002fc4:	89a3      	ldrh	r3, [r4, #12]
 8002fc6:	f023 0303 	bic.w	r3, r3, #3
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	81a3      	strh	r3, [r4, #12]
 8002fd0:	89a0      	ldrh	r0, [r4, #12]
 8002fd2:	4305      	orrs	r5, r0
 8002fd4:	81a5      	strh	r5, [r4, #12]
 8002fd6:	e7cd      	b.n	8002f74 <__smakebuf_r+0x18>
 8002fd8:	08002d6d 	.word	0x08002d6d

08002fdc <_free_r>:
 8002fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fde:	2900      	cmp	r1, #0
 8002fe0:	d048      	beq.n	8003074 <_free_r+0x98>
 8002fe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fe6:	9001      	str	r0, [sp, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f1a1 0404 	sub.w	r4, r1, #4
 8002fee:	bfb8      	it	lt
 8002ff0:	18e4      	addlt	r4, r4, r3
 8002ff2:	f000 fc35 	bl	8003860 <__malloc_lock>
 8002ff6:	4a20      	ldr	r2, [pc, #128]	; (8003078 <_free_r+0x9c>)
 8002ff8:	9801      	ldr	r0, [sp, #4]
 8002ffa:	6813      	ldr	r3, [r2, #0]
 8002ffc:	4615      	mov	r5, r2
 8002ffe:	b933      	cbnz	r3, 800300e <_free_r+0x32>
 8003000:	6063      	str	r3, [r4, #4]
 8003002:	6014      	str	r4, [r2, #0]
 8003004:	b003      	add	sp, #12
 8003006:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800300a:	f000 bc2f 	b.w	800386c <__malloc_unlock>
 800300e:	42a3      	cmp	r3, r4
 8003010:	d90b      	bls.n	800302a <_free_r+0x4e>
 8003012:	6821      	ldr	r1, [r4, #0]
 8003014:	1862      	adds	r2, r4, r1
 8003016:	4293      	cmp	r3, r2
 8003018:	bf04      	itt	eq
 800301a:	681a      	ldreq	r2, [r3, #0]
 800301c:	685b      	ldreq	r3, [r3, #4]
 800301e:	6063      	str	r3, [r4, #4]
 8003020:	bf04      	itt	eq
 8003022:	1852      	addeq	r2, r2, r1
 8003024:	6022      	streq	r2, [r4, #0]
 8003026:	602c      	str	r4, [r5, #0]
 8003028:	e7ec      	b.n	8003004 <_free_r+0x28>
 800302a:	461a      	mov	r2, r3
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	b10b      	cbz	r3, 8003034 <_free_r+0x58>
 8003030:	42a3      	cmp	r3, r4
 8003032:	d9fa      	bls.n	800302a <_free_r+0x4e>
 8003034:	6811      	ldr	r1, [r2, #0]
 8003036:	1855      	adds	r5, r2, r1
 8003038:	42a5      	cmp	r5, r4
 800303a:	d10b      	bne.n	8003054 <_free_r+0x78>
 800303c:	6824      	ldr	r4, [r4, #0]
 800303e:	4421      	add	r1, r4
 8003040:	1854      	adds	r4, r2, r1
 8003042:	42a3      	cmp	r3, r4
 8003044:	6011      	str	r1, [r2, #0]
 8003046:	d1dd      	bne.n	8003004 <_free_r+0x28>
 8003048:	681c      	ldr	r4, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	6053      	str	r3, [r2, #4]
 800304e:	4421      	add	r1, r4
 8003050:	6011      	str	r1, [r2, #0]
 8003052:	e7d7      	b.n	8003004 <_free_r+0x28>
 8003054:	d902      	bls.n	800305c <_free_r+0x80>
 8003056:	230c      	movs	r3, #12
 8003058:	6003      	str	r3, [r0, #0]
 800305a:	e7d3      	b.n	8003004 <_free_r+0x28>
 800305c:	6825      	ldr	r5, [r4, #0]
 800305e:	1961      	adds	r1, r4, r5
 8003060:	428b      	cmp	r3, r1
 8003062:	bf04      	itt	eq
 8003064:	6819      	ldreq	r1, [r3, #0]
 8003066:	685b      	ldreq	r3, [r3, #4]
 8003068:	6063      	str	r3, [r4, #4]
 800306a:	bf04      	itt	eq
 800306c:	1949      	addeq	r1, r1, r5
 800306e:	6021      	streq	r1, [r4, #0]
 8003070:	6054      	str	r4, [r2, #4]
 8003072:	e7c7      	b.n	8003004 <_free_r+0x28>
 8003074:	b003      	add	sp, #12
 8003076:	bd30      	pop	{r4, r5, pc}
 8003078:	20000090 	.word	0x20000090

0800307c <_malloc_r>:
 800307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307e:	1ccd      	adds	r5, r1, #3
 8003080:	f025 0503 	bic.w	r5, r5, #3
 8003084:	3508      	adds	r5, #8
 8003086:	2d0c      	cmp	r5, #12
 8003088:	bf38      	it	cc
 800308a:	250c      	movcc	r5, #12
 800308c:	2d00      	cmp	r5, #0
 800308e:	4606      	mov	r6, r0
 8003090:	db01      	blt.n	8003096 <_malloc_r+0x1a>
 8003092:	42a9      	cmp	r1, r5
 8003094:	d903      	bls.n	800309e <_malloc_r+0x22>
 8003096:	230c      	movs	r3, #12
 8003098:	6033      	str	r3, [r6, #0]
 800309a:	2000      	movs	r0, #0
 800309c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800309e:	f000 fbdf 	bl	8003860 <__malloc_lock>
 80030a2:	4921      	ldr	r1, [pc, #132]	; (8003128 <_malloc_r+0xac>)
 80030a4:	680a      	ldr	r2, [r1, #0]
 80030a6:	4614      	mov	r4, r2
 80030a8:	b99c      	cbnz	r4, 80030d2 <_malloc_r+0x56>
 80030aa:	4f20      	ldr	r7, [pc, #128]	; (800312c <_malloc_r+0xb0>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	b923      	cbnz	r3, 80030ba <_malloc_r+0x3e>
 80030b0:	4621      	mov	r1, r4
 80030b2:	4630      	mov	r0, r6
 80030b4:	f000 fb2a 	bl	800370c <_sbrk_r>
 80030b8:	6038      	str	r0, [r7, #0]
 80030ba:	4629      	mov	r1, r5
 80030bc:	4630      	mov	r0, r6
 80030be:	f000 fb25 	bl	800370c <_sbrk_r>
 80030c2:	1c43      	adds	r3, r0, #1
 80030c4:	d123      	bne.n	800310e <_malloc_r+0x92>
 80030c6:	230c      	movs	r3, #12
 80030c8:	6033      	str	r3, [r6, #0]
 80030ca:	4630      	mov	r0, r6
 80030cc:	f000 fbce 	bl	800386c <__malloc_unlock>
 80030d0:	e7e3      	b.n	800309a <_malloc_r+0x1e>
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	1b5b      	subs	r3, r3, r5
 80030d6:	d417      	bmi.n	8003108 <_malloc_r+0x8c>
 80030d8:	2b0b      	cmp	r3, #11
 80030da:	d903      	bls.n	80030e4 <_malloc_r+0x68>
 80030dc:	6023      	str	r3, [r4, #0]
 80030de:	441c      	add	r4, r3
 80030e0:	6025      	str	r5, [r4, #0]
 80030e2:	e004      	b.n	80030ee <_malloc_r+0x72>
 80030e4:	6863      	ldr	r3, [r4, #4]
 80030e6:	42a2      	cmp	r2, r4
 80030e8:	bf0c      	ite	eq
 80030ea:	600b      	streq	r3, [r1, #0]
 80030ec:	6053      	strne	r3, [r2, #4]
 80030ee:	4630      	mov	r0, r6
 80030f0:	f000 fbbc 	bl	800386c <__malloc_unlock>
 80030f4:	f104 000b 	add.w	r0, r4, #11
 80030f8:	1d23      	adds	r3, r4, #4
 80030fa:	f020 0007 	bic.w	r0, r0, #7
 80030fe:	1ac2      	subs	r2, r0, r3
 8003100:	d0cc      	beq.n	800309c <_malloc_r+0x20>
 8003102:	1a1b      	subs	r3, r3, r0
 8003104:	50a3      	str	r3, [r4, r2]
 8003106:	e7c9      	b.n	800309c <_malloc_r+0x20>
 8003108:	4622      	mov	r2, r4
 800310a:	6864      	ldr	r4, [r4, #4]
 800310c:	e7cc      	b.n	80030a8 <_malloc_r+0x2c>
 800310e:	1cc4      	adds	r4, r0, #3
 8003110:	f024 0403 	bic.w	r4, r4, #3
 8003114:	42a0      	cmp	r0, r4
 8003116:	d0e3      	beq.n	80030e0 <_malloc_r+0x64>
 8003118:	1a21      	subs	r1, r4, r0
 800311a:	4630      	mov	r0, r6
 800311c:	f000 faf6 	bl	800370c <_sbrk_r>
 8003120:	3001      	adds	r0, #1
 8003122:	d1dd      	bne.n	80030e0 <_malloc_r+0x64>
 8003124:	e7cf      	b.n	80030c6 <_malloc_r+0x4a>
 8003126:	bf00      	nop
 8003128:	20000090 	.word	0x20000090
 800312c:	20000094 	.word	0x20000094

08003130 <__sfputc_r>:
 8003130:	6893      	ldr	r3, [r2, #8]
 8003132:	3b01      	subs	r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	b410      	push	{r4}
 8003138:	6093      	str	r3, [r2, #8]
 800313a:	da08      	bge.n	800314e <__sfputc_r+0x1e>
 800313c:	6994      	ldr	r4, [r2, #24]
 800313e:	42a3      	cmp	r3, r4
 8003140:	db01      	blt.n	8003146 <__sfputc_r+0x16>
 8003142:	290a      	cmp	r1, #10
 8003144:	d103      	bne.n	800314e <__sfputc_r+0x1e>
 8003146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800314a:	f7ff bc69 	b.w	8002a20 <__swbuf_r>
 800314e:	6813      	ldr	r3, [r2, #0]
 8003150:	1c58      	adds	r0, r3, #1
 8003152:	6010      	str	r0, [r2, #0]
 8003154:	7019      	strb	r1, [r3, #0]
 8003156:	4608      	mov	r0, r1
 8003158:	f85d 4b04 	ldr.w	r4, [sp], #4
 800315c:	4770      	bx	lr

0800315e <__sfputs_r>:
 800315e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003160:	4606      	mov	r6, r0
 8003162:	460f      	mov	r7, r1
 8003164:	4614      	mov	r4, r2
 8003166:	18d5      	adds	r5, r2, r3
 8003168:	42ac      	cmp	r4, r5
 800316a:	d101      	bne.n	8003170 <__sfputs_r+0x12>
 800316c:	2000      	movs	r0, #0
 800316e:	e007      	b.n	8003180 <__sfputs_r+0x22>
 8003170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003174:	463a      	mov	r2, r7
 8003176:	4630      	mov	r0, r6
 8003178:	f7ff ffda 	bl	8003130 <__sfputc_r>
 800317c:	1c43      	adds	r3, r0, #1
 800317e:	d1f3      	bne.n	8003168 <__sfputs_r+0xa>
 8003180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003184 <_vfiprintf_r>:
 8003184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003188:	460d      	mov	r5, r1
 800318a:	b09d      	sub	sp, #116	; 0x74
 800318c:	4614      	mov	r4, r2
 800318e:	4698      	mov	r8, r3
 8003190:	4606      	mov	r6, r0
 8003192:	b118      	cbz	r0, 800319c <_vfiprintf_r+0x18>
 8003194:	6983      	ldr	r3, [r0, #24]
 8003196:	b90b      	cbnz	r3, 800319c <_vfiprintf_r+0x18>
 8003198:	f7ff fe1c 	bl	8002dd4 <__sinit>
 800319c:	4b89      	ldr	r3, [pc, #548]	; (80033c4 <_vfiprintf_r+0x240>)
 800319e:	429d      	cmp	r5, r3
 80031a0:	d11b      	bne.n	80031da <_vfiprintf_r+0x56>
 80031a2:	6875      	ldr	r5, [r6, #4]
 80031a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031a6:	07d9      	lsls	r1, r3, #31
 80031a8:	d405      	bmi.n	80031b6 <_vfiprintf_r+0x32>
 80031aa:	89ab      	ldrh	r3, [r5, #12]
 80031ac:	059a      	lsls	r2, r3, #22
 80031ae:	d402      	bmi.n	80031b6 <_vfiprintf_r+0x32>
 80031b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031b2:	f7ff fead 	bl	8002f10 <__retarget_lock_acquire_recursive>
 80031b6:	89ab      	ldrh	r3, [r5, #12]
 80031b8:	071b      	lsls	r3, r3, #28
 80031ba:	d501      	bpl.n	80031c0 <_vfiprintf_r+0x3c>
 80031bc:	692b      	ldr	r3, [r5, #16]
 80031be:	b9eb      	cbnz	r3, 80031fc <_vfiprintf_r+0x78>
 80031c0:	4629      	mov	r1, r5
 80031c2:	4630      	mov	r0, r6
 80031c4:	f7ff fc7e 	bl	8002ac4 <__swsetup_r>
 80031c8:	b1c0      	cbz	r0, 80031fc <_vfiprintf_r+0x78>
 80031ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031cc:	07dc      	lsls	r4, r3, #31
 80031ce:	d50e      	bpl.n	80031ee <_vfiprintf_r+0x6a>
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	b01d      	add	sp, #116	; 0x74
 80031d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031da:	4b7b      	ldr	r3, [pc, #492]	; (80033c8 <_vfiprintf_r+0x244>)
 80031dc:	429d      	cmp	r5, r3
 80031de:	d101      	bne.n	80031e4 <_vfiprintf_r+0x60>
 80031e0:	68b5      	ldr	r5, [r6, #8]
 80031e2:	e7df      	b.n	80031a4 <_vfiprintf_r+0x20>
 80031e4:	4b79      	ldr	r3, [pc, #484]	; (80033cc <_vfiprintf_r+0x248>)
 80031e6:	429d      	cmp	r5, r3
 80031e8:	bf08      	it	eq
 80031ea:	68f5      	ldreq	r5, [r6, #12]
 80031ec:	e7da      	b.n	80031a4 <_vfiprintf_r+0x20>
 80031ee:	89ab      	ldrh	r3, [r5, #12]
 80031f0:	0598      	lsls	r0, r3, #22
 80031f2:	d4ed      	bmi.n	80031d0 <_vfiprintf_r+0x4c>
 80031f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031f6:	f7ff fe8c 	bl	8002f12 <__retarget_lock_release_recursive>
 80031fa:	e7e9      	b.n	80031d0 <_vfiprintf_r+0x4c>
 80031fc:	2300      	movs	r3, #0
 80031fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003200:	2320      	movs	r3, #32
 8003202:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003206:	f8cd 800c 	str.w	r8, [sp, #12]
 800320a:	2330      	movs	r3, #48	; 0x30
 800320c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80033d0 <_vfiprintf_r+0x24c>
 8003210:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003214:	f04f 0901 	mov.w	r9, #1
 8003218:	4623      	mov	r3, r4
 800321a:	469a      	mov	sl, r3
 800321c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003220:	b10a      	cbz	r2, 8003226 <_vfiprintf_r+0xa2>
 8003222:	2a25      	cmp	r2, #37	; 0x25
 8003224:	d1f9      	bne.n	800321a <_vfiprintf_r+0x96>
 8003226:	ebba 0b04 	subs.w	fp, sl, r4
 800322a:	d00b      	beq.n	8003244 <_vfiprintf_r+0xc0>
 800322c:	465b      	mov	r3, fp
 800322e:	4622      	mov	r2, r4
 8003230:	4629      	mov	r1, r5
 8003232:	4630      	mov	r0, r6
 8003234:	f7ff ff93 	bl	800315e <__sfputs_r>
 8003238:	3001      	adds	r0, #1
 800323a:	f000 80aa 	beq.w	8003392 <_vfiprintf_r+0x20e>
 800323e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003240:	445a      	add	r2, fp
 8003242:	9209      	str	r2, [sp, #36]	; 0x24
 8003244:	f89a 3000 	ldrb.w	r3, [sl]
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80a2 	beq.w	8003392 <_vfiprintf_r+0x20e>
 800324e:	2300      	movs	r3, #0
 8003250:	f04f 32ff 	mov.w	r2, #4294967295
 8003254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003258:	f10a 0a01 	add.w	sl, sl, #1
 800325c:	9304      	str	r3, [sp, #16]
 800325e:	9307      	str	r3, [sp, #28]
 8003260:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003264:	931a      	str	r3, [sp, #104]	; 0x68
 8003266:	4654      	mov	r4, sl
 8003268:	2205      	movs	r2, #5
 800326a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800326e:	4858      	ldr	r0, [pc, #352]	; (80033d0 <_vfiprintf_r+0x24c>)
 8003270:	f7fc ffe6 	bl	8000240 <memchr>
 8003274:	9a04      	ldr	r2, [sp, #16]
 8003276:	b9d8      	cbnz	r0, 80032b0 <_vfiprintf_r+0x12c>
 8003278:	06d1      	lsls	r1, r2, #27
 800327a:	bf44      	itt	mi
 800327c:	2320      	movmi	r3, #32
 800327e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003282:	0713      	lsls	r3, r2, #28
 8003284:	bf44      	itt	mi
 8003286:	232b      	movmi	r3, #43	; 0x2b
 8003288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800328c:	f89a 3000 	ldrb.w	r3, [sl]
 8003290:	2b2a      	cmp	r3, #42	; 0x2a
 8003292:	d015      	beq.n	80032c0 <_vfiprintf_r+0x13c>
 8003294:	9a07      	ldr	r2, [sp, #28]
 8003296:	4654      	mov	r4, sl
 8003298:	2000      	movs	r0, #0
 800329a:	f04f 0c0a 	mov.w	ip, #10
 800329e:	4621      	mov	r1, r4
 80032a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032a4:	3b30      	subs	r3, #48	; 0x30
 80032a6:	2b09      	cmp	r3, #9
 80032a8:	d94e      	bls.n	8003348 <_vfiprintf_r+0x1c4>
 80032aa:	b1b0      	cbz	r0, 80032da <_vfiprintf_r+0x156>
 80032ac:	9207      	str	r2, [sp, #28]
 80032ae:	e014      	b.n	80032da <_vfiprintf_r+0x156>
 80032b0:	eba0 0308 	sub.w	r3, r0, r8
 80032b4:	fa09 f303 	lsl.w	r3, r9, r3
 80032b8:	4313      	orrs	r3, r2
 80032ba:	9304      	str	r3, [sp, #16]
 80032bc:	46a2      	mov	sl, r4
 80032be:	e7d2      	b.n	8003266 <_vfiprintf_r+0xe2>
 80032c0:	9b03      	ldr	r3, [sp, #12]
 80032c2:	1d19      	adds	r1, r3, #4
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	9103      	str	r1, [sp, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bfbb      	ittet	lt
 80032cc:	425b      	neglt	r3, r3
 80032ce:	f042 0202 	orrlt.w	r2, r2, #2
 80032d2:	9307      	strge	r3, [sp, #28]
 80032d4:	9307      	strlt	r3, [sp, #28]
 80032d6:	bfb8      	it	lt
 80032d8:	9204      	strlt	r2, [sp, #16]
 80032da:	7823      	ldrb	r3, [r4, #0]
 80032dc:	2b2e      	cmp	r3, #46	; 0x2e
 80032de:	d10c      	bne.n	80032fa <_vfiprintf_r+0x176>
 80032e0:	7863      	ldrb	r3, [r4, #1]
 80032e2:	2b2a      	cmp	r3, #42	; 0x2a
 80032e4:	d135      	bne.n	8003352 <_vfiprintf_r+0x1ce>
 80032e6:	9b03      	ldr	r3, [sp, #12]
 80032e8:	1d1a      	adds	r2, r3, #4
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	9203      	str	r2, [sp, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bfb8      	it	lt
 80032f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80032f6:	3402      	adds	r4, #2
 80032f8:	9305      	str	r3, [sp, #20]
 80032fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80033e0 <_vfiprintf_r+0x25c>
 80032fe:	7821      	ldrb	r1, [r4, #0]
 8003300:	2203      	movs	r2, #3
 8003302:	4650      	mov	r0, sl
 8003304:	f7fc ff9c 	bl	8000240 <memchr>
 8003308:	b140      	cbz	r0, 800331c <_vfiprintf_r+0x198>
 800330a:	2340      	movs	r3, #64	; 0x40
 800330c:	eba0 000a 	sub.w	r0, r0, sl
 8003310:	fa03 f000 	lsl.w	r0, r3, r0
 8003314:	9b04      	ldr	r3, [sp, #16]
 8003316:	4303      	orrs	r3, r0
 8003318:	3401      	adds	r4, #1
 800331a:	9304      	str	r3, [sp, #16]
 800331c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003320:	482c      	ldr	r0, [pc, #176]	; (80033d4 <_vfiprintf_r+0x250>)
 8003322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003326:	2206      	movs	r2, #6
 8003328:	f7fc ff8a 	bl	8000240 <memchr>
 800332c:	2800      	cmp	r0, #0
 800332e:	d03f      	beq.n	80033b0 <_vfiprintf_r+0x22c>
 8003330:	4b29      	ldr	r3, [pc, #164]	; (80033d8 <_vfiprintf_r+0x254>)
 8003332:	bb1b      	cbnz	r3, 800337c <_vfiprintf_r+0x1f8>
 8003334:	9b03      	ldr	r3, [sp, #12]
 8003336:	3307      	adds	r3, #7
 8003338:	f023 0307 	bic.w	r3, r3, #7
 800333c:	3308      	adds	r3, #8
 800333e:	9303      	str	r3, [sp, #12]
 8003340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003342:	443b      	add	r3, r7
 8003344:	9309      	str	r3, [sp, #36]	; 0x24
 8003346:	e767      	b.n	8003218 <_vfiprintf_r+0x94>
 8003348:	fb0c 3202 	mla	r2, ip, r2, r3
 800334c:	460c      	mov	r4, r1
 800334e:	2001      	movs	r0, #1
 8003350:	e7a5      	b.n	800329e <_vfiprintf_r+0x11a>
 8003352:	2300      	movs	r3, #0
 8003354:	3401      	adds	r4, #1
 8003356:	9305      	str	r3, [sp, #20]
 8003358:	4619      	mov	r1, r3
 800335a:	f04f 0c0a 	mov.w	ip, #10
 800335e:	4620      	mov	r0, r4
 8003360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003364:	3a30      	subs	r2, #48	; 0x30
 8003366:	2a09      	cmp	r2, #9
 8003368:	d903      	bls.n	8003372 <_vfiprintf_r+0x1ee>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0c5      	beq.n	80032fa <_vfiprintf_r+0x176>
 800336e:	9105      	str	r1, [sp, #20]
 8003370:	e7c3      	b.n	80032fa <_vfiprintf_r+0x176>
 8003372:	fb0c 2101 	mla	r1, ip, r1, r2
 8003376:	4604      	mov	r4, r0
 8003378:	2301      	movs	r3, #1
 800337a:	e7f0      	b.n	800335e <_vfiprintf_r+0x1da>
 800337c:	ab03      	add	r3, sp, #12
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	462a      	mov	r2, r5
 8003382:	4b16      	ldr	r3, [pc, #88]	; (80033dc <_vfiprintf_r+0x258>)
 8003384:	a904      	add	r1, sp, #16
 8003386:	4630      	mov	r0, r6
 8003388:	f3af 8000 	nop.w
 800338c:	4607      	mov	r7, r0
 800338e:	1c78      	adds	r0, r7, #1
 8003390:	d1d6      	bne.n	8003340 <_vfiprintf_r+0x1bc>
 8003392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003394:	07d9      	lsls	r1, r3, #31
 8003396:	d405      	bmi.n	80033a4 <_vfiprintf_r+0x220>
 8003398:	89ab      	ldrh	r3, [r5, #12]
 800339a:	059a      	lsls	r2, r3, #22
 800339c:	d402      	bmi.n	80033a4 <_vfiprintf_r+0x220>
 800339e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033a0:	f7ff fdb7 	bl	8002f12 <__retarget_lock_release_recursive>
 80033a4:	89ab      	ldrh	r3, [r5, #12]
 80033a6:	065b      	lsls	r3, r3, #25
 80033a8:	f53f af12 	bmi.w	80031d0 <_vfiprintf_r+0x4c>
 80033ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033ae:	e711      	b.n	80031d4 <_vfiprintf_r+0x50>
 80033b0:	ab03      	add	r3, sp, #12
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	462a      	mov	r2, r5
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <_vfiprintf_r+0x258>)
 80033b8:	a904      	add	r1, sp, #16
 80033ba:	4630      	mov	r0, r6
 80033bc:	f000 f880 	bl	80034c0 <_printf_i>
 80033c0:	e7e4      	b.n	800338c <_vfiprintf_r+0x208>
 80033c2:	bf00      	nop
 80033c4:	08003978 	.word	0x08003978
 80033c8:	08003998 	.word	0x08003998
 80033cc:	08003958 	.word	0x08003958
 80033d0:	080039b8 	.word	0x080039b8
 80033d4:	080039c2 	.word	0x080039c2
 80033d8:	00000000 	.word	0x00000000
 80033dc:	0800315f 	.word	0x0800315f
 80033e0:	080039be 	.word	0x080039be

080033e4 <_printf_common>:
 80033e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033e8:	4616      	mov	r6, r2
 80033ea:	4699      	mov	r9, r3
 80033ec:	688a      	ldr	r2, [r1, #8]
 80033ee:	690b      	ldr	r3, [r1, #16]
 80033f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033f4:	4293      	cmp	r3, r2
 80033f6:	bfb8      	it	lt
 80033f8:	4613      	movlt	r3, r2
 80033fa:	6033      	str	r3, [r6, #0]
 80033fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003400:	4607      	mov	r7, r0
 8003402:	460c      	mov	r4, r1
 8003404:	b10a      	cbz	r2, 800340a <_printf_common+0x26>
 8003406:	3301      	adds	r3, #1
 8003408:	6033      	str	r3, [r6, #0]
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	0699      	lsls	r1, r3, #26
 800340e:	bf42      	ittt	mi
 8003410:	6833      	ldrmi	r3, [r6, #0]
 8003412:	3302      	addmi	r3, #2
 8003414:	6033      	strmi	r3, [r6, #0]
 8003416:	6825      	ldr	r5, [r4, #0]
 8003418:	f015 0506 	ands.w	r5, r5, #6
 800341c:	d106      	bne.n	800342c <_printf_common+0x48>
 800341e:	f104 0a19 	add.w	sl, r4, #25
 8003422:	68e3      	ldr	r3, [r4, #12]
 8003424:	6832      	ldr	r2, [r6, #0]
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	42ab      	cmp	r3, r5
 800342a:	dc26      	bgt.n	800347a <_printf_common+0x96>
 800342c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003430:	1e13      	subs	r3, r2, #0
 8003432:	6822      	ldr	r2, [r4, #0]
 8003434:	bf18      	it	ne
 8003436:	2301      	movne	r3, #1
 8003438:	0692      	lsls	r2, r2, #26
 800343a:	d42b      	bmi.n	8003494 <_printf_common+0xb0>
 800343c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003440:	4649      	mov	r1, r9
 8003442:	4638      	mov	r0, r7
 8003444:	47c0      	blx	r8
 8003446:	3001      	adds	r0, #1
 8003448:	d01e      	beq.n	8003488 <_printf_common+0xa4>
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	68e5      	ldr	r5, [r4, #12]
 800344e:	6832      	ldr	r2, [r6, #0]
 8003450:	f003 0306 	and.w	r3, r3, #6
 8003454:	2b04      	cmp	r3, #4
 8003456:	bf08      	it	eq
 8003458:	1aad      	subeq	r5, r5, r2
 800345a:	68a3      	ldr	r3, [r4, #8]
 800345c:	6922      	ldr	r2, [r4, #16]
 800345e:	bf0c      	ite	eq
 8003460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003464:	2500      	movne	r5, #0
 8003466:	4293      	cmp	r3, r2
 8003468:	bfc4      	itt	gt
 800346a:	1a9b      	subgt	r3, r3, r2
 800346c:	18ed      	addgt	r5, r5, r3
 800346e:	2600      	movs	r6, #0
 8003470:	341a      	adds	r4, #26
 8003472:	42b5      	cmp	r5, r6
 8003474:	d11a      	bne.n	80034ac <_printf_common+0xc8>
 8003476:	2000      	movs	r0, #0
 8003478:	e008      	b.n	800348c <_printf_common+0xa8>
 800347a:	2301      	movs	r3, #1
 800347c:	4652      	mov	r2, sl
 800347e:	4649      	mov	r1, r9
 8003480:	4638      	mov	r0, r7
 8003482:	47c0      	blx	r8
 8003484:	3001      	adds	r0, #1
 8003486:	d103      	bne.n	8003490 <_printf_common+0xac>
 8003488:	f04f 30ff 	mov.w	r0, #4294967295
 800348c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003490:	3501      	adds	r5, #1
 8003492:	e7c6      	b.n	8003422 <_printf_common+0x3e>
 8003494:	18e1      	adds	r1, r4, r3
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	2030      	movs	r0, #48	; 0x30
 800349a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800349e:	4422      	add	r2, r4
 80034a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034a8:	3302      	adds	r3, #2
 80034aa:	e7c7      	b.n	800343c <_printf_common+0x58>
 80034ac:	2301      	movs	r3, #1
 80034ae:	4622      	mov	r2, r4
 80034b0:	4649      	mov	r1, r9
 80034b2:	4638      	mov	r0, r7
 80034b4:	47c0      	blx	r8
 80034b6:	3001      	adds	r0, #1
 80034b8:	d0e6      	beq.n	8003488 <_printf_common+0xa4>
 80034ba:	3601      	adds	r6, #1
 80034bc:	e7d9      	b.n	8003472 <_printf_common+0x8e>
	...

080034c0 <_printf_i>:
 80034c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034c4:	460c      	mov	r4, r1
 80034c6:	4691      	mov	r9, r2
 80034c8:	7e27      	ldrb	r7, [r4, #24]
 80034ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80034cc:	2f78      	cmp	r7, #120	; 0x78
 80034ce:	4680      	mov	r8, r0
 80034d0:	469a      	mov	sl, r3
 80034d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034d6:	d807      	bhi.n	80034e8 <_printf_i+0x28>
 80034d8:	2f62      	cmp	r7, #98	; 0x62
 80034da:	d80a      	bhi.n	80034f2 <_printf_i+0x32>
 80034dc:	2f00      	cmp	r7, #0
 80034de:	f000 80d8 	beq.w	8003692 <_printf_i+0x1d2>
 80034e2:	2f58      	cmp	r7, #88	; 0x58
 80034e4:	f000 80a3 	beq.w	800362e <_printf_i+0x16e>
 80034e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80034ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034f0:	e03a      	b.n	8003568 <_printf_i+0xa8>
 80034f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034f6:	2b15      	cmp	r3, #21
 80034f8:	d8f6      	bhi.n	80034e8 <_printf_i+0x28>
 80034fa:	a001      	add	r0, pc, #4	; (adr r0, 8003500 <_printf_i+0x40>)
 80034fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003500:	08003559 	.word	0x08003559
 8003504:	0800356d 	.word	0x0800356d
 8003508:	080034e9 	.word	0x080034e9
 800350c:	080034e9 	.word	0x080034e9
 8003510:	080034e9 	.word	0x080034e9
 8003514:	080034e9 	.word	0x080034e9
 8003518:	0800356d 	.word	0x0800356d
 800351c:	080034e9 	.word	0x080034e9
 8003520:	080034e9 	.word	0x080034e9
 8003524:	080034e9 	.word	0x080034e9
 8003528:	080034e9 	.word	0x080034e9
 800352c:	08003679 	.word	0x08003679
 8003530:	0800359d 	.word	0x0800359d
 8003534:	0800365b 	.word	0x0800365b
 8003538:	080034e9 	.word	0x080034e9
 800353c:	080034e9 	.word	0x080034e9
 8003540:	0800369b 	.word	0x0800369b
 8003544:	080034e9 	.word	0x080034e9
 8003548:	0800359d 	.word	0x0800359d
 800354c:	080034e9 	.word	0x080034e9
 8003550:	080034e9 	.word	0x080034e9
 8003554:	08003663 	.word	0x08003663
 8003558:	680b      	ldr	r3, [r1, #0]
 800355a:	1d1a      	adds	r2, r3, #4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	600a      	str	r2, [r1, #0]
 8003560:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003568:	2301      	movs	r3, #1
 800356a:	e0a3      	b.n	80036b4 <_printf_i+0x1f4>
 800356c:	6825      	ldr	r5, [r4, #0]
 800356e:	6808      	ldr	r0, [r1, #0]
 8003570:	062e      	lsls	r6, r5, #24
 8003572:	f100 0304 	add.w	r3, r0, #4
 8003576:	d50a      	bpl.n	800358e <_printf_i+0xce>
 8003578:	6805      	ldr	r5, [r0, #0]
 800357a:	600b      	str	r3, [r1, #0]
 800357c:	2d00      	cmp	r5, #0
 800357e:	da03      	bge.n	8003588 <_printf_i+0xc8>
 8003580:	232d      	movs	r3, #45	; 0x2d
 8003582:	426d      	negs	r5, r5
 8003584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003588:	485e      	ldr	r0, [pc, #376]	; (8003704 <_printf_i+0x244>)
 800358a:	230a      	movs	r3, #10
 800358c:	e019      	b.n	80035c2 <_printf_i+0x102>
 800358e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003592:	6805      	ldr	r5, [r0, #0]
 8003594:	600b      	str	r3, [r1, #0]
 8003596:	bf18      	it	ne
 8003598:	b22d      	sxthne	r5, r5
 800359a:	e7ef      	b.n	800357c <_printf_i+0xbc>
 800359c:	680b      	ldr	r3, [r1, #0]
 800359e:	6825      	ldr	r5, [r4, #0]
 80035a0:	1d18      	adds	r0, r3, #4
 80035a2:	6008      	str	r0, [r1, #0]
 80035a4:	0628      	lsls	r0, r5, #24
 80035a6:	d501      	bpl.n	80035ac <_printf_i+0xec>
 80035a8:	681d      	ldr	r5, [r3, #0]
 80035aa:	e002      	b.n	80035b2 <_printf_i+0xf2>
 80035ac:	0669      	lsls	r1, r5, #25
 80035ae:	d5fb      	bpl.n	80035a8 <_printf_i+0xe8>
 80035b0:	881d      	ldrh	r5, [r3, #0]
 80035b2:	4854      	ldr	r0, [pc, #336]	; (8003704 <_printf_i+0x244>)
 80035b4:	2f6f      	cmp	r7, #111	; 0x6f
 80035b6:	bf0c      	ite	eq
 80035b8:	2308      	moveq	r3, #8
 80035ba:	230a      	movne	r3, #10
 80035bc:	2100      	movs	r1, #0
 80035be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035c2:	6866      	ldr	r6, [r4, #4]
 80035c4:	60a6      	str	r6, [r4, #8]
 80035c6:	2e00      	cmp	r6, #0
 80035c8:	bfa2      	ittt	ge
 80035ca:	6821      	ldrge	r1, [r4, #0]
 80035cc:	f021 0104 	bicge.w	r1, r1, #4
 80035d0:	6021      	strge	r1, [r4, #0]
 80035d2:	b90d      	cbnz	r5, 80035d8 <_printf_i+0x118>
 80035d4:	2e00      	cmp	r6, #0
 80035d6:	d04d      	beq.n	8003674 <_printf_i+0x1b4>
 80035d8:	4616      	mov	r6, r2
 80035da:	fbb5 f1f3 	udiv	r1, r5, r3
 80035de:	fb03 5711 	mls	r7, r3, r1, r5
 80035e2:	5dc7      	ldrb	r7, [r0, r7]
 80035e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035e8:	462f      	mov	r7, r5
 80035ea:	42bb      	cmp	r3, r7
 80035ec:	460d      	mov	r5, r1
 80035ee:	d9f4      	bls.n	80035da <_printf_i+0x11a>
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d10b      	bne.n	800360c <_printf_i+0x14c>
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	07df      	lsls	r7, r3, #31
 80035f8:	d508      	bpl.n	800360c <_printf_i+0x14c>
 80035fa:	6923      	ldr	r3, [r4, #16]
 80035fc:	6861      	ldr	r1, [r4, #4]
 80035fe:	4299      	cmp	r1, r3
 8003600:	bfde      	ittt	le
 8003602:	2330      	movle	r3, #48	; 0x30
 8003604:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003608:	f106 36ff 	addle.w	r6, r6, #4294967295
 800360c:	1b92      	subs	r2, r2, r6
 800360e:	6122      	str	r2, [r4, #16]
 8003610:	f8cd a000 	str.w	sl, [sp]
 8003614:	464b      	mov	r3, r9
 8003616:	aa03      	add	r2, sp, #12
 8003618:	4621      	mov	r1, r4
 800361a:	4640      	mov	r0, r8
 800361c:	f7ff fee2 	bl	80033e4 <_printf_common>
 8003620:	3001      	adds	r0, #1
 8003622:	d14c      	bne.n	80036be <_printf_i+0x1fe>
 8003624:	f04f 30ff 	mov.w	r0, #4294967295
 8003628:	b004      	add	sp, #16
 800362a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800362e:	4835      	ldr	r0, [pc, #212]	; (8003704 <_printf_i+0x244>)
 8003630:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	680e      	ldr	r6, [r1, #0]
 8003638:	061f      	lsls	r7, r3, #24
 800363a:	f856 5b04 	ldr.w	r5, [r6], #4
 800363e:	600e      	str	r6, [r1, #0]
 8003640:	d514      	bpl.n	800366c <_printf_i+0x1ac>
 8003642:	07d9      	lsls	r1, r3, #31
 8003644:	bf44      	itt	mi
 8003646:	f043 0320 	orrmi.w	r3, r3, #32
 800364a:	6023      	strmi	r3, [r4, #0]
 800364c:	b91d      	cbnz	r5, 8003656 <_printf_i+0x196>
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	f023 0320 	bic.w	r3, r3, #32
 8003654:	6023      	str	r3, [r4, #0]
 8003656:	2310      	movs	r3, #16
 8003658:	e7b0      	b.n	80035bc <_printf_i+0xfc>
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	f043 0320 	orr.w	r3, r3, #32
 8003660:	6023      	str	r3, [r4, #0]
 8003662:	2378      	movs	r3, #120	; 0x78
 8003664:	4828      	ldr	r0, [pc, #160]	; (8003708 <_printf_i+0x248>)
 8003666:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800366a:	e7e3      	b.n	8003634 <_printf_i+0x174>
 800366c:	065e      	lsls	r6, r3, #25
 800366e:	bf48      	it	mi
 8003670:	b2ad      	uxthmi	r5, r5
 8003672:	e7e6      	b.n	8003642 <_printf_i+0x182>
 8003674:	4616      	mov	r6, r2
 8003676:	e7bb      	b.n	80035f0 <_printf_i+0x130>
 8003678:	680b      	ldr	r3, [r1, #0]
 800367a:	6826      	ldr	r6, [r4, #0]
 800367c:	6960      	ldr	r0, [r4, #20]
 800367e:	1d1d      	adds	r5, r3, #4
 8003680:	600d      	str	r5, [r1, #0]
 8003682:	0635      	lsls	r5, r6, #24
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	d501      	bpl.n	800368c <_printf_i+0x1cc>
 8003688:	6018      	str	r0, [r3, #0]
 800368a:	e002      	b.n	8003692 <_printf_i+0x1d2>
 800368c:	0671      	lsls	r1, r6, #25
 800368e:	d5fb      	bpl.n	8003688 <_printf_i+0x1c8>
 8003690:	8018      	strh	r0, [r3, #0]
 8003692:	2300      	movs	r3, #0
 8003694:	6123      	str	r3, [r4, #16]
 8003696:	4616      	mov	r6, r2
 8003698:	e7ba      	b.n	8003610 <_printf_i+0x150>
 800369a:	680b      	ldr	r3, [r1, #0]
 800369c:	1d1a      	adds	r2, r3, #4
 800369e:	600a      	str	r2, [r1, #0]
 80036a0:	681e      	ldr	r6, [r3, #0]
 80036a2:	6862      	ldr	r2, [r4, #4]
 80036a4:	2100      	movs	r1, #0
 80036a6:	4630      	mov	r0, r6
 80036a8:	f7fc fdca 	bl	8000240 <memchr>
 80036ac:	b108      	cbz	r0, 80036b2 <_printf_i+0x1f2>
 80036ae:	1b80      	subs	r0, r0, r6
 80036b0:	6060      	str	r0, [r4, #4]
 80036b2:	6863      	ldr	r3, [r4, #4]
 80036b4:	6123      	str	r3, [r4, #16]
 80036b6:	2300      	movs	r3, #0
 80036b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036bc:	e7a8      	b.n	8003610 <_printf_i+0x150>
 80036be:	6923      	ldr	r3, [r4, #16]
 80036c0:	4632      	mov	r2, r6
 80036c2:	4649      	mov	r1, r9
 80036c4:	4640      	mov	r0, r8
 80036c6:	47d0      	blx	sl
 80036c8:	3001      	adds	r0, #1
 80036ca:	d0ab      	beq.n	8003624 <_printf_i+0x164>
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	079b      	lsls	r3, r3, #30
 80036d0:	d413      	bmi.n	80036fa <_printf_i+0x23a>
 80036d2:	68e0      	ldr	r0, [r4, #12]
 80036d4:	9b03      	ldr	r3, [sp, #12]
 80036d6:	4298      	cmp	r0, r3
 80036d8:	bfb8      	it	lt
 80036da:	4618      	movlt	r0, r3
 80036dc:	e7a4      	b.n	8003628 <_printf_i+0x168>
 80036de:	2301      	movs	r3, #1
 80036e0:	4632      	mov	r2, r6
 80036e2:	4649      	mov	r1, r9
 80036e4:	4640      	mov	r0, r8
 80036e6:	47d0      	blx	sl
 80036e8:	3001      	adds	r0, #1
 80036ea:	d09b      	beq.n	8003624 <_printf_i+0x164>
 80036ec:	3501      	adds	r5, #1
 80036ee:	68e3      	ldr	r3, [r4, #12]
 80036f0:	9903      	ldr	r1, [sp, #12]
 80036f2:	1a5b      	subs	r3, r3, r1
 80036f4:	42ab      	cmp	r3, r5
 80036f6:	dcf2      	bgt.n	80036de <_printf_i+0x21e>
 80036f8:	e7eb      	b.n	80036d2 <_printf_i+0x212>
 80036fa:	2500      	movs	r5, #0
 80036fc:	f104 0619 	add.w	r6, r4, #25
 8003700:	e7f5      	b.n	80036ee <_printf_i+0x22e>
 8003702:	bf00      	nop
 8003704:	080039c9 	.word	0x080039c9
 8003708:	080039da 	.word	0x080039da

0800370c <_sbrk_r>:
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	4d06      	ldr	r5, [pc, #24]	; (8003728 <_sbrk_r+0x1c>)
 8003710:	2300      	movs	r3, #0
 8003712:	4604      	mov	r4, r0
 8003714:	4608      	mov	r0, r1
 8003716:	602b      	str	r3, [r5, #0]
 8003718:	f7fd fa28 	bl	8000b6c <_sbrk>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	d102      	bne.n	8003726 <_sbrk_r+0x1a>
 8003720:	682b      	ldr	r3, [r5, #0]
 8003722:	b103      	cbz	r3, 8003726 <_sbrk_r+0x1a>
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	bd38      	pop	{r3, r4, r5, pc}
 8003728:	20000144 	.word	0x20000144

0800372c <__sread>:
 800372c:	b510      	push	{r4, lr}
 800372e:	460c      	mov	r4, r1
 8003730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003734:	f000 f8a0 	bl	8003878 <_read_r>
 8003738:	2800      	cmp	r0, #0
 800373a:	bfab      	itete	ge
 800373c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800373e:	89a3      	ldrhlt	r3, [r4, #12]
 8003740:	181b      	addge	r3, r3, r0
 8003742:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003746:	bfac      	ite	ge
 8003748:	6563      	strge	r3, [r4, #84]	; 0x54
 800374a:	81a3      	strhlt	r3, [r4, #12]
 800374c:	bd10      	pop	{r4, pc}

0800374e <__swrite>:
 800374e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003752:	461f      	mov	r7, r3
 8003754:	898b      	ldrh	r3, [r1, #12]
 8003756:	05db      	lsls	r3, r3, #23
 8003758:	4605      	mov	r5, r0
 800375a:	460c      	mov	r4, r1
 800375c:	4616      	mov	r6, r2
 800375e:	d505      	bpl.n	800376c <__swrite+0x1e>
 8003760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003764:	2302      	movs	r3, #2
 8003766:	2200      	movs	r2, #0
 8003768:	f000 f868 	bl	800383c <_lseek_r>
 800376c:	89a3      	ldrh	r3, [r4, #12]
 800376e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003776:	81a3      	strh	r3, [r4, #12]
 8003778:	4632      	mov	r2, r6
 800377a:	463b      	mov	r3, r7
 800377c:	4628      	mov	r0, r5
 800377e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003782:	f000 b817 	b.w	80037b4 <_write_r>

08003786 <__sseek>:
 8003786:	b510      	push	{r4, lr}
 8003788:	460c      	mov	r4, r1
 800378a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800378e:	f000 f855 	bl	800383c <_lseek_r>
 8003792:	1c43      	adds	r3, r0, #1
 8003794:	89a3      	ldrh	r3, [r4, #12]
 8003796:	bf15      	itete	ne
 8003798:	6560      	strne	r0, [r4, #84]	; 0x54
 800379a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800379e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80037a2:	81a3      	strheq	r3, [r4, #12]
 80037a4:	bf18      	it	ne
 80037a6:	81a3      	strhne	r3, [r4, #12]
 80037a8:	bd10      	pop	{r4, pc}

080037aa <__sclose>:
 80037aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ae:	f000 b813 	b.w	80037d8 <_close_r>
	...

080037b4 <_write_r>:
 80037b4:	b538      	push	{r3, r4, r5, lr}
 80037b6:	4d07      	ldr	r5, [pc, #28]	; (80037d4 <_write_r+0x20>)
 80037b8:	4604      	mov	r4, r0
 80037ba:	4608      	mov	r0, r1
 80037bc:	4611      	mov	r1, r2
 80037be:	2200      	movs	r2, #0
 80037c0:	602a      	str	r2, [r5, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	f7fd f90a 	bl	80009dc <_write>
 80037c8:	1c43      	adds	r3, r0, #1
 80037ca:	d102      	bne.n	80037d2 <_write_r+0x1e>
 80037cc:	682b      	ldr	r3, [r5, #0]
 80037ce:	b103      	cbz	r3, 80037d2 <_write_r+0x1e>
 80037d0:	6023      	str	r3, [r4, #0]
 80037d2:	bd38      	pop	{r3, r4, r5, pc}
 80037d4:	20000144 	.word	0x20000144

080037d8 <_close_r>:
 80037d8:	b538      	push	{r3, r4, r5, lr}
 80037da:	4d06      	ldr	r5, [pc, #24]	; (80037f4 <_close_r+0x1c>)
 80037dc:	2300      	movs	r3, #0
 80037de:	4604      	mov	r4, r0
 80037e0:	4608      	mov	r0, r1
 80037e2:	602b      	str	r3, [r5, #0]
 80037e4:	f7fd f98d 	bl	8000b02 <_close>
 80037e8:	1c43      	adds	r3, r0, #1
 80037ea:	d102      	bne.n	80037f2 <_close_r+0x1a>
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	b103      	cbz	r3, 80037f2 <_close_r+0x1a>
 80037f0:	6023      	str	r3, [r4, #0]
 80037f2:	bd38      	pop	{r3, r4, r5, pc}
 80037f4:	20000144 	.word	0x20000144

080037f8 <_fstat_r>:
 80037f8:	b538      	push	{r3, r4, r5, lr}
 80037fa:	4d07      	ldr	r5, [pc, #28]	; (8003818 <_fstat_r+0x20>)
 80037fc:	2300      	movs	r3, #0
 80037fe:	4604      	mov	r4, r0
 8003800:	4608      	mov	r0, r1
 8003802:	4611      	mov	r1, r2
 8003804:	602b      	str	r3, [r5, #0]
 8003806:	f7fd f988 	bl	8000b1a <_fstat>
 800380a:	1c43      	adds	r3, r0, #1
 800380c:	d102      	bne.n	8003814 <_fstat_r+0x1c>
 800380e:	682b      	ldr	r3, [r5, #0]
 8003810:	b103      	cbz	r3, 8003814 <_fstat_r+0x1c>
 8003812:	6023      	str	r3, [r4, #0]
 8003814:	bd38      	pop	{r3, r4, r5, pc}
 8003816:	bf00      	nop
 8003818:	20000144 	.word	0x20000144

0800381c <_isatty_r>:
 800381c:	b538      	push	{r3, r4, r5, lr}
 800381e:	4d06      	ldr	r5, [pc, #24]	; (8003838 <_isatty_r+0x1c>)
 8003820:	2300      	movs	r3, #0
 8003822:	4604      	mov	r4, r0
 8003824:	4608      	mov	r0, r1
 8003826:	602b      	str	r3, [r5, #0]
 8003828:	f7fd f987 	bl	8000b3a <_isatty>
 800382c:	1c43      	adds	r3, r0, #1
 800382e:	d102      	bne.n	8003836 <_isatty_r+0x1a>
 8003830:	682b      	ldr	r3, [r5, #0]
 8003832:	b103      	cbz	r3, 8003836 <_isatty_r+0x1a>
 8003834:	6023      	str	r3, [r4, #0]
 8003836:	bd38      	pop	{r3, r4, r5, pc}
 8003838:	20000144 	.word	0x20000144

0800383c <_lseek_r>:
 800383c:	b538      	push	{r3, r4, r5, lr}
 800383e:	4d07      	ldr	r5, [pc, #28]	; (800385c <_lseek_r+0x20>)
 8003840:	4604      	mov	r4, r0
 8003842:	4608      	mov	r0, r1
 8003844:	4611      	mov	r1, r2
 8003846:	2200      	movs	r2, #0
 8003848:	602a      	str	r2, [r5, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	f7fd f980 	bl	8000b50 <_lseek>
 8003850:	1c43      	adds	r3, r0, #1
 8003852:	d102      	bne.n	800385a <_lseek_r+0x1e>
 8003854:	682b      	ldr	r3, [r5, #0]
 8003856:	b103      	cbz	r3, 800385a <_lseek_r+0x1e>
 8003858:	6023      	str	r3, [r4, #0]
 800385a:	bd38      	pop	{r3, r4, r5, pc}
 800385c:	20000144 	.word	0x20000144

08003860 <__malloc_lock>:
 8003860:	4801      	ldr	r0, [pc, #4]	; (8003868 <__malloc_lock+0x8>)
 8003862:	f7ff bb55 	b.w	8002f10 <__retarget_lock_acquire_recursive>
 8003866:	bf00      	nop
 8003868:	2000013c 	.word	0x2000013c

0800386c <__malloc_unlock>:
 800386c:	4801      	ldr	r0, [pc, #4]	; (8003874 <__malloc_unlock+0x8>)
 800386e:	f7ff bb50 	b.w	8002f12 <__retarget_lock_release_recursive>
 8003872:	bf00      	nop
 8003874:	2000013c 	.word	0x2000013c

08003878 <_read_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4d07      	ldr	r5, [pc, #28]	; (8003898 <_read_r+0x20>)
 800387c:	4604      	mov	r4, r0
 800387e:	4608      	mov	r0, r1
 8003880:	4611      	mov	r1, r2
 8003882:	2200      	movs	r2, #0
 8003884:	602a      	str	r2, [r5, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	f7fd f91e 	bl	8000ac8 <_read>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	d102      	bne.n	8003896 <_read_r+0x1e>
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	b103      	cbz	r3, 8003896 <_read_r+0x1e>
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	bd38      	pop	{r3, r4, r5, pc}
 8003898:	20000144 	.word	0x20000144

0800389c <_init>:
 800389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389e:	bf00      	nop
 80038a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a2:	bc08      	pop	{r3}
 80038a4:	469e      	mov	lr, r3
 80038a6:	4770      	bx	lr

080038a8 <_fini>:
 80038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038aa:	bf00      	nop
 80038ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ae:	bc08      	pop	{r3}
 80038b0:	469e      	mov	lr, r3
 80038b2:	4770      	bx	lr
