
stm32f767_nucleo_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005858  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005a58  08005a58  00015a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ba0  08005ba0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005ba0  08005ba0  00015ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ba8  08005ba8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ba8  08005ba8  00015ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000070  08005c20  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08005c20  00020278  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001350b  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b63  00000000  00000000  000335a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00036110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00037088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c0b  00000000  00000000  00037ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125c0  00000000  00000000  00061ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fec8b  00000000  00000000  000740a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172d2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004934  00000000  00000000  00172d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08005a40 	.word	0x08005a40

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08005a40 	.word	0x08005a40

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_CAN1_Init+0x64>)
 80005ee:	4a18      	ldr	r2, [pc, #96]	; (8000650 <MX_CAN1_Init+0x68>)
 80005f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <MX_CAN1_Init+0x64>)
 80005f4:	2206      	movs	r2, #6
 80005f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_CAN1_Init+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_CAN1_Init+0x64>)
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_CAN1_Init+0x64>)
 8000606:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800060a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_CAN1_Init+0x64>)
 800060e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000612:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <MX_CAN1_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_CAN1_Init+0x64>)
 800061c:	2201      	movs	r2, #1
 800061e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_CAN1_Init+0x64>)
 8000622:	2200      	movs	r2, #0
 8000624:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_CAN1_Init+0x64>)
 8000628:	2200      	movs	r2, #0
 800062a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <MX_CAN1_Init+0x64>)
 800062e:	2200      	movs	r2, #0
 8000630:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_CAN1_Init+0x64>)
 8000634:	2200      	movs	r2, #0
 8000636:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_CAN1_Init+0x64>)
 800063a:	f000 fe4b 	bl	80012d4 <HAL_CAN_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000644:	f000 fafa 	bl	8000c3c <Error_Handler>
  }

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000098 	.word	0x20000098
 8000650:	40006400 	.word	0x40006400

08000654 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <HAL_CAN_MspInit+0x8c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d130      	bne.n	80006d8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <HAL_CAN_MspInit+0x90>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067a:	4a1a      	ldr	r2, [pc, #104]	; (80006e4 <HAL_CAN_MspInit+0x90>)
 800067c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000680:	6413      	str	r3, [r2, #64]	; 0x40
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <HAL_CAN_MspInit+0x90>)
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <HAL_CAN_MspInit+0x90>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <HAL_CAN_MspInit+0x90>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_CAN_MspInit+0x90>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b4:	2303      	movs	r3, #3
 80006b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006b8:	2309      	movs	r3, #9
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	4809      	ldr	r0, [pc, #36]	; (80006e8 <HAL_CAN_MspInit+0x94>)
 80006c4:	f001 fd86 	bl	80021d4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2100      	movs	r1, #0
 80006cc:	2014      	movs	r0, #20
 80006ce:	f001 fd4a 	bl	8002166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006d2:	2014      	movs	r0, #20
 80006d4:	f001 fd63 	bl	800219e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	; 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40006400 	.word	0x40006400
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020400 	.word	0x40020400

080006ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a2d      	ldr	r2, [pc, #180]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a27      	ldr	r2, [pc, #156]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a21      	ldr	r2, [pc, #132]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	481c      	ldr	r0, [pc, #112]	; (80007c0 <MX_GPIO_Init+0xd4>)
 8000750:	f001 feec 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_GPIO_Init+0xd8>)
 800075c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800075e:	2301      	movs	r3, #1
 8000760:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	4619      	mov	r1, r3
 8000768:	4817      	ldr	r0, [pc, #92]	; (80007c8 <MX_GPIO_Init+0xdc>)
 800076a:	f001 fd33 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800076e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_GPIO_Init+0xd8>)
 8000776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4619      	mov	r1, r3
 8000782:	4811      	ldr	r0, [pc, #68]	; (80007c8 <MX_GPIO_Init+0xdc>)
 8000784:	f001 fd26 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	4619      	mov	r1, r3
 800079e:	4808      	ldr	r0, [pc, #32]	; (80007c0 <MX_GPIO_Init+0xd4>)
 80007a0:	f001 fd18 	bl	80021d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	2028      	movs	r0, #40	; 0x28
 80007aa:	f001 fcdc 	bl	8002166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007ae:	2028      	movs	r0, #40	; 0x28
 80007b0:	f001 fcf5 	bl	800219e <HAL_NVIC_EnableIRQ>

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020400 	.word	0x40020400
 80007c4:	10110000 	.word	0x10110000
 80007c8:	40020800 	.word	0x40020800

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b0b4      	sub	sp, #208	; 0xd0
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t TIM2_prev = 0; // предыдущ. значение
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d8:	f000 fd1f 	bl	800121a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007dc:	f000 f92a 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e0:	f7ff ff84 	bl	80006ec <MX_GPIO_Init>
  MX_CAN1_Init();
 80007e4:	f7ff ff00 	bl	80005e8 <MX_CAN1_Init>
  MX_TIM6_Init();
 80007e8:	f000 fbc4 	bl	8000f74 <MX_TIM6_Init>
  MX_UART5_Init();
 80007ec:	f000 fc78 	bl	80010e0 <MX_UART5_Init>
  MX_TIM2_Init();
 80007f0:	f000 fb6c 	bl	8000ecc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	sprintf((char *)pTxData, "CAN_motor\r\n");
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	497f      	ldr	r1, [pc, #508]	; (80009f4 <main+0x228>)
 80007f8:	4618      	mov	r0, r3
 80007fa:	f004 f811 	bl	8004820 <siprintf>
	status = HAL_UART_Transmit (&huart5, pTxData, strlen((char *)pTxData), 200);
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fd1d 	bl	8000240 <strlen>
 8000806:	4603      	mov	r3, r0
 8000808:	b29a      	uxth	r2, r3
 800080a:	1d39      	adds	r1, r7, #4
 800080c:	23c8      	movs	r3, #200	; 0xc8
 800080e:	487a      	ldr	r0, [pc, #488]	; (80009f8 <main+0x22c>)
 8000810:	f003 fae8 	bl	8003de4 <HAL_UART_Transmit>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	4b78      	ldr	r3, [pc, #480]	; (80009fc <main+0x230>)
 800081a:	701a      	strb	r2, [r3, #0]
	 status = HAL_TIM_Encoder_Start (&htim2, TIM_CHANNEL_ALL);
 800081c:	213c      	movs	r1, #60	; 0x3c
 800081e:	4878      	ldr	r0, [pc, #480]	; (8000a00 <main+0x234>)
 8000820:	f003 f8b0 	bl	8003984 <HAL_TIM_Encoder_Start>
 8000824:	4603      	mov	r3, r0
 8000826:	461a      	mov	r2, r3
 8000828:	4b74      	ldr	r3, [pc, #464]	; (80009fc <main+0x230>)
 800082a:	701a      	strb	r2, [r3, #0]
  if(HAL_CAN_Start(&hcan1) != HAL_OK) // включили CAN
 800082c:	4875      	ldr	r0, [pc, #468]	; (8000a04 <main+0x238>)
 800082e:	f000 ff39 	bl	80016a4 <HAL_CAN_Start>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d01b      	beq.n	8000870 <main+0xa4>
  {
		sprintf((char *)pTxData, "HAL_CAN_start Err\r\n");
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4973      	ldr	r1, [pc, #460]	; (8000a08 <main+0x23c>)
 800083c:	4618      	mov	r0, r3
 800083e:	f003 ffef 	bl	8004820 <siprintf>
		status = HAL_UART_Transmit (&huart5, pTxData, strlen((char *)pTxData), 200);
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fcfb 	bl	8000240 <strlen>
 800084a:	4603      	mov	r3, r0
 800084c:	b29a      	uxth	r2, r3
 800084e:	1d39      	adds	r1, r7, #4
 8000850:	23c8      	movs	r3, #200	; 0xc8
 8000852:	4869      	ldr	r0, [pc, #420]	; (80009f8 <main+0x22c>)
 8000854:	f003 fac6 	bl	8003de4 <HAL_UART_Transmit>
 8000858:	4603      	mov	r3, r0
 800085a:	461a      	mov	r2, r3
 800085c:	4b67      	ldr	r3, [pc, #412]	; (80009fc <main+0x230>)
 800085e:	701a      	strb	r2, [r3, #0]
		 status = HAL_TIM_Encoder_Start (&htim2, TIM_CHANNEL_ALL);
 8000860:	213c      	movs	r1, #60	; 0x3c
 8000862:	4867      	ldr	r0, [pc, #412]	; (8000a00 <main+0x234>)
 8000864:	f003 f88e 	bl	8003984 <HAL_TIM_Encoder_Start>
 8000868:	4603      	mov	r3, r0
 800086a:	461a      	mov	r2, r3
 800086c:	4b63      	ldr	r3, [pc, #396]	; (80009fc <main+0x230>)
 800086e:	701a      	strb	r2, [r3, #0]

  }
  sFilterConfig.FilterBank = 0;
 8000870:	4b66      	ldr	r3, [pc, #408]	; (8000a0c <main+0x240>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000876:	4b65      	ldr	r3, [pc, #404]	; (8000a0c <main+0x240>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800087c:	4b63      	ldr	r3, [pc, #396]	; (8000a0c <main+0x240>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000882:	4b62      	ldr	r3, [pc, #392]	; (8000a0c <main+0x240>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000888:	4b60      	ldr	r3, [pc, #384]	; (8000a0c <main+0x240>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterIdHigh = 0x0000;
 800088e:	4b5f      	ldr	r3, [pc, #380]	; (8000a0c <main+0x240>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000894:	4b5d      	ldr	r3, [pc, #372]	; (8000a0c <main+0x240>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800089a:	4b5c      	ldr	r3, [pc, #368]	; (8000a0c <main+0x240>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80008a0:	4b5a      	ldr	r3, [pc, #360]	; (8000a0c <main+0x240>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80008a6:	4b59      	ldr	r3, [pc, #356]	; (8000a0c <main+0x240>)
 80008a8:	220e      	movs	r2, #14
 80008aa:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_CAN_ConfigFilter (&hcan1, &sFilterConfig) != HAL_OK)
 80008ac:	4957      	ldr	r1, [pc, #348]	; (8000a0c <main+0x240>)
 80008ae:	4855      	ldr	r0, [pc, #340]	; (8000a04 <main+0x238>)
 80008b0:	f000 fe0c 	bl	80014cc <HAL_CAN_ConfigFilter>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d002      	beq.n	80008c0 <main+0xf4>
  {
	  printf("HAL_CAN_start_filter Err\r\n");
 80008ba:	4855      	ldr	r0, [pc, #340]	; (8000a10 <main+0x244>)
 80008bc:	f003 ffa8 	bl	8004810 <puts>
  }

  if(HAL_CAN_ActivateNotification (&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80008c0:	2102      	movs	r1, #2
 80008c2:	4850      	ldr	r0, [pc, #320]	; (8000a04 <main+0x238>)
 80008c4:	f001 f91f 	bl	8001b06 <HAL_CAN_ActivateNotification>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d002      	beq.n	80008d4 <main+0x108>
  {
	  printf("HAL_CAN_ActivateNotofication Err\r\n");
 80008ce:	4851      	ldr	r0, [pc, #324]	; (8000a14 <main+0x248>)
 80008d0:	f003 ff9e 	bl	8004810 <puts>
  }

  Motor_ID = 2;
 80008d4:	4b50      	ldr	r3, [pc, #320]	; (8000a18 <main+0x24c>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	701a      	strb	r2, [r3, #0]
  pHeader.DLC = 8;
 80008da:	4b50      	ldr	r3, [pc, #320]	; (8000a1c <main+0x250>)
 80008dc:	2208      	movs	r2, #8
 80008de:	611a      	str	r2, [r3, #16]
  pHeader.StdId = 0x140 + Motor_ID;
 80008e0:	4b4d      	ldr	r3, [pc, #308]	; (8000a18 <main+0x24c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b4c      	ldr	r3, [pc, #304]	; (8000a1c <main+0x250>)
 80008ec:	601a      	str	r2, [r3, #0]
  pHeader.IDE = 0; //Standard identifier.
 80008ee:	4b4b      	ldr	r3, [pc, #300]	; (8000a1c <main+0x250>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  pHeader.RTR = 0; //Data frame
 80008f4:	4b49      	ldr	r3, [pc, #292]	; (8000a1c <main+0x250>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]


 status =  HAL_CAN_AddTxMessage (&hcan1, &pHeader, aData_motor_of, &pTxMailbox);
 80008fa:	4b49      	ldr	r3, [pc, #292]	; (8000a20 <main+0x254>)
 80008fc:	4a49      	ldr	r2, [pc, #292]	; (8000a24 <main+0x258>)
 80008fe:	4947      	ldr	r1, [pc, #284]	; (8000a1c <main+0x250>)
 8000900:	4840      	ldr	r0, [pc, #256]	; (8000a04 <main+0x238>)
 8000902:	f000 ff13 	bl	800172c <HAL_CAN_AddTxMessage>
 8000906:	4603      	mov	r3, r0
 8000908:	461a      	mov	r2, r3
 800090a:	4b3c      	ldr	r3, [pc, #240]	; (80009fc <main+0x230>)
 800090c:	701a      	strb	r2, [r3, #0]
//  status = HAL_CAN_AddTxMessage (&hcan1, &pHeader, aData, &pTxMailbox);
aData_motor_on[0] = 0xA1;
 800090e:	4b46      	ldr	r3, [pc, #280]	; (8000a28 <main+0x25c>)
 8000910:	22a1      	movs	r2, #161	; 0xa1
 8000912:	701a      	strb	r2, [r3, #0]
aData_motor_on[1] = 0x00;
 8000914:	4b44      	ldr	r3, [pc, #272]	; (8000a28 <main+0x25c>)
 8000916:	2200      	movs	r2, #0
 8000918:	705a      	strb	r2, [r3, #1]
aData_motor_on[2] = 0x00;
 800091a:	4b43      	ldr	r3, [pc, #268]	; (8000a28 <main+0x25c>)
 800091c:	2200      	movs	r2, #0
 800091e:	709a      	strb	r2, [r3, #2]
aData_motor_on[3] = 0x00;
 8000920:	4b41      	ldr	r3, [pc, #260]	; (8000a28 <main+0x25c>)
 8000922:	2200      	movs	r2, #0
 8000924:	70da      	strb	r2, [r3, #3]
aData_motor_on[4] = 0xA;
 8000926:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <main+0x25c>)
 8000928:	220a      	movs	r2, #10
 800092a:	711a      	strb	r2, [r3, #4]
aData_motor_on[5] = 0xA;
 800092c:	4b3e      	ldr	r3, [pc, #248]	; (8000a28 <main+0x25c>)
 800092e:	220a      	movs	r2, #10
 8000930:	715a      	strb	r2, [r3, #5]
aData_motor_on[6] = 0x00;
 8000932:	4b3d      	ldr	r3, [pc, #244]	; (8000a28 <main+0x25c>)
 8000934:	2200      	movs	r2, #0
 8000936:	719a      	strb	r2, [r3, #6]
aData_motor_on[7] = 0x00;
 8000938:	4b3b      	ldr	r3, [pc, #236]	; (8000a28 <main+0x25c>)
 800093a:	2200      	movs	r2, #0
 800093c:	71da      	strb	r2, [r3, #7]

aData_motor_of[0] = 0x80;
 800093e:	4b39      	ldr	r3, [pc, #228]	; (8000a24 <main+0x258>)
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	701a      	strb	r2, [r3, #0]
aData_motor_of[1] = 0x00;
 8000944:	4b37      	ldr	r3, [pc, #220]	; (8000a24 <main+0x258>)
 8000946:	2200      	movs	r2, #0
 8000948:	705a      	strb	r2, [r3, #1]
aData_motor_of[2] = 0x00;
 800094a:	4b36      	ldr	r3, [pc, #216]	; (8000a24 <main+0x258>)
 800094c:	2200      	movs	r2, #0
 800094e:	709a      	strb	r2, [r3, #2]
aData_motor_of[3] = 0x00;
 8000950:	4b34      	ldr	r3, [pc, #208]	; (8000a24 <main+0x258>)
 8000952:	2200      	movs	r2, #0
 8000954:	70da      	strb	r2, [r3, #3]
aData_motor_of[4] = 0x00;
 8000956:	4b33      	ldr	r3, [pc, #204]	; (8000a24 <main+0x258>)
 8000958:	2200      	movs	r2, #0
 800095a:	711a      	strb	r2, [r3, #4]
aData_motor_of[5] = 0x00;
 800095c:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <main+0x258>)
 800095e:	2200      	movs	r2, #0
 8000960:	715a      	strb	r2, [r3, #5]
aData_motor_of[6] = 0x00;
 8000962:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <main+0x258>)
 8000964:	2200      	movs	r2, #0
 8000966:	719a      	strb	r2, [r3, #6]
aData_motor_of[7] = 0x00;
 8000968:	4b2e      	ldr	r3, [pc, #184]	; (8000a24 <main+0x258>)
 800096a:	2200      	movs	r2, #0
 800096c:	71da      	strb	r2, [r3, #7]

aData[0] = 0x88;
 800096e:	4b2f      	ldr	r3, [pc, #188]	; (8000a2c <main+0x260>)
 8000970:	2288      	movs	r2, #136	; 0x88
 8000972:	701a      	strb	r2, [r3, #0]
aData[1] = 0x00;
 8000974:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <main+0x260>)
 8000976:	2200      	movs	r2, #0
 8000978:	705a      	strb	r2, [r3, #1]
aData[2] = 0x00;
 800097a:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <main+0x260>)
 800097c:	2200      	movs	r2, #0
 800097e:	709a      	strb	r2, [r3, #2]
aData[3] = 0x00;
 8000980:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <main+0x260>)
 8000982:	2200      	movs	r2, #0
 8000984:	70da      	strb	r2, [r3, #3]
aData[4] = 0x00;
 8000986:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <main+0x260>)
 8000988:	2200      	movs	r2, #0
 800098a:	711a      	strb	r2, [r3, #4]
aData[5] = 0x00;
 800098c:	4b27      	ldr	r3, [pc, #156]	; (8000a2c <main+0x260>)
 800098e:	2200      	movs	r2, #0
 8000990:	715a      	strb	r2, [r3, #5]
aData[6] = 0x00;
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <main+0x260>)
 8000994:	2200      	movs	r2, #0
 8000996:	719a      	strb	r2, [r3, #6]
aData[7] = 0x00;
 8000998:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <main+0x260>)
 800099a:	2200      	movs	r2, #0
 800099c:	71da      	strb	r2, [r3, #7]
//    status_motor_of = HAL_CAN_AddTxMessage(&hcan1, &pHeader, aData_motor_of, &pTxMailbox);
status = HAL_TIM_Encoder_Start (&htim2, TIM_CHANNEL_ALL);
 800099e:	213c      	movs	r1, #60	; 0x3c
 80009a0:	4817      	ldr	r0, [pc, #92]	; (8000a00 <main+0x234>)
 80009a2:	f002 ffef 	bl	8003984 <HAL_TIM_Encoder_Start>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <main+0x230>)
 80009ac:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  if(TIM2->CNT != TIM2_prev)
 80009ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d0f8      	beq.n	80009ae <main+0x1e2>
	  	  	  	 {
	  	  	  	  TIM2_prev = TIM2->CNT; // предыдущ. значение
 80009bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  	  	  	  	sprintf((char *)pTxData, "%ld\r\n", TIM2_prev);
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80009cc:	4918      	ldr	r1, [pc, #96]	; (8000a30 <main+0x264>)
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 ff26 	bl	8004820 <siprintf>
	  	  	  		status = HAL_UART_Transmit (&huart5, pTxData, strlen((char *)pTxData), 200);
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fc32 	bl	8000240 <strlen>
 80009dc:	4603      	mov	r3, r0
 80009de:	b29a      	uxth	r2, r3
 80009e0:	1d39      	adds	r1, r7, #4
 80009e2:	23c8      	movs	r3, #200	; 0xc8
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <main+0x22c>)
 80009e6:	f003 f9fd 	bl	8003de4 <HAL_UART_Transmit>
 80009ea:	4603      	mov	r3, r0
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b03      	ldr	r3, [pc, #12]	; (80009fc <main+0x230>)
 80009f0:	701a      	strb	r2, [r3, #0]
	  if(TIM2->CNT != TIM2_prev)
 80009f2:	e7dc      	b.n	80009ae <main+0x1e2>
 80009f4:	08005a58 	.word	0x08005a58
 80009f8:	200001e0 	.word	0x200001e0
 80009fc:	20000144 	.word	0x20000144
 8000a00:	20000194 	.word	0x20000194
 8000a04:	20000098 	.word	0x20000098
 8000a08:	08005a64 	.word	0x08005a64
 8000a0c:	200000c0 	.word	0x200000c0
 8000a10:	08005a78 	.word	0x08005a78
 8000a14:	08005a94 	.word	0x08005a94
 8000a18:	20000108 	.word	0x20000108
 8000a1c:	2000012c 	.word	0x2000012c
 8000a20:	200000e8 	.word	0x200000e8
 8000a24:	20000124 	.word	0x20000124
 8000a28:	2000011c 	.word	0x2000011c
 8000a2c:	2000010c 	.word	0x2000010c
 8000a30:	08005ab8 	.word	0x08005ab8

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b0b8      	sub	sp, #224	; 0xe0
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a3e:	2234      	movs	r2, #52	; 0x34
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f003 fe56 	bl	80046f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	2290      	movs	r2, #144	; 0x90
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f003 fe47 	bl	80046f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b39      	ldr	r3, [pc, #228]	; (8000b4c <SystemClock_Config+0x118>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a38      	ldr	r2, [pc, #224]	; (8000b4c <SystemClock_Config+0x118>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b36      	ldr	r3, [pc, #216]	; (8000b4c <SystemClock_Config+0x118>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a7e:	4b34      	ldr	r3, [pc, #208]	; (8000b50 <SystemClock_Config+0x11c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a33      	ldr	r2, [pc, #204]	; (8000b50 <SystemClock_Config+0x11c>)
 8000a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a88:	6013      	str	r3, [r2, #0]
 8000a8a:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <SystemClock_Config+0x11c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a96:	2302      	movs	r3, #2
 8000a98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa2:	2310      	movs	r3, #16
 8000aa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000aba:	23d8      	movs	r3, #216	; 0xd8
 8000abc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f001 fdad 	bl	8002630 <HAL_RCC_OscConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000adc:	f000 f8ae 	bl	8000c3c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ae0:	f001 fd56 	bl	8002590 <HAL_PWREx_EnableOverDrive>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000aea:	f000 f8a7 	bl	8000c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aee:	230f      	movs	r3, #15
 8000af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af4:	2302      	movs	r3, #2
 8000af6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b10:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b14:	2107      	movs	r1, #7
 8000b16:	4618      	mov	r0, r3
 8000b18:	f002 f838 	bl	8002b8c <HAL_RCC_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b22:	f000 f88b 	bl	8000c3c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	4618      	mov	r0, r3
 8000b36:	f002 f9ff 	bl	8002f38 <HAL_RCCEx_PeriphCLKConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000b40:	f000 f87c 	bl	8000c3c <Error_Handler>
  }
}
 8000b44:	bf00      	nop
 8000b46:	37e0      	adds	r7, #224	; 0xe0
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40007000 	.word	0x40007000

08000b54 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback (CAN_HandleTypeDef * hcan)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pHeader_rd, aData_rd) != HAL_OK)
 8000b5c:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000b5e:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000b60:	2100      	movs	r1, #0
 8000b62:	4816      	ldr	r0, [pc, #88]	; (8000bbc <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000b64:	f000 febd 	bl	80018e2 <HAL_CAN_GetRxMessage>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d003      	beq.n	8000b76 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		printf("HAL_CAN_GetRxMessage Error\r\n");
 8000b6e:	4814      	ldr	r0, [pc, #80]	; (8000bc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000b70:	f003 fe4e 	bl	8004810 <puts>

		}
		printf("\r\n");
	}

}
 8000b74:	e01a      	b.n	8000bac <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
		printf("%lx: ", pHeader_rd.StdId);
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000b7e:	f003 fdc1 	bl	8004704 <iprintf>
		for (i = 0; i <pHeader_rd.DLC; i++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	73fb      	strb	r3, [r7, #15]
 8000b86:	e009      	b.n	8000b9c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
			printf(" %x ", aData_rd[i]);
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000b8c:	5cd3      	ldrb	r3, [r2, r3]
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000b92:	f003 fdb7 	bl	8004704 <iprintf>
		for (i = 0; i <pHeader_rd.DLC; i++)
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	73fb      	strb	r3, [r7, #15]
 8000b9c:	7bfa      	ldrb	r2, [r7, #15]
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000ba0:	691b      	ldr	r3, [r3, #16]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d3f0      	bcc.n	8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		printf("\r\n");
 8000ba6:	4809      	ldr	r0, [pc, #36]	; (8000bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000ba8:	f003 fe32 	bl	8004810 <puts>
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000114 	.word	0x20000114
 8000bb8:	200000ec 	.word	0x200000ec
 8000bbc:	20000098 	.word	0x20000098
 8000bc0:	08005ac0 	.word	0x08005ac0
 8000bc4:	08005adc 	.word	0x08005adc
 8000bc8:	08005ae4 	.word	0x08005ae4
 8000bcc:	08005aec 	.word	0x08005aec

08000bd0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_11)
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000be0:	d10b      	bne.n	8000bfa <HAL_GPIO_EXTI_Callback+0x2a>
	{
//	HAL_CAN_AddTxMessage (&hcan1, &pHeader, aData, &pTxMailbox);
	HAL_CAN_AddTxMessage (&hcan1, &pHeader, aData_motor_of, &pTxMailbox);
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x54>)
 8000be4:	4a10      	ldr	r2, [pc, #64]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x58>)
 8000be6:	4911      	ldr	r1, [pc, #68]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000be8:	4811      	ldr	r0, [pc, #68]	; (8000c30 <HAL_GPIO_EXTI_Callback+0x60>)
 8000bea:	f000 fd9f 	bl	800172c <HAL_CAN_AddTxMessage>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	4810      	ldr	r0, [pc, #64]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x64>)
 8000bf4:	f001 fc9a 	bl	800252c <HAL_GPIO_WritePin>
	else
	{
		__NOP();
	}

}
 8000bf8:	e010      	b.n	8000c1c <HAL_GPIO_EXTI_Callback+0x4c>
	else if (GPIO_Pin == GPIO_PIN_10)
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c00:	d10b      	bne.n	8000c1a <HAL_GPIO_EXTI_Callback+0x4a>
		HAL_CAN_AddTxMessage (&hcan1, &pHeader, aData_motor_on, &pTxMailbox);
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x54>)
 8000c04:	4a0c      	ldr	r2, [pc, #48]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x68>)
 8000c06:	4909      	ldr	r1, [pc, #36]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c08:	4809      	ldr	r0, [pc, #36]	; (8000c30 <HAL_GPIO_EXTI_Callback+0x60>)
 8000c0a:	f000 fd8f 	bl	800172c <HAL_CAN_AddTxMessage>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	4808      	ldr	r0, [pc, #32]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x64>)
 8000c14:	f001 fc8a 	bl	800252c <HAL_GPIO_WritePin>
}
 8000c18:	e000      	b.n	8000c1c <HAL_GPIO_EXTI_Callback+0x4c>
		__NOP();
 8000c1a:	bf00      	nop
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200000e8 	.word	0x200000e8
 8000c28:	20000124 	.word	0x20000124
 8000c2c:	2000012c 	.word	0x2000012c
 8000c30:	20000098 	.word	0x20000098
 8000c34:	40020400 	.word	0x40020400
 8000c38:	2000011c 	.word	0x2000011c

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>

08000c46 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c4e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c52:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d013      	beq.n	8000c86 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c5e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c62:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c66:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00b      	beq.n	8000c86 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c6e:	e000      	b.n	8000c72 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c70:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c72:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d0f9      	beq.n	8000c70 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c86:	687b      	ldr	r3, [r7, #4]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <_write>:
#include "printf_SWO.h"

char test_msg[300];

int _write(int file, char *ptr, int len)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
    //return usart_write(platform_get_console(), (u8 *)ptr, len);
      int i=0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
      for(i=0 ; i<len ; i++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	e009      	b.n	8000cbe <_write+0x2a>
        ITM_SendChar((*ptr++));
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	1c5a      	adds	r2, r3, #1
 8000cae:	60ba      	str	r2, [r7, #8]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ffc7 	bl	8000c46 <ITM_SendChar>
      for(i=0 ; i<len ; i++)
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	dbf1      	blt.n	8000caa <_write+0x16>
      return len;
 8000cc6:	687b      	ldr	r3, [r7, #4]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_MspInit+0x44>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_MspInit+0x44>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_MspInit+0x44>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_MspInit+0x44>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_MspInit+0x44>)
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_MspInit+0x44>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d64:	f000 fa96 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <CAN1_RX0_IRQHandler+0x10>)
 8000d72:	f000 feee 	bl	8001b52 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000098 	.word	0x20000098

08000d80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000d84:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d88:	f001 fbea 	bl	8002560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000d8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d90:	f001 fbe6 	bl	8002560 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	e00a      	b.n	8000dc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000daa:	f3af 8000 	nop.w
 8000dae:	4601      	mov	r1, r0
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	60ba      	str	r2, [r7, #8]
 8000db6:	b2ca      	uxtb	r2, r1
 8000db8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dbf0      	blt.n	8000daa <_read+0x12>
	}

return len;
 8000dc8:	687b      	ldr	r3, [r7, #4]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
	return -1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dfa:	605a      	str	r2, [r3, #4]
	return 0;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <_isatty>:

int _isatty(int file)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
	return 1;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e44:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <_sbrk+0x5c>)
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <_sbrk+0x60>)
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d102      	bne.n	8000e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <_sbrk+0x64>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <_sbrk+0x68>)
 8000e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d207      	bcs.n	8000e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e6c:	f003 fc18 	bl	80046a0 <__errno>
 8000e70:	4603      	mov	r3, r0
 8000e72:	220c      	movs	r2, #12
 8000e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	e009      	b.n	8000e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <_sbrk+0x64>)
 8000e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20080000 	.word	0x20080000
 8000e9c:	00000400 	.word	0x00000400
 8000ea0:	2000008c 	.word	0x2000008c
 8000ea4:	20000278 	.word	0x20000278

08000ea8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <SystemInit+0x20>)
 8000eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <SystemInit+0x20>)
 8000eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	; 0x30
 8000ed0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	2224      	movs	r2, #36	; 0x24
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f003 fc0a 	bl	80046f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <MX_TIM2_Init+0xa4>)
 8000eec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ef0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ef2:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <MX_TIM2_Init+0xa4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <MX_TIM2_Init+0xa4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8000efe:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <MX_TIM2_Init+0xa4>)
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_TIM2_Init+0xa4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_TIM2_Init+0xa4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f12:	2303      	movs	r3, #3
 8000f14:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <MX_TIM2_Init+0xa4>)
 8000f3e:	f002 fc7b 	bl	8003838 <HAL_TIM_Encoder_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000f48:	f7ff fe78 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_TIM2_Init+0xa4>)
 8000f5a:	f002 fe67 	bl	8003c2c <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000f64:	f7ff fe6a 	bl	8000c3c <Error_Handler>
  }

}
 8000f68:	bf00      	nop
 8000f6a:	3730      	adds	r7, #48	; 0x30
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000194 	.word	0x20000194

08000f74 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_TIM6_Init+0x64>)
 8000f86:	4a15      	ldr	r2, [pc, #84]	; (8000fdc <MX_TIM6_Init+0x68>)
 8000f88:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <MX_TIM6_Init+0x64>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_TIM6_Init+0x64>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <MX_TIM6_Init+0x64>)
 8000f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f9c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_TIM6_Init+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000fa4:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <MX_TIM6_Init+0x64>)
 8000fa6:	f002 fbef 	bl	8003788 <HAL_TIM_Base_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000fb0:	f7ff fe44 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_TIM6_Init+0x64>)
 8000fc2:	f002 fe33 	bl	8003c2c <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000fcc:	f7ff fe36 	bl	8000c3c <Error_Handler>
  }

}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000148 	.word	0x20000148
 8000fdc:	40001000 	.word	0x40001000

08000fe0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001000:	d143      	bne.n	800108a <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001002:	4b24      	ldr	r3, [pc, #144]	; (8001094 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a23      	ldr	r2, [pc, #140]	; (8001094 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <HAL_TIM_Encoder_MspInit+0xb4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a1d      	ldr	r2, [pc, #116]	; (8001094 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a17      	ldr	r2, [pc, #92]	; (8001094 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800104a:	2301      	movs	r3, #1
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800105a:	2301      	movs	r3, #1
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001066:	f001 f8b5 	bl	80021d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800106a:	2308      	movs	r3, #8
 800106c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800107a:	2301      	movs	r3, #1
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001086:	f001 f8a5 	bl	80021d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800108a:	bf00      	nop
 800108c:	3728      	adds	r7, #40	; 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40020000 	.word	0x40020000
 800109c:	40020400 	.word	0x40020400

080010a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_TIM_Base_MspInit+0x38>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d10b      	bne.n	80010ca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_TIM_Base_MspInit+0x3c>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	4a09      	ldr	r2, [pc, #36]	; (80010dc <HAL_TIM_Base_MspInit+0x3c>)
 80010b8:	f043 0310 	orr.w	r3, r3, #16
 80010bc:	6413      	str	r3, [r2, #64]	; 0x40
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <HAL_TIM_Base_MspInit+0x3c>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f003 0310 	and.w	r3, r3, #16
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40001000 	.word	0x40001000
 80010dc:	40023800 	.word	0x40023800

080010e0 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_UART5_Init+0x58>)
 80010e6:	4a15      	ldr	r2, [pc, #84]	; (800113c <MX_UART5_Init+0x5c>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <MX_UART5_Init+0x58>)
 80010ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_UART5_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_UART5_Init+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_UART5_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_UART5_Init+0x58>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_UART5_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_UART5_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_UART5_Init+0x58>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_UART5_Init+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_UART5_Init+0x58>)
 8001124:	f002 fe10 	bl	8003d48 <HAL_UART_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800112e:	f7ff fd85 	bl	8000c3c <Error_Handler>
  }

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200001e0 	.word	0x200001e0
 800113c:	40005000 	.word	0x40005000

08001140 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a17      	ldr	r2, [pc, #92]	; (80011bc <HAL_UART_MspInit+0x7c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d128      	bne.n	80011b4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <HAL_UART_MspInit+0x80>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	4a16      	ldr	r2, [pc, #88]	; (80011c0 <HAL_UART_MspInit+0x80>)
 8001168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800116c:	6413      	str	r3, [r2, #64]	; 0x40
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_UART_MspInit+0x80>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_UART_MspInit+0x80>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <HAL_UART_MspInit+0x80>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_UART_MspInit+0x80>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001192:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011a4:	2308      	movs	r3, #8
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <HAL_UART_MspInit+0x84>)
 80011b0:	f001 f810 	bl	80021d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40005000 	.word	0x40005000
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020400 	.word	0x40020400

080011c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e4:	4c0b      	ldr	r4, [pc, #44]	; (8001214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011f2:	f7ff fe59 	bl	8000ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f6:	f003 fa59 	bl	80046ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fa:	f7ff fae7 	bl	80007cc <main>
  bx  lr    
 80011fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001200:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800120c:	08005bb0 	.word	0x08005bb0
  ldr r2, =_sbss
 8001210:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001214:	20000278 	.word	0x20000278

08001218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>

0800121a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121e:	2003      	movs	r0, #3
 8001220:	f000 ff96 	bl	8002150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001224:	2000      	movs	r0, #0
 8001226:	f000 f805 	bl	8001234 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800122a:	f7ff fd51 	bl	8000cd0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x54>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x58>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	fbb3 f3f1 	udiv	r3, r3, r1
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f000 ffb1 	bl	80021ba <HAL_SYSTICK_Config>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e00e      	b.n	8001280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d80a      	bhi.n	800127e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001268:	2200      	movs	r2, #0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f000 ff79 	bl	8002166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_InitTick+0x5c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000000 	.word	0x20000000
 800128c:	20000008 	.word	0x20000008
 8001290:	20000004 	.word	0x20000004

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20000264 	.word	0x20000264

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000264 	.word	0x20000264

080012d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e0ed      	b.n	80014c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d102      	bne.n	80012f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff f9ae 	bl	8000654 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0202 	bic.w	r2, r2, #2
 8001306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001308:	f7ff ffd8 	bl	80012bc <HAL_GetTick>
 800130c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800130e:	e012      	b.n	8001336 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001310:	f7ff ffd4 	bl	80012bc <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b0a      	cmp	r3, #10
 800131c:	d90b      	bls.n	8001336 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2205      	movs	r2, #5
 800132e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e0c5      	b.n	80014c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1e5      	bne.n	8001310 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0201 	orr.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001354:	f7ff ffb2 	bl	80012bc <HAL_GetTick>
 8001358:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800135a:	e012      	b.n	8001382 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800135c:	f7ff ffae 	bl	80012bc <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b0a      	cmp	r3, #10
 8001368:	d90b      	bls.n	8001382 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2205      	movs	r2, #5
 800137a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e09f      	b.n	80014c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0e5      	beq.n	800135c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7e1b      	ldrb	r3, [r3, #24]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d108      	bne.n	80013aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e007      	b.n	80013ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7e5b      	ldrb	r3, [r3, #25]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d108      	bne.n	80013d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e007      	b.n	80013e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7e9b      	ldrb	r3, [r3, #26]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d108      	bne.n	80013fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0220 	orr.w	r2, r2, #32
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e007      	b.n	800140e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0220 	bic.w	r2, r2, #32
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7edb      	ldrb	r3, [r3, #27]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d108      	bne.n	8001428 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0210 	bic.w	r2, r2, #16
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	e007      	b.n	8001438 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0210 	orr.w	r2, r2, #16
 8001436:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7f1b      	ldrb	r3, [r3, #28]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d108      	bne.n	8001452 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0208 	orr.w	r2, r2, #8
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e007      	b.n	8001462 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0208 	bic.w	r2, r2, #8
 8001460:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7f5b      	ldrb	r3, [r3, #29]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d108      	bne.n	800147c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 0204 	orr.w	r2, r2, #4
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	e007      	b.n	800148c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0204 	bic.w	r2, r2, #4
 800148a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	ea42 0103 	orr.w	r1, r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	1e5a      	subs	r2, r3, #1
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014e4:	7cfb      	ldrb	r3, [r7, #19]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d003      	beq.n	80014f2 <HAL_CAN_ConfigFilter+0x26>
 80014ea:	7cfb      	ldrb	r3, [r7, #19]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	f040 80c7 	bne.w	8001680 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a69      	ldr	r2, [pc, #420]	; (800169c <HAL_CAN_ConfigFilter+0x1d0>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d001      	beq.n	8001500 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80014fc:	4b68      	ldr	r3, [pc, #416]	; (80016a0 <HAL_CAN_ConfigFilter+0x1d4>)
 80014fe:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001506:	f043 0201 	orr.w	r2, r3, #1
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	4a63      	ldr	r2, [pc, #396]	; (80016a0 <HAL_CAN_ConfigFilter+0x1d4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d111      	bne.n	800153c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800151e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	431a      	orrs	r2, r3
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	f003 031f 	and.w	r3, r3, #31
 8001544:	2201      	movs	r2, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43db      	mvns	r3, r3
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d123      	bne.n	80015ae <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	43db      	mvns	r3, r3
 8001570:	401a      	ands	r2, r3
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001588:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3248      	adds	r2, #72	; 0x48
 800158e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015a2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015a4:	6979      	ldr	r1, [r7, #20]
 80015a6:	3348      	adds	r3, #72	; 0x48
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	440b      	add	r3, r1
 80015ac:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d122      	bne.n	80015fc <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	431a      	orrs	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3248      	adds	r2, #72	; 0x48
 80015dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015f2:	6979      	ldr	r1, [r7, #20]
 80015f4:	3348      	adds	r3, #72	; 0x48
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d109      	bne.n	8001618 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	43db      	mvns	r3, r3
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001616:	e007      	b.n	8001628 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	431a      	orrs	r2, r3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d109      	bne.n	8001644 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	43db      	mvns	r3, r3
 800163a:	401a      	ands	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001642:	e007      	b.n	8001654 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	431a      	orrs	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d107      	bne.n	800166c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	431a      	orrs	r2, r3
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001672:	f023 0201 	bic.w	r2, r3, #1
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	e006      	b.n	800168e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
  }
}
 800168e:	4618      	mov	r0, r3
 8001690:	371c      	adds	r7, #28
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40003400 	.word	0x40003400
 80016a0:	40006400 	.word	0x40006400

080016a4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d12e      	bne.n	8001716 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2202      	movs	r2, #2
 80016bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016d0:	f7ff fdf4 	bl	80012bc <HAL_GetTick>
 80016d4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016d6:	e012      	b.n	80016fe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016d8:	f7ff fdf0 	bl	80012bc <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b0a      	cmp	r3, #10
 80016e4:	d90b      	bls.n	80016fe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2205      	movs	r2, #5
 80016f6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e012      	b.n	8001724 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1e5      	bne.n	80016d8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e006      	b.n	8001724 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
  }
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001740:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800174a:	7ffb      	ldrb	r3, [r7, #31]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d003      	beq.n	8001758 <HAL_CAN_AddTxMessage+0x2c>
 8001750:	7ffb      	ldrb	r3, [r7, #31]
 8001752:	2b02      	cmp	r3, #2
 8001754:	f040 80b8 	bne.w	80018c8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10a      	bne.n	8001778 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001768:	2b00      	cmp	r3, #0
 800176a:	d105      	bne.n	8001778 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 80a0 	beq.w	80018b8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	0e1b      	lsrs	r3, r3, #24
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d907      	bls.n	8001798 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e09e      	b.n	80018d6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001798:	2201      	movs	r2, #1
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	409a      	lsls	r2, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10d      	bne.n	80017c6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017b4:	68f9      	ldr	r1, [r7, #12]
 80017b6:	6809      	ldr	r1, [r1, #0]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3318      	adds	r3, #24
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	440b      	add	r3, r1
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	e00f      	b.n	80017e6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017d0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017d6:	68f9      	ldr	r1, [r7, #12]
 80017d8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80017da:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	3318      	adds	r3, #24
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	440b      	add	r3, r1
 80017e4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6819      	ldr	r1, [r3, #0]
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	691a      	ldr	r2, [r3, #16]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	3318      	adds	r3, #24
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	440b      	add	r3, r1
 80017f6:	3304      	adds	r3, #4
 80017f8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	7d1b      	ldrb	r3, [r3, #20]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d111      	bne.n	8001826 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	3318      	adds	r3, #24
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	4413      	add	r3, r2
 800180e:	3304      	adds	r3, #4
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	6811      	ldr	r1, [r2, #0]
 8001816:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3318      	adds	r3, #24
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	440b      	add	r3, r1
 8001822:	3304      	adds	r3, #4
 8001824:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3307      	adds	r3, #7
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	061a      	lsls	r2, r3, #24
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3306      	adds	r3, #6
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	041b      	lsls	r3, r3, #16
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3305      	adds	r3, #5
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	4313      	orrs	r3, r2
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	3204      	adds	r2, #4
 8001846:	7812      	ldrb	r2, [r2, #0]
 8001848:	4610      	mov	r0, r2
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	6811      	ldr	r1, [r2, #0]
 800184e:	ea43 0200 	orr.w	r2, r3, r0
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	440b      	add	r3, r1
 8001858:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800185c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3303      	adds	r3, #3
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	061a      	lsls	r2, r3, #24
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3302      	adds	r3, #2
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	041b      	lsls	r3, r3, #16
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3301      	adds	r3, #1
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	4313      	orrs	r3, r2
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	7812      	ldrb	r2, [r2, #0]
 800187e:	4610      	mov	r0, r2
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	6811      	ldr	r1, [r2, #0]
 8001884:	ea43 0200 	orr.w	r2, r3, r0
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	440b      	add	r3, r1
 800188e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001892:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3318      	adds	r3, #24
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	4413      	add	r3, r2
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	6811      	ldr	r1, [r2, #0]
 80018a6:	f043 0201 	orr.w	r2, r3, #1
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3318      	adds	r3, #24
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	440b      	add	r3, r1
 80018b2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	e00e      	b.n	80018d6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e006      	b.n	80018d6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
  }
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80018e2:	b480      	push	{r7}
 80018e4:	b087      	sub	sp, #28
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	60f8      	str	r0, [r7, #12]
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d003      	beq.n	8001906 <HAL_CAN_GetRxMessage+0x24>
 80018fe:	7dfb      	ldrb	r3, [r7, #23]
 8001900:	2b02      	cmp	r3, #2
 8001902:	f040 80f3 	bne.w	8001aec <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10e      	bne.n	800192a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d116      	bne.n	8001948 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e0e7      	b.n	8001afa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d107      	bne.n	8001948 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0d8      	b.n	8001afa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	331b      	adds	r3, #27
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	4413      	add	r3, r2
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0204 	and.w	r2, r3, #4
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10c      	bne.n	8001980 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	331b      	adds	r3, #27
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	4413      	add	r3, r2
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	0d5b      	lsrs	r3, r3, #21
 8001976:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	e00b      	b.n	8001998 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	331b      	adds	r3, #27
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	4413      	add	r3, r2
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	08db      	lsrs	r3, r3, #3
 8001990:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	331b      	adds	r3, #27
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	4413      	add	r3, r2
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0202 	and.w	r2, r3, #2
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	331b      	adds	r3, #27
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	4413      	add	r3, r2
 80019ba:	3304      	adds	r3, #4
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 020f 	and.w	r2, r3, #15
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	331b      	adds	r3, #27
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	4413      	add	r3, r2
 80019d2:	3304      	adds	r3, #4
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	331b      	adds	r3, #27
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	4413      	add	r3, r2
 80019ea:	3304      	adds	r3, #4
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	0c1b      	lsrs	r3, r3, #16
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	4413      	add	r3, r2
 8001a00:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	4413      	add	r3, r2
 8001a16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0a1a      	lsrs	r2, r3, #8
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	3301      	adds	r3, #1
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	4413      	add	r3, r2
 8001a30:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	0c1a      	lsrs	r2, r3, #16
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	4413      	add	r3, r2
 8001a4a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0e1a      	lsrs	r2, r3, #24
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	3303      	adds	r3, #3
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	4413      	add	r3, r2
 8001a64:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	0a1a      	lsrs	r2, r3, #8
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	3305      	adds	r3, #5
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	0c1a      	lsrs	r2, r3, #16
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	3306      	adds	r3, #6
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	4413      	add	r3, r2
 8001ab0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	0e1a      	lsrs	r2, r3, #24
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	3307      	adds	r3, #7
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d108      	bne.n	8001ad8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 0220 	orr.w	r2, r2, #32
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	e007      	b.n	8001ae8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0220 	orr.w	r2, r2, #32
 8001ae6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e006      	b.n	8001afa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
  }
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	371c      	adds	r7, #28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b16:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d002      	beq.n	8001b24 <HAL_CAN_ActivateNotification+0x1e>
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d109      	bne.n	8001b38 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6959      	ldr	r1, [r3, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	e006      	b.n	8001b46 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
  }
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b08a      	sub	sp, #40	; 0x28
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d07c      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d023      	beq.n	8001bea <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f983 	bl	8001ec0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001bba:	e016      	b.n	8001bea <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bce:	e00c      	b.n	8001bea <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d004      	beq.n	8001be4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
 8001be2:	e002      	b.n	8001bea <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f989 	bl	8001efc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d024      	beq.n	8001c3e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bfc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f963 	bl	8001ed4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c0e:	e016      	b.n	8001c3e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d004      	beq.n	8001c24 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
 8001c22:	e00c      	b.n	8001c3e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d004      	beq.n	8001c38 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
 8001c36:	e002      	b.n	8001c3e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f969 	bl	8001f10 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d024      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f943 	bl	8001ee8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c62:	e016      	b.n	8001c92 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d004      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
 8001c76:	e00c      	b.n	8001c92 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d004      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8a:	e002      	b.n	8001c92 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f949 	bl	8001f24 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00c      	beq.n	8001cb6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2210      	movs	r2, #16
 8001cb4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00b      	beq.n	8001cd8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d006      	beq.n	8001cd8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2208      	movs	r2, #8
 8001cd0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f930 	bl	8001f38 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d009      	beq.n	8001cf6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7fe ff2f 	bl	8000b54 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00c      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2210      	movs	r2, #16
 8001d18:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	f003 0320 	and.w	r3, r3, #32
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00b      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d006      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2208      	movs	r2, #8
 8001d34:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f912 	bl	8001f60 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d009      	beq.n	8001d5a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f8f9 	bl	8001f4c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00b      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d006      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2210      	movs	r2, #16
 8001d74:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f8fc 	bl	8001f74 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d006      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2208      	movs	r2, #8
 8001d96:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f8f5 	bl	8001f88 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d07b      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d072      	beq.n	8001e98 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d008      	beq.n	8001e06 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d043      	beq.n	8001e98 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d03e      	beq.n	8001e98 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e20:	2b60      	cmp	r3, #96	; 0x60
 8001e22:	d02b      	beq.n	8001e7c <HAL_CAN_IRQHandler+0x32a>
 8001e24:	2b60      	cmp	r3, #96	; 0x60
 8001e26:	d82e      	bhi.n	8001e86 <HAL_CAN_IRQHandler+0x334>
 8001e28:	2b50      	cmp	r3, #80	; 0x50
 8001e2a:	d022      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x320>
 8001e2c:	2b50      	cmp	r3, #80	; 0x50
 8001e2e:	d82a      	bhi.n	8001e86 <HAL_CAN_IRQHandler+0x334>
 8001e30:	2b40      	cmp	r3, #64	; 0x40
 8001e32:	d019      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x316>
 8001e34:	2b40      	cmp	r3, #64	; 0x40
 8001e36:	d826      	bhi.n	8001e86 <HAL_CAN_IRQHandler+0x334>
 8001e38:	2b30      	cmp	r3, #48	; 0x30
 8001e3a:	d010      	beq.n	8001e5e <HAL_CAN_IRQHandler+0x30c>
 8001e3c:	2b30      	cmp	r3, #48	; 0x30
 8001e3e:	d822      	bhi.n	8001e86 <HAL_CAN_IRQHandler+0x334>
 8001e40:	2b10      	cmp	r3, #16
 8001e42:	d002      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x2f8>
 8001e44:	2b20      	cmp	r3, #32
 8001e46:	d005      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e48:	e01d      	b.n	8001e86 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	f043 0308 	orr.w	r3, r3, #8
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e52:	e019      	b.n	8001e88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	f043 0310 	orr.w	r3, r3, #16
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e5c:	e014      	b.n	8001e88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	f043 0320 	orr.w	r3, r3, #32
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e66:	e00f      	b.n	8001e88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e70:	e00a      	b.n	8001e88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e7a:	e005      	b.n	8001e88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e84:	e000      	b.n	8001e88 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e86:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e96:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d008      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f872 	bl	8001f9c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001eb8:	bf00      	nop
 8001eba:	3728      	adds	r7, #40	; 0x28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <__NVIC_SetPriorityGrouping>:
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <__NVIC_SetPriorityGrouping+0x40>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fde:	4a04      	ldr	r2, [pc, #16]	; (8001ff0 <__NVIC_SetPriorityGrouping+0x40>)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	60d3      	str	r3, [r2, #12]
}
 8001fe4:	bf00      	nop
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00
 8001ff4:	05fa0000 	.word	0x05fa0000

08001ff8 <__NVIC_GetPriorityGrouping>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <__NVIC_GetPriorityGrouping+0x18>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	f003 0307 	and.w	r3, r3, #7
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_EnableIRQ>:
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	2b00      	cmp	r3, #0
 8002024:	db0b      	blt.n	800203e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	f003 021f 	and.w	r2, r3, #31
 800202c:	4907      	ldr	r1, [pc, #28]	; (800204c <__NVIC_EnableIRQ+0x38>)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	2001      	movs	r0, #1
 8002036:	fa00 f202 	lsl.w	r2, r0, r2
 800203a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000e100 	.word	0xe000e100

08002050 <__NVIC_SetPriority>:
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	6039      	str	r1, [r7, #0]
 800205a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002060:	2b00      	cmp	r3, #0
 8002062:	db0a      	blt.n	800207a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	b2da      	uxtb	r2, r3
 8002068:	490c      	ldr	r1, [pc, #48]	; (800209c <__NVIC_SetPriority+0x4c>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	0112      	lsls	r2, r2, #4
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	440b      	add	r3, r1
 8002074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002078:	e00a      	b.n	8002090 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4908      	ldr	r1, [pc, #32]	; (80020a0 <__NVIC_SetPriority+0x50>)
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	3b04      	subs	r3, #4
 8002088:	0112      	lsls	r2, r2, #4
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	440b      	add	r3, r1
 800208e:	761a      	strb	r2, [r3, #24]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000e100 	.word	0xe000e100
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <NVIC_EncodePriority>:
{
 80020a4:	b480      	push	{r7}
 80020a6:	b089      	sub	sp, #36	; 0x24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f1c3 0307 	rsb	r3, r3, #7
 80020be:	2b04      	cmp	r3, #4
 80020c0:	bf28      	it	cs
 80020c2:	2304      	movcs	r3, #4
 80020c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3304      	adds	r3, #4
 80020ca:	2b06      	cmp	r3, #6
 80020cc:	d902      	bls.n	80020d4 <NVIC_EncodePriority+0x30>
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3b03      	subs	r3, #3
 80020d2:	e000      	b.n	80020d6 <NVIC_EncodePriority+0x32>
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	f04f 32ff 	mov.w	r2, #4294967295
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43da      	mvns	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	401a      	ands	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ec:	f04f 31ff 	mov.w	r1, #4294967295
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	43d9      	mvns	r1, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	4313      	orrs	r3, r2
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3724      	adds	r7, #36	; 0x24
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <SysTick_Config>:
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800211c:	d301      	bcc.n	8002122 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800211e:	2301      	movs	r3, #1
 8002120:	e00f      	b.n	8002142 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002122:	4a0a      	ldr	r2, [pc, #40]	; (800214c <SysTick_Config+0x40>)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3b01      	subs	r3, #1
 8002128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800212a:	210f      	movs	r1, #15
 800212c:	f04f 30ff 	mov.w	r0, #4294967295
 8002130:	f7ff ff8e 	bl	8002050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <SysTick_Config+0x40>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800213a:	4b04      	ldr	r3, [pc, #16]	; (800214c <SysTick_Config+0x40>)
 800213c:	2207      	movs	r2, #7
 800213e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	e000e010 	.word	0xe000e010

08002150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff ff29 	bl	8001fb0 <__NVIC_SetPriorityGrouping>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002178:	f7ff ff3e 	bl	8001ff8 <__NVIC_GetPriorityGrouping>
 800217c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	6978      	ldr	r0, [r7, #20]
 8002184:	f7ff ff8e 	bl	80020a4 <NVIC_EncodePriority>
 8002188:	4602      	mov	r2, r0
 800218a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff5d 	bl	8002050 <__NVIC_SetPriority>
}
 8002196:	bf00      	nop
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff31 	bl	8002014 <__NVIC_EnableIRQ>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ffa2 	bl	800210c <SysTick_Config>
 80021c8:	4603      	mov	r3, r0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	; 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	e175      	b.n	80024e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80021f4:	2201      	movs	r2, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	429a      	cmp	r2, r3
 800220e:	f040 8164 	bne.w	80024da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d00b      	beq.n	8002232 <HAL_GPIO_Init+0x5e>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d007      	beq.n	8002232 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002226:	2b11      	cmp	r3, #17
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b12      	cmp	r3, #18
 8002230:	d130      	bne.n	8002294 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002268:	2201      	movs	r2, #1
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 0201 	and.w	r2, r3, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x100>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b12      	cmp	r3, #18
 80022d2:	d123      	bne.n	800231c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	08da      	lsrs	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3208      	adds	r2, #8
 80022dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	220f      	movs	r2, #15
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	08da      	lsrs	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3208      	adds	r2, #8
 8002316:	69b9      	ldr	r1, [r7, #24]
 8002318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0203 	and.w	r2, r3, #3
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80be 	beq.w	80024da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	4b66      	ldr	r3, [pc, #408]	; (80024f8 <HAL_GPIO_Init+0x324>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4a65      	ldr	r2, [pc, #404]	; (80024f8 <HAL_GPIO_Init+0x324>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	4b63      	ldr	r3, [pc, #396]	; (80024f8 <HAL_GPIO_Init+0x324>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002376:	4a61      	ldr	r2, [pc, #388]	; (80024fc <HAL_GPIO_Init+0x328>)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a58      	ldr	r2, [pc, #352]	; (8002500 <HAL_GPIO_Init+0x32c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d037      	beq.n	8002412 <HAL_GPIO_Init+0x23e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a57      	ldr	r2, [pc, #348]	; (8002504 <HAL_GPIO_Init+0x330>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d031      	beq.n	800240e <HAL_GPIO_Init+0x23a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a56      	ldr	r2, [pc, #344]	; (8002508 <HAL_GPIO_Init+0x334>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d02b      	beq.n	800240a <HAL_GPIO_Init+0x236>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a55      	ldr	r2, [pc, #340]	; (800250c <HAL_GPIO_Init+0x338>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d025      	beq.n	8002406 <HAL_GPIO_Init+0x232>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a54      	ldr	r2, [pc, #336]	; (8002510 <HAL_GPIO_Init+0x33c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d01f      	beq.n	8002402 <HAL_GPIO_Init+0x22e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a53      	ldr	r2, [pc, #332]	; (8002514 <HAL_GPIO_Init+0x340>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d019      	beq.n	80023fe <HAL_GPIO_Init+0x22a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a52      	ldr	r2, [pc, #328]	; (8002518 <HAL_GPIO_Init+0x344>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_GPIO_Init+0x226>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a51      	ldr	r2, [pc, #324]	; (800251c <HAL_GPIO_Init+0x348>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00d      	beq.n	80023f6 <HAL_GPIO_Init+0x222>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a50      	ldr	r2, [pc, #320]	; (8002520 <HAL_GPIO_Init+0x34c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d007      	beq.n	80023f2 <HAL_GPIO_Init+0x21e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4f      	ldr	r2, [pc, #316]	; (8002524 <HAL_GPIO_Init+0x350>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d101      	bne.n	80023ee <HAL_GPIO_Init+0x21a>
 80023ea:	2309      	movs	r3, #9
 80023ec:	e012      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023ee:	230a      	movs	r3, #10
 80023f0:	e010      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023f2:	2308      	movs	r3, #8
 80023f4:	e00e      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023f6:	2307      	movs	r3, #7
 80023f8:	e00c      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023fa:	2306      	movs	r3, #6
 80023fc:	e00a      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023fe:	2305      	movs	r3, #5
 8002400:	e008      	b.n	8002414 <HAL_GPIO_Init+0x240>
 8002402:	2304      	movs	r3, #4
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x240>
 8002406:	2303      	movs	r3, #3
 8002408:	e004      	b.n	8002414 <HAL_GPIO_Init+0x240>
 800240a:	2302      	movs	r3, #2
 800240c:	e002      	b.n	8002414 <HAL_GPIO_Init+0x240>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_GPIO_Init+0x240>
 8002412:	2300      	movs	r3, #0
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	f002 0203 	and.w	r2, r2, #3
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	4093      	lsls	r3, r2
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002424:	4935      	ldr	r1, [pc, #212]	; (80024fc <HAL_GPIO_Init+0x328>)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	3302      	adds	r3, #2
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002432:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <HAL_GPIO_Init+0x354>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002456:	4a34      	ldr	r2, [pc, #208]	; (8002528 <HAL_GPIO_Init+0x354>)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800245c:	4b32      	ldr	r3, [pc, #200]	; (8002528 <HAL_GPIO_Init+0x354>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002480:	4a29      	ldr	r2, [pc, #164]	; (8002528 <HAL_GPIO_Init+0x354>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002486:	4b28      	ldr	r3, [pc, #160]	; (8002528 <HAL_GPIO_Init+0x354>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024aa:	4a1f      	ldr	r2, [pc, #124]	; (8002528 <HAL_GPIO_Init+0x354>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b0:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <HAL_GPIO_Init+0x354>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d4:	4a14      	ldr	r2, [pc, #80]	; (8002528 <HAL_GPIO_Init+0x354>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3301      	adds	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b0f      	cmp	r3, #15
 80024e4:	f67f ae86 	bls.w	80021f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	3724      	adds	r7, #36	; 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40013800 	.word	0x40013800
 8002500:	40020000 	.word	0x40020000
 8002504:	40020400 	.word	0x40020400
 8002508:	40020800 	.word	0x40020800
 800250c:	40020c00 	.word	0x40020c00
 8002510:	40021000 	.word	0x40021000
 8002514:	40021400 	.word	0x40021400
 8002518:	40021800 	.word	0x40021800
 800251c:	40021c00 	.word	0x40021c00
 8002520:	40022000 	.word	0x40022000
 8002524:	40022400 	.word	0x40022400
 8002528:	40013c00 	.word	0x40013c00

0800252c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
 8002538:	4613      	mov	r3, r2
 800253a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800253c:	787b      	ldrb	r3, [r7, #1]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002548:	e003      	b.n	8002552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800254a:	887b      	ldrh	r3, [r7, #2]
 800254c:	041a      	lsls	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	619a      	str	r2, [r3, #24]
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800256a:	4b08      	ldr	r3, [pc, #32]	; (800258c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	4013      	ands	r3, r2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d006      	beq.n	8002584 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002576:	4a05      	ldr	r2, [pc, #20]	; (800258c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fb26 	bl	8000bd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40013c00 	.word	0x40013c00

08002590 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800259a:	4b23      	ldr	r3, [pc, #140]	; (8002628 <HAL_PWREx_EnableOverDrive+0x98>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	4a22      	ldr	r2, [pc, #136]	; (8002628 <HAL_PWREx_EnableOverDrive+0x98>)
 80025a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a4:	6413      	str	r3, [r2, #64]	; 0x40
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <HAL_PWREx_EnableOverDrive+0x98>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80025b2:	4b1e      	ldr	r3, [pc, #120]	; (800262c <HAL_PWREx_EnableOverDrive+0x9c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1d      	ldr	r2, [pc, #116]	; (800262c <HAL_PWREx_EnableOverDrive+0x9c>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025be:	f7fe fe7d 	bl	80012bc <HAL_GetTick>
 80025c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025c4:	e009      	b.n	80025da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025c6:	f7fe fe79 	bl	80012bc <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025d4:	d901      	bls.n	80025da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e022      	b.n	8002620 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025da:	4b14      	ldr	r3, [pc, #80]	; (800262c <HAL_PWREx_EnableOverDrive+0x9c>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e6:	d1ee      	bne.n	80025c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80025e8:	4b10      	ldr	r3, [pc, #64]	; (800262c <HAL_PWREx_EnableOverDrive+0x9c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a0f      	ldr	r2, [pc, #60]	; (800262c <HAL_PWREx_EnableOverDrive+0x9c>)
 80025ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025f4:	f7fe fe62 	bl	80012bc <HAL_GetTick>
 80025f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025fa:	e009      	b.n	8002610 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025fc:	f7fe fe5e 	bl	80012bc <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800260a:	d901      	bls.n	8002610 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e007      	b.n	8002620 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800261c:	d1ee      	bne.n	80025fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40023800 	.word	0x40023800
 800262c:	40007000 	.word	0x40007000

08002630 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002638:	2300      	movs	r3, #0
 800263a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e29b      	b.n	8002b7e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 8087 	beq.w	8002762 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002654:	4b96      	ldr	r3, [pc, #600]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b04      	cmp	r3, #4
 800265e:	d00c      	beq.n	800267a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002660:	4b93      	ldr	r3, [pc, #588]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 030c 	and.w	r3, r3, #12
 8002668:	2b08      	cmp	r3, #8
 800266a:	d112      	bne.n	8002692 <HAL_RCC_OscConfig+0x62>
 800266c:	4b90      	ldr	r3, [pc, #576]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002674:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002678:	d10b      	bne.n	8002692 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267a:	4b8d      	ldr	r3, [pc, #564]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d06c      	beq.n	8002760 <HAL_RCC_OscConfig+0x130>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d168      	bne.n	8002760 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e275      	b.n	8002b7e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269a:	d106      	bne.n	80026aa <HAL_RCC_OscConfig+0x7a>
 800269c:	4b84      	ldr	r3, [pc, #528]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a83      	ldr	r2, [pc, #524]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 80026a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	e02e      	b.n	8002708 <HAL_RCC_OscConfig+0xd8>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10c      	bne.n	80026cc <HAL_RCC_OscConfig+0x9c>
 80026b2:	4b7f      	ldr	r3, [pc, #508]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a7e      	ldr	r2, [pc, #504]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 80026b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	4b7c      	ldr	r3, [pc, #496]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a7b      	ldr	r2, [pc, #492]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 80026c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e01d      	b.n	8002708 <HAL_RCC_OscConfig+0xd8>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0xc0>
 80026d6:	4b76      	ldr	r3, [pc, #472]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a75      	ldr	r2, [pc, #468]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 80026dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b73      	ldr	r3, [pc, #460]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a72      	ldr	r2, [pc, #456]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e00b      	b.n	8002708 <HAL_RCC_OscConfig+0xd8>
 80026f0:	4b6f      	ldr	r3, [pc, #444]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a6e      	ldr	r2, [pc, #440]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 80026f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b6c      	ldr	r3, [pc, #432]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a6b      	ldr	r2, [pc, #428]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 8002702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d013      	beq.n	8002738 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe fdd4 	bl	80012bc <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002718:	f7fe fdd0 	bl	80012bc <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e229      	b.n	8002b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	4b61      	ldr	r3, [pc, #388]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0xe8>
 8002736:	e014      	b.n	8002762 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe fdc0 	bl	80012bc <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002740:	f7fe fdbc 	bl	80012bc <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e215      	b.n	8002b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002752:	4b57      	ldr	r3, [pc, #348]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x110>
 800275e:	e000      	b.n	8002762 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d069      	beq.n	8002842 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800276e:	4b50      	ldr	r3, [pc, #320]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00b      	beq.n	8002792 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800277a:	4b4d      	ldr	r3, [pc, #308]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b08      	cmp	r3, #8
 8002784:	d11c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x190>
 8002786:	4b4a      	ldr	r3, [pc, #296]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d116      	bne.n	80027c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002792:	4b47      	ldr	r3, [pc, #284]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_RCC_OscConfig+0x17a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d001      	beq.n	80027aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e1e9      	b.n	8002b7e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027aa:	4b41      	ldr	r3, [pc, #260]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	493d      	ldr	r1, [pc, #244]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027be:	e040      	b.n	8002842 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d023      	beq.n	8002810 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c8:	4b39      	ldr	r3, [pc, #228]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a38      	ldr	r2, [pc, #224]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7fe fd72 	bl	80012bc <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027dc:	f7fe fd6e 	bl	80012bc <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e1c7      	b.n	8002b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ee:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fa:	4b2d      	ldr	r3, [pc, #180]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4929      	ldr	r1, [pc, #164]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]
 800280e:	e018      	b.n	8002842 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002810:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a26      	ldr	r2, [pc, #152]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 8002816:	f023 0301 	bic.w	r3, r3, #1
 800281a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7fe fd4e 	bl	80012bc <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002824:	f7fe fd4a 	bl	80012bc <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e1a3      	b.n	8002b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002836:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d038      	beq.n	80028c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d019      	beq.n	800288a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 8002858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285a:	4a15      	ldr	r2, [pc, #84]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002862:	f7fe fd2b 	bl	80012bc <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286a:	f7fe fd27 	bl	80012bc <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e180      	b.n	8002b7e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 800287e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x23a>
 8002888:	e01a      	b.n	80028c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 800288c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288e:	4a08      	ldr	r2, [pc, #32]	; (80028b0 <HAL_RCC_OscConfig+0x280>)
 8002890:	f023 0301 	bic.w	r3, r3, #1
 8002894:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002896:	f7fe fd11 	bl	80012bc <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289c:	e00a      	b.n	80028b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800289e:	f7fe fd0d 	bl	80012bc <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d903      	bls.n	80028b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e166      	b.n	8002b7e <HAL_RCC_OscConfig+0x54e>
 80028b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b4:	4b92      	ldr	r3, [pc, #584]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 80028b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1ee      	bne.n	800289e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80a4 	beq.w	8002a16 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ce:	4b8c      	ldr	r3, [pc, #560]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10d      	bne.n	80028f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80028da:	4b89      	ldr	r3, [pc, #548]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	4a88      	ldr	r2, [pc, #544]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 80028e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e4:	6413      	str	r3, [r2, #64]	; 0x40
 80028e6:	4b86      	ldr	r3, [pc, #536]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f2:	2301      	movs	r3, #1
 80028f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028f6:	4b83      	ldr	r3, [pc, #524]	; (8002b04 <HAL_RCC_OscConfig+0x4d4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d118      	bne.n	8002934 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002902:	4b80      	ldr	r3, [pc, #512]	; (8002b04 <HAL_RCC_OscConfig+0x4d4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a7f      	ldr	r2, [pc, #508]	; (8002b04 <HAL_RCC_OscConfig+0x4d4>)
 8002908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800290e:	f7fe fcd5 	bl	80012bc <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002916:	f7fe fcd1 	bl	80012bc <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b64      	cmp	r3, #100	; 0x64
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e12a      	b.n	8002b7e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002928:	4b76      	ldr	r3, [pc, #472]	; (8002b04 <HAL_RCC_OscConfig+0x4d4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d106      	bne.n	800294a <HAL_RCC_OscConfig+0x31a>
 800293c:	4b70      	ldr	r3, [pc, #448]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002940:	4a6f      	ldr	r2, [pc, #444]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6713      	str	r3, [r2, #112]	; 0x70
 8002948:	e02d      	b.n	80029a6 <HAL_RCC_OscConfig+0x376>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0x33c>
 8002952:	4b6b      	ldr	r3, [pc, #428]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002956:	4a6a      	ldr	r2, [pc, #424]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002958:	f023 0301 	bic.w	r3, r3, #1
 800295c:	6713      	str	r3, [r2, #112]	; 0x70
 800295e:	4b68      	ldr	r3, [pc, #416]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002962:	4a67      	ldr	r2, [pc, #412]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002964:	f023 0304 	bic.w	r3, r3, #4
 8002968:	6713      	str	r3, [r2, #112]	; 0x70
 800296a:	e01c      	b.n	80029a6 <HAL_RCC_OscConfig+0x376>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b05      	cmp	r3, #5
 8002972:	d10c      	bne.n	800298e <HAL_RCC_OscConfig+0x35e>
 8002974:	4b62      	ldr	r3, [pc, #392]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002978:	4a61      	ldr	r2, [pc, #388]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	6713      	str	r3, [r2, #112]	; 0x70
 8002980:	4b5f      	ldr	r3, [pc, #380]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002984:	4a5e      	ldr	r2, [pc, #376]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6713      	str	r3, [r2, #112]	; 0x70
 800298c:	e00b      	b.n	80029a6 <HAL_RCC_OscConfig+0x376>
 800298e:	4b5c      	ldr	r3, [pc, #368]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	4a5b      	ldr	r2, [pc, #364]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	6713      	str	r3, [r2, #112]	; 0x70
 800299a:	4b59      	ldr	r3, [pc, #356]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	4a58      	ldr	r2, [pc, #352]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 80029a0:	f023 0304 	bic.w	r3, r3, #4
 80029a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d015      	beq.n	80029da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ae:	f7fe fc85 	bl	80012bc <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b4:	e00a      	b.n	80029cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b6:	f7fe fc81 	bl	80012bc <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e0d8      	b.n	8002b7e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029cc:	4b4c      	ldr	r3, [pc, #304]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0ee      	beq.n	80029b6 <HAL_RCC_OscConfig+0x386>
 80029d8:	e014      	b.n	8002a04 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029da:	f7fe fc6f 	bl	80012bc <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e2:	f7fe fc6b 	bl	80012bc <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e0c2      	b.n	8002b7e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f8:	4b41      	ldr	r3, [pc, #260]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 80029fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1ee      	bne.n	80029e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a04:	7dfb      	ldrb	r3, [r7, #23]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d105      	bne.n	8002a16 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0a:	4b3d      	ldr	r3, [pc, #244]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	4a3c      	ldr	r2, [pc, #240]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 80ae 	beq.w	8002b7c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a20:	4b37      	ldr	r3, [pc, #220]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 030c 	and.w	r3, r3, #12
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d06d      	beq.n	8002b08 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d14b      	bne.n	8002acc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a34:	4b32      	ldr	r3, [pc, #200]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a31      	ldr	r2, [pc, #196]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7fe fc3c 	bl	80012bc <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a48:	f7fe fc38 	bl	80012bc <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e091      	b.n	8002b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5a:	4b29      	ldr	r3, [pc, #164]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69da      	ldr	r2, [r3, #28]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	019b      	lsls	r3, r3, #6
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	041b      	lsls	r3, r3, #16
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	061b      	lsls	r3, r3, #24
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	071b      	lsls	r3, r3, #28
 8002a92:	491b      	ldr	r1, [pc, #108]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a98:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a18      	ldr	r2, [pc, #96]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa4:	f7fe fc0a 	bl	80012bc <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aac:	f7fe fc06 	bl	80012bc <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e05f      	b.n	8002b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0x47c>
 8002aca:	e057      	b.n	8002b7c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0b      	ldr	r2, [pc, #44]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad8:	f7fe fbf0 	bl	80012bc <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7fe fbec 	bl	80012bc <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e045      	b.n	8002b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af2:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <HAL_RCC_OscConfig+0x4d0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x4b0>
 8002afe:	e03d      	b.n	8002b7c <HAL_RCC_OscConfig+0x54c>
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b08:	4b1f      	ldr	r3, [pc, #124]	; (8002b88 <HAL_RCC_OscConfig+0x558>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d030      	beq.n	8002b78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d129      	bne.n	8002b78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d122      	bne.n	8002b78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b38:	4013      	ands	r3, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b3e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d119      	bne.n	8002b78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	085b      	lsrs	r3, r3, #1
 8002b50:	3b01      	subs	r3, #1
 8002b52:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d10f      	bne.n	8002b78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d107      	bne.n	8002b78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800

08002b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0d0      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b6a      	ldr	r3, [pc, #424]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d910      	bls.n	8002bd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b67      	ldr	r3, [pc, #412]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 020f 	bic.w	r2, r3, #15
 8002bba:	4965      	ldr	r1, [pc, #404]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b63      	ldr	r3, [pc, #396]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0b8      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d020      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bec:	4b59      	ldr	r3, [pc, #356]	; (8002d54 <HAL_RCC_ClockConfig+0x1c8>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4a58      	ldr	r2, [pc, #352]	; (8002d54 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bf6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c04:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_RCC_ClockConfig+0x1c8>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	4a52      	ldr	r2, [pc, #328]	; (8002d54 <HAL_RCC_ClockConfig+0x1c8>)
 8002c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c10:	4b50      	ldr	r3, [pc, #320]	; (8002d54 <HAL_RCC_ClockConfig+0x1c8>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	494d      	ldr	r1, [pc, #308]	; (8002d54 <HAL_RCC_ClockConfig+0x1c8>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d040      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <HAL_RCC_ClockConfig+0x1c8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d115      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e07f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d107      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4e:	4b41      	ldr	r3, [pc, #260]	; (8002d54 <HAL_RCC_ClockConfig+0x1c8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e073      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5e:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <HAL_RCC_ClockConfig+0x1c8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e06b      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c6e:	4b39      	ldr	r3, [pc, #228]	; (8002d54 <HAL_RCC_ClockConfig+0x1c8>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f023 0203 	bic.w	r2, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4936      	ldr	r1, [pc, #216]	; (8002d54 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c80:	f7fe fb1c 	bl	80012bc <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c88:	f7fe fb18 	bl	80012bc <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e053      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 020c 	and.w	r2, r3, #12
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d1eb      	bne.n	8002c88 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b27      	ldr	r3, [pc, #156]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d210      	bcs.n	8002ce0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b24      	ldr	r3, [pc, #144]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 020f 	bic.w	r2, r3, #15
 8002cc6:	4922      	ldr	r1, [pc, #136]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e032      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cec:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_RCC_ClockConfig+0x1c8>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4916      	ldr	r1, [pc, #88]	; (8002d54 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	490e      	ldr	r1, [pc, #56]	; (8002d54 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d1e:	f000 f821 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 8002d22:	4602      	mov	r2, r0
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_RCC_ClockConfig+0x1c8>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	490a      	ldr	r1, [pc, #40]	; (8002d58 <HAL_RCC_ClockConfig+0x1cc>)
 8002d30:	5ccb      	ldrb	r3, [r1, r3]
 8002d32:	fa22 f303 	lsr.w	r3, r2, r3
 8002d36:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <HAL_RCC_ClockConfig+0x1d0>)
 8002d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCC_ClockConfig+0x1d4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe fa78 	bl	8001234 <HAL_InitTick>

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023c00 	.word	0x40023c00
 8002d54:	40023800 	.word	0x40023800
 8002d58:	08005af0 	.word	0x08005af0
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	20000004 	.word	0x20000004

08002d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d64:	b5b0      	push	{r4, r5, r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	6079      	str	r1, [r7, #4]
 8002d6e:	2100      	movs	r1, #0
 8002d70:	60f9      	str	r1, [r7, #12]
 8002d72:	2100      	movs	r1, #0
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002d76:	2100      	movs	r1, #0
 8002d78:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d7a:	4952      	ldr	r1, [pc, #328]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d7c:	6889      	ldr	r1, [r1, #8]
 8002d7e:	f001 010c 	and.w	r1, r1, #12
 8002d82:	2908      	cmp	r1, #8
 8002d84:	d00d      	beq.n	8002da2 <HAL_RCC_GetSysClockFreq+0x3e>
 8002d86:	2908      	cmp	r1, #8
 8002d88:	f200 8094 	bhi.w	8002eb4 <HAL_RCC_GetSysClockFreq+0x150>
 8002d8c:	2900      	cmp	r1, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_RCC_GetSysClockFreq+0x32>
 8002d90:	2904      	cmp	r1, #4
 8002d92:	d003      	beq.n	8002d9c <HAL_RCC_GetSysClockFreq+0x38>
 8002d94:	e08e      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d96:	4b4c      	ldr	r3, [pc, #304]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002d98:	60bb      	str	r3, [r7, #8]
      break;
 8002d9a:	e08e      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d9c:	4b4b      	ldr	r3, [pc, #300]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x168>)
 8002d9e:	60bb      	str	r3, [r7, #8]
      break;
 8002da0:	e08b      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002da2:	4948      	ldr	r1, [pc, #288]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002da4:	6849      	ldr	r1, [r1, #4]
 8002da6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002daa:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002dac:	4945      	ldr	r1, [pc, #276]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002dae:	6849      	ldr	r1, [r1, #4]
 8002db0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002db4:	2900      	cmp	r1, #0
 8002db6:	d024      	beq.n	8002e02 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db8:	4942      	ldr	r1, [pc, #264]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002dba:	6849      	ldr	r1, [r1, #4]
 8002dbc:	0989      	lsrs	r1, r1, #6
 8002dbe:	4608      	mov	r0, r1
 8002dc0:	f04f 0100 	mov.w	r1, #0
 8002dc4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002dc8:	f04f 0500 	mov.w	r5, #0
 8002dcc:	ea00 0204 	and.w	r2, r0, r4
 8002dd0:	ea01 0305 	and.w	r3, r1, r5
 8002dd4:	493d      	ldr	r1, [pc, #244]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x168>)
 8002dd6:	fb01 f003 	mul.w	r0, r1, r3
 8002dda:	2100      	movs	r1, #0
 8002ddc:	fb01 f102 	mul.w	r1, r1, r2
 8002de0:	1844      	adds	r4, r0, r1
 8002de2:	493a      	ldr	r1, [pc, #232]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x168>)
 8002de4:	fba2 0101 	umull	r0, r1, r2, r1
 8002de8:	1863      	adds	r3, r4, r1
 8002dea:	4619      	mov	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	461a      	mov	r2, r3
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	f7fd fa7c 	bl	80002f0 <__aeabi_uldivmod>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	e04a      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e02:	4b30      	ldr	r3, [pc, #192]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	099b      	lsrs	r3, r3, #6
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e12:	f04f 0100 	mov.w	r1, #0
 8002e16:	ea02 0400 	and.w	r4, r2, r0
 8002e1a:	ea03 0501 	and.w	r5, r3, r1
 8002e1e:	4620      	mov	r0, r4
 8002e20:	4629      	mov	r1, r5
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	014b      	lsls	r3, r1, #5
 8002e2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e30:	0142      	lsls	r2, r0, #5
 8002e32:	4610      	mov	r0, r2
 8002e34:	4619      	mov	r1, r3
 8002e36:	1b00      	subs	r0, r0, r4
 8002e38:	eb61 0105 	sbc.w	r1, r1, r5
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	018b      	lsls	r3, r1, #6
 8002e46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e4a:	0182      	lsls	r2, r0, #6
 8002e4c:	1a12      	subs	r2, r2, r0
 8002e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f04f 0100 	mov.w	r1, #0
 8002e5a:	00d9      	lsls	r1, r3, #3
 8002e5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e60:	00d0      	lsls	r0, r2, #3
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	1912      	adds	r2, r2, r4
 8002e68:	eb45 0303 	adc.w	r3, r5, r3
 8002e6c:	f04f 0000 	mov.w	r0, #0
 8002e70:	f04f 0100 	mov.w	r1, #0
 8002e74:	0299      	lsls	r1, r3, #10
 8002e76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e7a:	0290      	lsls	r0, r2, #10
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	461a      	mov	r2, r3
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	f7fd fa30 	bl	80002f0 <__aeabi_uldivmod>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4613      	mov	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e98:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb0:	60bb      	str	r3, [r7, #8]
      break;
 8002eb2:	e002      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002eb6:	60bb      	str	r3, [r7, #8]
      break;
 8002eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eba:	68bb      	ldr	r3, [r7, #8]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	00f42400 	.word	0x00f42400
 8002ecc:	017d7840 	.word	0x017d7840

08002ed0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20000000 	.word	0x20000000

08002ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002eec:	f7ff fff0 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	0a9b      	lsrs	r3, r3, #10
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	4903      	ldr	r1, [pc, #12]	; (8002f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002efe:	5ccb      	ldrb	r3, [r1, r3]
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	08005b00 	.word	0x08005b00

08002f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f14:	f7ff ffdc 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	0b5b      	lsrs	r3, r3, #13
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	4903      	ldr	r1, [pc, #12]	; (8002f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f26:	5ccb      	ldrb	r3, [r1, r3]
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40023800 	.word	0x40023800
 8002f34:	08005b00 	.word	0x08005b00

08002f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d012      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f60:	4b69      	ldr	r3, [pc, #420]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	4a68      	ldr	r2, [pc, #416]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f6a:	6093      	str	r3, [r2, #8]
 8002f6c:	4b66      	ldr	r3, [pc, #408]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f74:	4964      	ldr	r1, [pc, #400]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f82:	2301      	movs	r3, #1
 8002f84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d017      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f92:	4b5d      	ldr	r3, [pc, #372]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa0:	4959      	ldr	r1, [pc, #356]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d017      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fce:	4b4e      	ldr	r3, [pc, #312]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	494a      	ldr	r1, [pc, #296]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800300a:	2301      	movs	r3, #1
 800300c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 808b 	beq.w	8003132 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800301c:	4b3a      	ldr	r3, [pc, #232]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	4a39      	ldr	r2, [pc, #228]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003026:	6413      	str	r3, [r2, #64]	; 0x40
 8003028:	4b37      	ldr	r3, [pc, #220]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003034:	4b35      	ldr	r3, [pc, #212]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a34      	ldr	r2, [pc, #208]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800303a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003040:	f7fe f93c 	bl	80012bc <HAL_GetTick>
 8003044:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003046:	e008      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003048:	f7fe f938 	bl	80012bc <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	; 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e38f      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800305a:	4b2c      	ldr	r3, [pc, #176]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003066:	4b28      	ldr	r3, [pc, #160]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d035      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	429a      	cmp	r2, r3
 8003082:	d02e      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003084:	4b20      	ldr	r3, [pc, #128]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800308e:	4b1e      	ldr	r3, [pc, #120]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	4a1d      	ldr	r2, [pc, #116]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003098:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800309a:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	4a1a      	ldr	r2, [pc, #104]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80030a6:	4a18      	ldr	r2, [pc, #96]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030ac:	4b16      	ldr	r3, [pc, #88]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d114      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fe f900 	bl	80012bc <HAL_GetTick>
 80030bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030be:	e00a      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c0:	f7fe f8fc 	bl	80012bc <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e351      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d6:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0ee      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ee:	d111      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030fe:	400b      	ands	r3, r1
 8003100:	4901      	ldr	r1, [pc, #4]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
 8003106:	e00b      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003108:	40023800 	.word	0x40023800
 800310c:	40007000 	.word	0x40007000
 8003110:	0ffffcff 	.word	0x0ffffcff
 8003114:	4bb3      	ldr	r3, [pc, #716]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4ab2      	ldr	r2, [pc, #712]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800311a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800311e:	6093      	str	r3, [r2, #8]
 8003120:	4bb0      	ldr	r3, [pc, #704]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003122:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312c:	49ad      	ldr	r1, [pc, #692]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800312e:	4313      	orrs	r3, r2
 8003130:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b00      	cmp	r3, #0
 800313c:	d010      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800313e:	4ba9      	ldr	r3, [pc, #676]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003144:	4aa7      	ldr	r2, [pc, #668]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800314a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800314e:	4ba5      	ldr	r3, [pc, #660]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003150:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003158:	49a2      	ldr	r1, [pc, #648]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800316c:	4b9d      	ldr	r3, [pc, #628]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800317a:	499a      	ldr	r1, [pc, #616]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800318e:	4b95      	ldr	r3, [pc, #596]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003194:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800319c:	4991      	ldr	r1, [pc, #580]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031b0:	4b8c      	ldr	r3, [pc, #560]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031be:	4989      	ldr	r1, [pc, #548]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031d2:	4b84      	ldr	r3, [pc, #528]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	4980      	ldr	r1, [pc, #512]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031f4:	4b7b      	ldr	r3, [pc, #492]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fa:	f023 0203 	bic.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003202:	4978      	ldr	r1, [pc, #480]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003216:	4b73      	ldr	r3, [pc, #460]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321c:	f023 020c 	bic.w	r2, r3, #12
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003224:	496f      	ldr	r1, [pc, #444]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003238:	4b6a      	ldr	r3, [pc, #424]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003246:	4967      	ldr	r1, [pc, #412]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800325a:	4b62      	ldr	r3, [pc, #392]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800325c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003260:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003268:	495e      	ldr	r1, [pc, #376]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800327c:	4b59      	ldr	r3, [pc, #356]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	4956      	ldr	r1, [pc, #344]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800329e:	4b51      	ldr	r3, [pc, #324]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ac:	494d      	ldr	r1, [pc, #308]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80032c0:	4b48      	ldr	r3, [pc, #288]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	4945      	ldr	r1, [pc, #276]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80032e2:	4b40      	ldr	r3, [pc, #256]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f0:	493c      	ldr	r1, [pc, #240]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003304:	4b37      	ldr	r3, [pc, #220]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003312:	4934      	ldr	r1, [pc, #208]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d011      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003326:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003334:	492b      	ldr	r1, [pc, #172]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003344:	d101      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003346:	2301      	movs	r3, #1
 8003348:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003356:	2301      	movs	r3, #1
 8003358:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003366:	4b1f      	ldr	r3, [pc, #124]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003374:	491b      	ldr	r1, [pc, #108]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00b      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003388:	4b16      	ldr	r3, [pc, #88]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003398:	4912      	ldr	r1, [pc, #72]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00b      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80033ac:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033bc:	4909      	ldr	r1, [pc, #36]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00f      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033d0:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e0:	e002      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80033e2:	bf00      	nop
 80033e4:	40023800 	.word	0x40023800
 80033e8:	4986      	ldr	r1, [pc, #536]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00b      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80033fc:	4b81      	ldr	r3, [pc, #516]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003402:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800340c:	497d      	ldr	r1, [pc, #500]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d006      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80d6 	beq.w	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003428:	4b76      	ldr	r3, [pc, #472]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a75      	ldr	r2, [pc, #468]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800342e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003432:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003434:	f7fd ff42 	bl	80012bc <HAL_GetTick>
 8003438:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800343c:	f7fd ff3e 	bl	80012bc <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	; 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e195      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800344e:	4b6d      	ldr	r3, [pc, #436]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d021      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346a:	2b00      	cmp	r3, #0
 800346c:	d11d      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800346e:	4b65      	ldr	r3, [pc, #404]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800347c:	4b61      	ldr	r3, [pc, #388]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800347e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003482:	0e1b      	lsrs	r3, r3, #24
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	019a      	lsls	r2, r3, #6
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	041b      	lsls	r3, r3, #16
 8003494:	431a      	orrs	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	061b      	lsls	r3, r3, #24
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	071b      	lsls	r3, r3, #28
 80034a2:	4958      	ldr	r1, [pc, #352]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d004      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d02e      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034d4:	d129      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034d6:	4b4b      	ldr	r3, [pc, #300]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034dc:	0c1b      	lsrs	r3, r3, #16
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034e4:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ea:	0f1b      	lsrs	r3, r3, #28
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	019a      	lsls	r2, r3, #6
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	041b      	lsls	r3, r3, #16
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	061b      	lsls	r3, r3, #24
 8003504:	431a      	orrs	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	071b      	lsls	r3, r3, #28
 800350a:	493e      	ldr	r1, [pc, #248]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003512:	4b3c      	ldr	r3, [pc, #240]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003518:	f023 021f 	bic.w	r2, r3, #31
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	3b01      	subs	r3, #1
 8003522:	4938      	ldr	r1, [pc, #224]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d01d      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003536:	4b33      	ldr	r3, [pc, #204]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800353c:	0e1b      	lsrs	r3, r3, #24
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003544:	4b2f      	ldr	r3, [pc, #188]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800354a:	0f1b      	lsrs	r3, r3, #28
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	019a      	lsls	r2, r3, #6
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	041b      	lsls	r3, r3, #16
 800355e:	431a      	orrs	r2, r3
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	061b      	lsls	r3, r3, #24
 8003564:	431a      	orrs	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	071b      	lsls	r3, r3, #28
 800356a:	4926      	ldr	r1, [pc, #152]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d011      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	019a      	lsls	r2, r3, #6
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	041b      	lsls	r3, r3, #16
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	061b      	lsls	r3, r3, #24
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	071b      	lsls	r3, r3, #28
 800359a:	491a      	ldr	r1, [pc, #104]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80035a2:	4b18      	ldr	r3, [pc, #96]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a17      	ldr	r2, [pc, #92]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ae:	f7fd fe85 	bl	80012bc <HAL_GetTick>
 80035b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035b4:	e008      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035b6:	f7fd fe81 	bl	80012bc <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b64      	cmp	r3, #100	; 0x64
 80035c2:	d901      	bls.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e0d8      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035c8:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	f040 80ce 	bne.w	8003778 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80035dc:	4b09      	ldr	r3, [pc, #36]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a08      	ldr	r2, [pc, #32]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e8:	f7fd fe68 	bl	80012bc <HAL_GetTick>
 80035ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035ee:	e00b      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035f0:	f7fd fe64 	bl	80012bc <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d904      	bls.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e0bb      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003602:	bf00      	nop
 8003604:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003608:	4b5e      	ldr	r3, [pc, #376]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003614:	d0ec      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003632:	2b00      	cmp	r3, #0
 8003634:	d02e      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d12a      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800363e:	4b51      	ldr	r3, [pc, #324]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800364c:	4b4d      	ldr	r3, [pc, #308]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	0f1b      	lsrs	r3, r3, #28
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	019a      	lsls	r2, r3, #6
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	041b      	lsls	r3, r3, #16
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	061b      	lsls	r3, r3, #24
 800366c:	431a      	orrs	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	071b      	lsls	r3, r3, #28
 8003672:	4944      	ldr	r1, [pc, #272]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800367a:	4b42      	ldr	r3, [pc, #264]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800367c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003680:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	3b01      	subs	r3, #1
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	493d      	ldr	r1, [pc, #244]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d022      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036a8:	d11d      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036aa:	4b36      	ldr	r3, [pc, #216]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b0:	0e1b      	lsrs	r3, r3, #24
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036b8:	4b32      	ldr	r3, [pc, #200]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	0f1b      	lsrs	r3, r3, #28
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	019a      	lsls	r2, r3, #6
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	041b      	lsls	r3, r3, #16
 80036d2:	431a      	orrs	r2, r3
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	061b      	lsls	r3, r3, #24
 80036d8:	431a      	orrs	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	071b      	lsls	r3, r3, #28
 80036de:	4929      	ldr	r1, [pc, #164]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d028      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036f2:	4b24      	ldr	r3, [pc, #144]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f8:	0e1b      	lsrs	r3, r3, #24
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003700:	4b20      	ldr	r3, [pc, #128]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	0c1b      	lsrs	r3, r3, #16
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	019a      	lsls	r2, r3, #6
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	431a      	orrs	r2, r3
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	061b      	lsls	r3, r3, #24
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	071b      	lsls	r3, r3, #28
 8003726:	4917      	ldr	r1, [pc, #92]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800372e:	4b15      	ldr	r3, [pc, #84]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003734:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	4911      	ldr	r1, [pc, #68]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003744:	4b0f      	ldr	r3, [pc, #60]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a0e      	ldr	r2, [pc, #56]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800374a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003750:	f7fd fdb4 	bl	80012bc <HAL_GetTick>
 8003754:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003756:	e008      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003758:	f7fd fdb0 	bl	80012bc <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e007      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003776:	d1ef      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3720      	adds	r7, #32
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800

08003788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e049      	b.n	800382e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fd fc76 	bl	80010a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3304      	adds	r3, #4
 80037c4:	4619      	mov	r1, r3
 80037c6:	4610      	mov	r0, r2
 80037c8:	f000 f96a 	bl	8003aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e08f      	b.n	800396c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d106      	bne.n	8003866 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7fd fbbd 	bl	8000fe0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6899      	ldr	r1, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4b3e      	ldr	r3, [pc, #248]	; (8003974 <HAL_TIM_Encoder_Init+0x13c>)
 800387a:	400b      	ands	r3, r1
 800387c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3304      	adds	r3, #4
 8003886:	4619      	mov	r1, r3
 8003888:	4610      	mov	r0, r2
 800388a:	f000 f909 	bl	8003aa0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4b31      	ldr	r3, [pc, #196]	; (8003978 <HAL_TIM_Encoder_Init+0x140>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	4313      	orrs	r3, r2
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4b2b      	ldr	r3, [pc, #172]	; (800397c <HAL_TIM_Encoder_Init+0x144>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4b2a      	ldr	r3, [pc, #168]	; (8003980 <HAL_TIM_Encoder_Init+0x148>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	4313      	orrs	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	011a      	lsls	r2, r3, #4
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	4313      	orrs	r3, r2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003906:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4313      	orrs	r3, r2
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	fffebff8 	.word	0xfffebff8
 8003978:	fffffcfc 	.word	0xfffffcfc
 800397c:	fffff3f3 	.word	0xfffff3f3
 8003980:	ffff0f0f 	.word	0xffff0f0f

08003984 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003994:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800399c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d110      	bne.n	80039d6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d102      	bne.n	80039c0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80039ba:	7b7b      	ldrb	r3, [r7, #13]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d001      	beq.n	80039c4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e069      	b.n	8003a98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d4:	e031      	b.n	8003a3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d110      	bne.n	80039fe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039dc:	7bbb      	ldrb	r3, [r7, #14]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d102      	bne.n	80039e8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039e2:	7b3b      	ldrb	r3, [r7, #12]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d001      	beq.n	80039ec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e055      	b.n	8003a98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039fc:	e01d      	b.n	8003a3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d108      	bne.n	8003a16 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a04:	7bbb      	ldrb	r3, [r7, #14]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d105      	bne.n	8003a16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a0a:	7b7b      	ldrb	r3, [r7, #13]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d102      	bne.n	8003a16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a10:	7b3b      	ldrb	r3, [r7, #12]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d001      	beq.n	8003a1a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e03e      	b.n	8003a98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2202      	movs	r2, #2
 8003a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_TIM_Encoder_Start+0xc4>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d008      	beq.n	8003a58 <HAL_TIM_Encoder_Start+0xd4>
 8003a46:	e00f      	b.n	8003a68 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 f8c5 	bl	8003be0 <TIM_CCxChannelCmd>
      break;
 8003a56:	e016      	b.n	8003a86 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	2104      	movs	r1, #4
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 f8bd 	bl	8003be0 <TIM_CCxChannelCmd>
      break;
 8003a66:	e00e      	b.n	8003a86 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 f8b5 	bl	8003be0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	2104      	movs	r1, #4
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f8ae 	bl	8003be0 <TIM_CCxChannelCmd>
      break;
 8003a84:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a40      	ldr	r2, [pc, #256]	; (8003bb4 <TIM_Base_SetConfig+0x114>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d013      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003abe:	d00f      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a3d      	ldr	r2, [pc, #244]	; (8003bb8 <TIM_Base_SetConfig+0x118>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00b      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a3c      	ldr	r2, [pc, #240]	; (8003bbc <TIM_Base_SetConfig+0x11c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d007      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a3b      	ldr	r2, [pc, #236]	; (8003bc0 <TIM_Base_SetConfig+0x120>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d003      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a3a      	ldr	r2, [pc, #232]	; (8003bc4 <TIM_Base_SetConfig+0x124>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d108      	bne.n	8003af2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a2f      	ldr	r2, [pc, #188]	; (8003bb4 <TIM_Base_SetConfig+0x114>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d02b      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b00:	d027      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a2c      	ldr	r2, [pc, #176]	; (8003bb8 <TIM_Base_SetConfig+0x118>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d023      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a2b      	ldr	r2, [pc, #172]	; (8003bbc <TIM_Base_SetConfig+0x11c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d01f      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a2a      	ldr	r2, [pc, #168]	; (8003bc0 <TIM_Base_SetConfig+0x120>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01b      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a29      	ldr	r2, [pc, #164]	; (8003bc4 <TIM_Base_SetConfig+0x124>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d017      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a28      	ldr	r2, [pc, #160]	; (8003bc8 <TIM_Base_SetConfig+0x128>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d013      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a27      	ldr	r2, [pc, #156]	; (8003bcc <TIM_Base_SetConfig+0x12c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00f      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a26      	ldr	r2, [pc, #152]	; (8003bd0 <TIM_Base_SetConfig+0x130>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00b      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a25      	ldr	r2, [pc, #148]	; (8003bd4 <TIM_Base_SetConfig+0x134>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d007      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a24      	ldr	r2, [pc, #144]	; (8003bd8 <TIM_Base_SetConfig+0x138>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d003      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a23      	ldr	r2, [pc, #140]	; (8003bdc <TIM_Base_SetConfig+0x13c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d108      	bne.n	8003b64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	; (8003bb4 <TIM_Base_SetConfig+0x114>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d003      	beq.n	8003b98 <TIM_Base_SetConfig+0xf8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a0c      	ldr	r2, [pc, #48]	; (8003bc4 <TIM_Base_SetConfig+0x124>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d103      	bne.n	8003ba0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	615a      	str	r2, [r3, #20]
}
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40010000 	.word	0x40010000
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40000800 	.word	0x40000800
 8003bc0:	40000c00 	.word	0x40000c00
 8003bc4:	40010400 	.word	0x40010400
 8003bc8:	40014000 	.word	0x40014000
 8003bcc:	40014400 	.word	0x40014400
 8003bd0:	40014800 	.word	0x40014800
 8003bd4:	40001800 	.word	0x40001800
 8003bd8:	40001c00 	.word	0x40001c00
 8003bdc:	40002000 	.word	0x40002000

08003be0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a1a      	ldr	r2, [r3, #32]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	43db      	mvns	r3, r3
 8003c02:	401a      	ands	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a1a      	ldr	r2, [r3, #32]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f003 031f 	and.w	r3, r3, #31
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	fa01 f303 	lsl.w	r3, r1, r3
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	621a      	str	r2, [r3, #32]
}
 8003c1e:	bf00      	nop
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
	...

08003c2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e06d      	b.n	8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a30      	ldr	r2, [pc, #192]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d004      	beq.n	8003c78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a2f      	ldr	r2, [pc, #188]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d108      	bne.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a20      	ldr	r2, [pc, #128]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d022      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb6:	d01d      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1d      	ldr	r2, [pc, #116]	; (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d018      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1c      	ldr	r2, [pc, #112]	; (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d013      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1a      	ldr	r2, [pc, #104]	; (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00e      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a15      	ldr	r2, [pc, #84]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a16      	ldr	r2, [pc, #88]	; (8003d40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a15      	ldr	r2, [pc, #84]	; (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d10c      	bne.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40010000 	.word	0x40010000
 8003d30:	40010400 	.word	0x40010400
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40000800 	.word	0x40000800
 8003d3c:	40000c00 	.word	0x40000c00
 8003d40:	40014000 	.word	0x40014000
 8003d44:	40001800 	.word	0x40001800

08003d48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e040      	b.n	8003ddc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fd f9e8 	bl	8001140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2224      	movs	r2, #36	; 0x24
 8003d74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0201 	bic.w	r2, r2, #1
 8003d84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f8c0 	bl	8003f0c <UART_SetConfig>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e022      	b.n	8003ddc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fb16 	bl	80043d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003db2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fb9d 	bl	8004514 <UART_CheckIdleState>
 8003dda:	4603      	mov	r3, r0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	; 0x28
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	4613      	mov	r3, r2
 8003df2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003df8:	2b20      	cmp	r3, #32
 8003dfa:	f040 8081 	bne.w	8003f00 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <HAL_UART_Transmit+0x26>
 8003e04:	88fb      	ldrh	r3, [r7, #6]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e079      	b.n	8003f02 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_UART_Transmit+0x38>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e072      	b.n	8003f02 <HAL_UART_Transmit+0x11e>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2221      	movs	r2, #33	; 0x21
 8003e30:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e32:	f7fd fa43 	bl	80012bc <HAL_GetTick>
 8003e36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	88fa      	ldrh	r2, [r7, #6]
 8003e3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	88fa      	ldrh	r2, [r7, #6]
 8003e44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e50:	d108      	bne.n	8003e64 <HAL_UART_Transmit+0x80>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d104      	bne.n	8003e64 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	e003      	b.n	8003e6c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003e74:	e02c      	b.n	8003ed0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2180      	movs	r1, #128	; 0x80
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 fb90 	bl	80045a6 <UART_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e038      	b.n	8003f02 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10b      	bne.n	8003eae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ea4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	3302      	adds	r3, #2
 8003eaa:	61bb      	str	r3, [r7, #24]
 8003eac:	e007      	b.n	8003ebe <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	781a      	ldrb	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1cc      	bne.n	8003e76 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2140      	movs	r1, #64	; 0x40
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 fb5d 	bl	80045a6 <UART_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e005      	b.n	8003f02 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e000      	b.n	8003f02 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003f00:	2302      	movs	r3, #2
  }
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3720      	adds	r7, #32
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4ba7      	ldr	r3, [pc, #668]	; (80041d4 <UART_SetConfig+0x2c8>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6812      	ldr	r2, [r2, #0]
 8003f3e:	6979      	ldr	r1, [r7, #20]
 8003f40:	430b      	orrs	r3, r1
 8003f42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a95      	ldr	r2, [pc, #596]	; (80041d8 <UART_SetConfig+0x2cc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d120      	bne.n	8003fca <UART_SetConfig+0xbe>
 8003f88:	4b94      	ldr	r3, [pc, #592]	; (80041dc <UART_SetConfig+0x2d0>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d816      	bhi.n	8003fc4 <UART_SetConfig+0xb8>
 8003f96:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <UART_SetConfig+0x90>)
 8003f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9c:	08003fad 	.word	0x08003fad
 8003fa0:	08003fb9 	.word	0x08003fb9
 8003fa4:	08003fb3 	.word	0x08003fb3
 8003fa8:	08003fbf 	.word	0x08003fbf
 8003fac:	2301      	movs	r3, #1
 8003fae:	77fb      	strb	r3, [r7, #31]
 8003fb0:	e14f      	b.n	8004252 <UART_SetConfig+0x346>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	77fb      	strb	r3, [r7, #31]
 8003fb6:	e14c      	b.n	8004252 <UART_SetConfig+0x346>
 8003fb8:	2304      	movs	r3, #4
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	e149      	b.n	8004252 <UART_SetConfig+0x346>
 8003fbe:	2308      	movs	r3, #8
 8003fc0:	77fb      	strb	r3, [r7, #31]
 8003fc2:	e146      	b.n	8004252 <UART_SetConfig+0x346>
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e143      	b.n	8004252 <UART_SetConfig+0x346>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a84      	ldr	r2, [pc, #528]	; (80041e0 <UART_SetConfig+0x2d4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d132      	bne.n	800403a <UART_SetConfig+0x12e>
 8003fd4:	4b81      	ldr	r3, [pc, #516]	; (80041dc <UART_SetConfig+0x2d0>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	f003 030c 	and.w	r3, r3, #12
 8003fde:	2b0c      	cmp	r3, #12
 8003fe0:	d828      	bhi.n	8004034 <UART_SetConfig+0x128>
 8003fe2:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <UART_SetConfig+0xdc>)
 8003fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe8:	0800401d 	.word	0x0800401d
 8003fec:	08004035 	.word	0x08004035
 8003ff0:	08004035 	.word	0x08004035
 8003ff4:	08004035 	.word	0x08004035
 8003ff8:	08004029 	.word	0x08004029
 8003ffc:	08004035 	.word	0x08004035
 8004000:	08004035 	.word	0x08004035
 8004004:	08004035 	.word	0x08004035
 8004008:	08004023 	.word	0x08004023
 800400c:	08004035 	.word	0x08004035
 8004010:	08004035 	.word	0x08004035
 8004014:	08004035 	.word	0x08004035
 8004018:	0800402f 	.word	0x0800402f
 800401c:	2300      	movs	r3, #0
 800401e:	77fb      	strb	r3, [r7, #31]
 8004020:	e117      	b.n	8004252 <UART_SetConfig+0x346>
 8004022:	2302      	movs	r3, #2
 8004024:	77fb      	strb	r3, [r7, #31]
 8004026:	e114      	b.n	8004252 <UART_SetConfig+0x346>
 8004028:	2304      	movs	r3, #4
 800402a:	77fb      	strb	r3, [r7, #31]
 800402c:	e111      	b.n	8004252 <UART_SetConfig+0x346>
 800402e:	2308      	movs	r3, #8
 8004030:	77fb      	strb	r3, [r7, #31]
 8004032:	e10e      	b.n	8004252 <UART_SetConfig+0x346>
 8004034:	2310      	movs	r3, #16
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e10b      	b.n	8004252 <UART_SetConfig+0x346>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a69      	ldr	r2, [pc, #420]	; (80041e4 <UART_SetConfig+0x2d8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d120      	bne.n	8004086 <UART_SetConfig+0x17a>
 8004044:	4b65      	ldr	r3, [pc, #404]	; (80041dc <UART_SetConfig+0x2d0>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800404e:	2b30      	cmp	r3, #48	; 0x30
 8004050:	d013      	beq.n	800407a <UART_SetConfig+0x16e>
 8004052:	2b30      	cmp	r3, #48	; 0x30
 8004054:	d814      	bhi.n	8004080 <UART_SetConfig+0x174>
 8004056:	2b20      	cmp	r3, #32
 8004058:	d009      	beq.n	800406e <UART_SetConfig+0x162>
 800405a:	2b20      	cmp	r3, #32
 800405c:	d810      	bhi.n	8004080 <UART_SetConfig+0x174>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <UART_SetConfig+0x15c>
 8004062:	2b10      	cmp	r3, #16
 8004064:	d006      	beq.n	8004074 <UART_SetConfig+0x168>
 8004066:	e00b      	b.n	8004080 <UART_SetConfig+0x174>
 8004068:	2300      	movs	r3, #0
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	e0f1      	b.n	8004252 <UART_SetConfig+0x346>
 800406e:	2302      	movs	r3, #2
 8004070:	77fb      	strb	r3, [r7, #31]
 8004072:	e0ee      	b.n	8004252 <UART_SetConfig+0x346>
 8004074:	2304      	movs	r3, #4
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e0eb      	b.n	8004252 <UART_SetConfig+0x346>
 800407a:	2308      	movs	r3, #8
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	e0e8      	b.n	8004252 <UART_SetConfig+0x346>
 8004080:	2310      	movs	r3, #16
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e0e5      	b.n	8004252 <UART_SetConfig+0x346>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a57      	ldr	r2, [pc, #348]	; (80041e8 <UART_SetConfig+0x2dc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d120      	bne.n	80040d2 <UART_SetConfig+0x1c6>
 8004090:	4b52      	ldr	r3, [pc, #328]	; (80041dc <UART_SetConfig+0x2d0>)
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004096:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800409a:	2bc0      	cmp	r3, #192	; 0xc0
 800409c:	d013      	beq.n	80040c6 <UART_SetConfig+0x1ba>
 800409e:	2bc0      	cmp	r3, #192	; 0xc0
 80040a0:	d814      	bhi.n	80040cc <UART_SetConfig+0x1c0>
 80040a2:	2b80      	cmp	r3, #128	; 0x80
 80040a4:	d009      	beq.n	80040ba <UART_SetConfig+0x1ae>
 80040a6:	2b80      	cmp	r3, #128	; 0x80
 80040a8:	d810      	bhi.n	80040cc <UART_SetConfig+0x1c0>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <UART_SetConfig+0x1a8>
 80040ae:	2b40      	cmp	r3, #64	; 0x40
 80040b0:	d006      	beq.n	80040c0 <UART_SetConfig+0x1b4>
 80040b2:	e00b      	b.n	80040cc <UART_SetConfig+0x1c0>
 80040b4:	2300      	movs	r3, #0
 80040b6:	77fb      	strb	r3, [r7, #31]
 80040b8:	e0cb      	b.n	8004252 <UART_SetConfig+0x346>
 80040ba:	2302      	movs	r3, #2
 80040bc:	77fb      	strb	r3, [r7, #31]
 80040be:	e0c8      	b.n	8004252 <UART_SetConfig+0x346>
 80040c0:	2304      	movs	r3, #4
 80040c2:	77fb      	strb	r3, [r7, #31]
 80040c4:	e0c5      	b.n	8004252 <UART_SetConfig+0x346>
 80040c6:	2308      	movs	r3, #8
 80040c8:	77fb      	strb	r3, [r7, #31]
 80040ca:	e0c2      	b.n	8004252 <UART_SetConfig+0x346>
 80040cc:	2310      	movs	r3, #16
 80040ce:	77fb      	strb	r3, [r7, #31]
 80040d0:	e0bf      	b.n	8004252 <UART_SetConfig+0x346>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a45      	ldr	r2, [pc, #276]	; (80041ec <UART_SetConfig+0x2e0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d125      	bne.n	8004128 <UART_SetConfig+0x21c>
 80040dc:	4b3f      	ldr	r3, [pc, #252]	; (80041dc <UART_SetConfig+0x2d0>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ea:	d017      	beq.n	800411c <UART_SetConfig+0x210>
 80040ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040f0:	d817      	bhi.n	8004122 <UART_SetConfig+0x216>
 80040f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f6:	d00b      	beq.n	8004110 <UART_SetConfig+0x204>
 80040f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040fc:	d811      	bhi.n	8004122 <UART_SetConfig+0x216>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <UART_SetConfig+0x1fe>
 8004102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004106:	d006      	beq.n	8004116 <UART_SetConfig+0x20a>
 8004108:	e00b      	b.n	8004122 <UART_SetConfig+0x216>
 800410a:	2300      	movs	r3, #0
 800410c:	77fb      	strb	r3, [r7, #31]
 800410e:	e0a0      	b.n	8004252 <UART_SetConfig+0x346>
 8004110:	2302      	movs	r3, #2
 8004112:	77fb      	strb	r3, [r7, #31]
 8004114:	e09d      	b.n	8004252 <UART_SetConfig+0x346>
 8004116:	2304      	movs	r3, #4
 8004118:	77fb      	strb	r3, [r7, #31]
 800411a:	e09a      	b.n	8004252 <UART_SetConfig+0x346>
 800411c:	2308      	movs	r3, #8
 800411e:	77fb      	strb	r3, [r7, #31]
 8004120:	e097      	b.n	8004252 <UART_SetConfig+0x346>
 8004122:	2310      	movs	r3, #16
 8004124:	77fb      	strb	r3, [r7, #31]
 8004126:	e094      	b.n	8004252 <UART_SetConfig+0x346>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a30      	ldr	r2, [pc, #192]	; (80041f0 <UART_SetConfig+0x2e4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d125      	bne.n	800417e <UART_SetConfig+0x272>
 8004132:	4b2a      	ldr	r3, [pc, #168]	; (80041dc <UART_SetConfig+0x2d0>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004138:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800413c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004140:	d017      	beq.n	8004172 <UART_SetConfig+0x266>
 8004142:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004146:	d817      	bhi.n	8004178 <UART_SetConfig+0x26c>
 8004148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800414c:	d00b      	beq.n	8004166 <UART_SetConfig+0x25a>
 800414e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004152:	d811      	bhi.n	8004178 <UART_SetConfig+0x26c>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <UART_SetConfig+0x254>
 8004158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415c:	d006      	beq.n	800416c <UART_SetConfig+0x260>
 800415e:	e00b      	b.n	8004178 <UART_SetConfig+0x26c>
 8004160:	2301      	movs	r3, #1
 8004162:	77fb      	strb	r3, [r7, #31]
 8004164:	e075      	b.n	8004252 <UART_SetConfig+0x346>
 8004166:	2302      	movs	r3, #2
 8004168:	77fb      	strb	r3, [r7, #31]
 800416a:	e072      	b.n	8004252 <UART_SetConfig+0x346>
 800416c:	2304      	movs	r3, #4
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	e06f      	b.n	8004252 <UART_SetConfig+0x346>
 8004172:	2308      	movs	r3, #8
 8004174:	77fb      	strb	r3, [r7, #31]
 8004176:	e06c      	b.n	8004252 <UART_SetConfig+0x346>
 8004178:	2310      	movs	r3, #16
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e069      	b.n	8004252 <UART_SetConfig+0x346>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1c      	ldr	r2, [pc, #112]	; (80041f4 <UART_SetConfig+0x2e8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d137      	bne.n	80041f8 <UART_SetConfig+0x2ec>
 8004188:	4b14      	ldr	r3, [pc, #80]	; (80041dc <UART_SetConfig+0x2d0>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004192:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004196:	d017      	beq.n	80041c8 <UART_SetConfig+0x2bc>
 8004198:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800419c:	d817      	bhi.n	80041ce <UART_SetConfig+0x2c2>
 800419e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a2:	d00b      	beq.n	80041bc <UART_SetConfig+0x2b0>
 80041a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a8:	d811      	bhi.n	80041ce <UART_SetConfig+0x2c2>
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <UART_SetConfig+0x2aa>
 80041ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b2:	d006      	beq.n	80041c2 <UART_SetConfig+0x2b6>
 80041b4:	e00b      	b.n	80041ce <UART_SetConfig+0x2c2>
 80041b6:	2300      	movs	r3, #0
 80041b8:	77fb      	strb	r3, [r7, #31]
 80041ba:	e04a      	b.n	8004252 <UART_SetConfig+0x346>
 80041bc:	2302      	movs	r3, #2
 80041be:	77fb      	strb	r3, [r7, #31]
 80041c0:	e047      	b.n	8004252 <UART_SetConfig+0x346>
 80041c2:	2304      	movs	r3, #4
 80041c4:	77fb      	strb	r3, [r7, #31]
 80041c6:	e044      	b.n	8004252 <UART_SetConfig+0x346>
 80041c8:	2308      	movs	r3, #8
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e041      	b.n	8004252 <UART_SetConfig+0x346>
 80041ce:	2310      	movs	r3, #16
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e03e      	b.n	8004252 <UART_SetConfig+0x346>
 80041d4:	efff69f3 	.word	0xefff69f3
 80041d8:	40011000 	.word	0x40011000
 80041dc:	40023800 	.word	0x40023800
 80041e0:	40004400 	.word	0x40004400
 80041e4:	40004800 	.word	0x40004800
 80041e8:	40004c00 	.word	0x40004c00
 80041ec:	40005000 	.word	0x40005000
 80041f0:	40011400 	.word	0x40011400
 80041f4:	40007800 	.word	0x40007800
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a71      	ldr	r2, [pc, #452]	; (80043c4 <UART_SetConfig+0x4b8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d125      	bne.n	800424e <UART_SetConfig+0x342>
 8004202:	4b71      	ldr	r3, [pc, #452]	; (80043c8 <UART_SetConfig+0x4bc>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004208:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800420c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004210:	d017      	beq.n	8004242 <UART_SetConfig+0x336>
 8004212:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004216:	d817      	bhi.n	8004248 <UART_SetConfig+0x33c>
 8004218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800421c:	d00b      	beq.n	8004236 <UART_SetConfig+0x32a>
 800421e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004222:	d811      	bhi.n	8004248 <UART_SetConfig+0x33c>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <UART_SetConfig+0x324>
 8004228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800422c:	d006      	beq.n	800423c <UART_SetConfig+0x330>
 800422e:	e00b      	b.n	8004248 <UART_SetConfig+0x33c>
 8004230:	2300      	movs	r3, #0
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e00d      	b.n	8004252 <UART_SetConfig+0x346>
 8004236:	2302      	movs	r3, #2
 8004238:	77fb      	strb	r3, [r7, #31]
 800423a:	e00a      	b.n	8004252 <UART_SetConfig+0x346>
 800423c:	2304      	movs	r3, #4
 800423e:	77fb      	strb	r3, [r7, #31]
 8004240:	e007      	b.n	8004252 <UART_SetConfig+0x346>
 8004242:	2308      	movs	r3, #8
 8004244:	77fb      	strb	r3, [r7, #31]
 8004246:	e004      	b.n	8004252 <UART_SetConfig+0x346>
 8004248:	2310      	movs	r3, #16
 800424a:	77fb      	strb	r3, [r7, #31]
 800424c:	e001      	b.n	8004252 <UART_SetConfig+0x346>
 800424e:	2310      	movs	r3, #16
 8004250:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425a:	d15b      	bne.n	8004314 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800425c:	7ffb      	ldrb	r3, [r7, #31]
 800425e:	2b08      	cmp	r3, #8
 8004260:	d827      	bhi.n	80042b2 <UART_SetConfig+0x3a6>
 8004262:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <UART_SetConfig+0x35c>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	0800428d 	.word	0x0800428d
 800426c:	08004295 	.word	0x08004295
 8004270:	0800429d 	.word	0x0800429d
 8004274:	080042b3 	.word	0x080042b3
 8004278:	080042a3 	.word	0x080042a3
 800427c:	080042b3 	.word	0x080042b3
 8004280:	080042b3 	.word	0x080042b3
 8004284:	080042b3 	.word	0x080042b3
 8004288:	080042ab 	.word	0x080042ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800428c:	f7fe fe2c 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8004290:	61b8      	str	r0, [r7, #24]
        break;
 8004292:	e013      	b.n	80042bc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004294:	f7fe fe3c 	bl	8002f10 <HAL_RCC_GetPCLK2Freq>
 8004298:	61b8      	str	r0, [r7, #24]
        break;
 800429a:	e00f      	b.n	80042bc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800429c:	4b4b      	ldr	r3, [pc, #300]	; (80043cc <UART_SetConfig+0x4c0>)
 800429e:	61bb      	str	r3, [r7, #24]
        break;
 80042a0:	e00c      	b.n	80042bc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042a2:	f7fe fd5f 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 80042a6:	61b8      	str	r0, [r7, #24]
        break;
 80042a8:	e008      	b.n	80042bc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ae:	61bb      	str	r3, [r7, #24]
        break;
 80042b0:	e004      	b.n	80042bc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	77bb      	strb	r3, [r7, #30]
        break;
 80042ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d074      	beq.n	80043ac <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	005a      	lsls	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	085b      	lsrs	r3, r3, #1
 80042cc:	441a      	add	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b0f      	cmp	r3, #15
 80042de:	d916      	bls.n	800430e <UART_SetConfig+0x402>
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e6:	d212      	bcs.n	800430e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	f023 030f 	bic.w	r3, r3, #15
 80042f0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	085b      	lsrs	r3, r3, #1
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	89fb      	ldrh	r3, [r7, #14]
 8004300:	4313      	orrs	r3, r2
 8004302:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	89fa      	ldrh	r2, [r7, #14]
 800430a:	60da      	str	r2, [r3, #12]
 800430c:	e04e      	b.n	80043ac <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	77bb      	strb	r3, [r7, #30]
 8004312:	e04b      	b.n	80043ac <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004314:	7ffb      	ldrb	r3, [r7, #31]
 8004316:	2b08      	cmp	r3, #8
 8004318:	d827      	bhi.n	800436a <UART_SetConfig+0x45e>
 800431a:	a201      	add	r2, pc, #4	; (adr r2, 8004320 <UART_SetConfig+0x414>)
 800431c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004320:	08004345 	.word	0x08004345
 8004324:	0800434d 	.word	0x0800434d
 8004328:	08004355 	.word	0x08004355
 800432c:	0800436b 	.word	0x0800436b
 8004330:	0800435b 	.word	0x0800435b
 8004334:	0800436b 	.word	0x0800436b
 8004338:	0800436b 	.word	0x0800436b
 800433c:	0800436b 	.word	0x0800436b
 8004340:	08004363 	.word	0x08004363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004344:	f7fe fdd0 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8004348:	61b8      	str	r0, [r7, #24]
        break;
 800434a:	e013      	b.n	8004374 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800434c:	f7fe fde0 	bl	8002f10 <HAL_RCC_GetPCLK2Freq>
 8004350:	61b8      	str	r0, [r7, #24]
        break;
 8004352:	e00f      	b.n	8004374 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004354:	4b1d      	ldr	r3, [pc, #116]	; (80043cc <UART_SetConfig+0x4c0>)
 8004356:	61bb      	str	r3, [r7, #24]
        break;
 8004358:	e00c      	b.n	8004374 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800435a:	f7fe fd03 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 800435e:	61b8      	str	r0, [r7, #24]
        break;
 8004360:	e008      	b.n	8004374 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004366:	61bb      	str	r3, [r7, #24]
        break;
 8004368:	e004      	b.n	8004374 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	77bb      	strb	r3, [r7, #30]
        break;
 8004372:	bf00      	nop
    }

    if (pclk != 0U)
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d018      	beq.n	80043ac <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	085a      	lsrs	r2, r3, #1
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	441a      	add	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	b29b      	uxth	r3, r3
 800438e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	2b0f      	cmp	r3, #15
 8004394:	d908      	bls.n	80043a8 <UART_SetConfig+0x49c>
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800439c:	d204      	bcs.n	80043a8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	60da      	str	r2, [r3, #12]
 80043a6:	e001      	b.n	80043ac <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80043b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3720      	adds	r7, #32
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40007c00 	.word	0x40007c00
 80043c8:	40023800 	.word	0x40023800
 80043cc:	00f42400 	.word	0x00f42400

080043d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00a      	beq.n	80043fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	f003 0320 	and.w	r3, r3, #32
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01a      	beq.n	80044e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ce:	d10a      	bne.n	80044e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	605a      	str	r2, [r3, #4]
  }
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af02      	add	r7, sp, #8
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004524:	f7fc feca 	bl	80012bc <HAL_GetTick>
 8004528:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b08      	cmp	r3, #8
 8004536:	d10e      	bne.n	8004556 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004538:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f82d 	bl	80045a6 <UART_WaitOnFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e023      	b.n	800459e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b04      	cmp	r3, #4
 8004562:	d10e      	bne.n	8004582 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004564:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f817 	bl	80045a6 <UART_WaitOnFlagUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e00d      	b.n	800459e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2220      	movs	r2, #32
 8004586:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	603b      	str	r3, [r7, #0]
 80045b2:	4613      	mov	r3, r2
 80045b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b6:	e05e      	b.n	8004676 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045be:	d05a      	beq.n	8004676 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c0:	f7fc fe7c 	bl	80012bc <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d302      	bcc.n	80045d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d11b      	bne.n	800460e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0201 	bic.w	r2, r2, #1
 80045f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2220      	movs	r2, #32
 80045fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e043      	b.n	8004696 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d02c      	beq.n	8004676 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800462a:	d124      	bne.n	8004676 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004634:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004644:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0201 	bic.w	r2, r2, #1
 8004654:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2220      	movs	r2, #32
 800465a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2220      	movs	r2, #32
 8004666:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e00f      	b.n	8004696 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4013      	ands	r3, r2
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	429a      	cmp	r2, r3
 8004684:	bf0c      	ite	eq
 8004686:	2301      	moveq	r3, #1
 8004688:	2300      	movne	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	429a      	cmp	r2, r3
 8004692:	d091      	beq.n	80045b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <__errno>:
 80046a0:	4b01      	ldr	r3, [pc, #4]	; (80046a8 <__errno+0x8>)
 80046a2:	6818      	ldr	r0, [r3, #0]
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	2000000c 	.word	0x2000000c

080046ac <__libc_init_array>:
 80046ac:	b570      	push	{r4, r5, r6, lr}
 80046ae:	4d0d      	ldr	r5, [pc, #52]	; (80046e4 <__libc_init_array+0x38>)
 80046b0:	4c0d      	ldr	r4, [pc, #52]	; (80046e8 <__libc_init_array+0x3c>)
 80046b2:	1b64      	subs	r4, r4, r5
 80046b4:	10a4      	asrs	r4, r4, #2
 80046b6:	2600      	movs	r6, #0
 80046b8:	42a6      	cmp	r6, r4
 80046ba:	d109      	bne.n	80046d0 <__libc_init_array+0x24>
 80046bc:	4d0b      	ldr	r5, [pc, #44]	; (80046ec <__libc_init_array+0x40>)
 80046be:	4c0c      	ldr	r4, [pc, #48]	; (80046f0 <__libc_init_array+0x44>)
 80046c0:	f001 f9be 	bl	8005a40 <_init>
 80046c4:	1b64      	subs	r4, r4, r5
 80046c6:	10a4      	asrs	r4, r4, #2
 80046c8:	2600      	movs	r6, #0
 80046ca:	42a6      	cmp	r6, r4
 80046cc:	d105      	bne.n	80046da <__libc_init_array+0x2e>
 80046ce:	bd70      	pop	{r4, r5, r6, pc}
 80046d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d4:	4798      	blx	r3
 80046d6:	3601      	adds	r6, #1
 80046d8:	e7ee      	b.n	80046b8 <__libc_init_array+0xc>
 80046da:	f855 3b04 	ldr.w	r3, [r5], #4
 80046de:	4798      	blx	r3
 80046e0:	3601      	adds	r6, #1
 80046e2:	e7f2      	b.n	80046ca <__libc_init_array+0x1e>
 80046e4:	08005ba8 	.word	0x08005ba8
 80046e8:	08005ba8 	.word	0x08005ba8
 80046ec:	08005ba8 	.word	0x08005ba8
 80046f0:	08005bac 	.word	0x08005bac

080046f4 <memset>:
 80046f4:	4402      	add	r2, r0
 80046f6:	4603      	mov	r3, r0
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d100      	bne.n	80046fe <memset+0xa>
 80046fc:	4770      	bx	lr
 80046fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004702:	e7f9      	b.n	80046f8 <memset+0x4>

08004704 <iprintf>:
 8004704:	b40f      	push	{r0, r1, r2, r3}
 8004706:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <iprintf+0x2c>)
 8004708:	b513      	push	{r0, r1, r4, lr}
 800470a:	681c      	ldr	r4, [r3, #0]
 800470c:	b124      	cbz	r4, 8004718 <iprintf+0x14>
 800470e:	69a3      	ldr	r3, [r4, #24]
 8004710:	b913      	cbnz	r3, 8004718 <iprintf+0x14>
 8004712:	4620      	mov	r0, r4
 8004714:	f000 fa7e 	bl	8004c14 <__sinit>
 8004718:	ab05      	add	r3, sp, #20
 800471a:	9a04      	ldr	r2, [sp, #16]
 800471c:	68a1      	ldr	r1, [r4, #8]
 800471e:	9301      	str	r3, [sp, #4]
 8004720:	4620      	mov	r0, r4
 8004722:	f000 fdab 	bl	800527c <_vfiprintf_r>
 8004726:	b002      	add	sp, #8
 8004728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800472c:	b004      	add	sp, #16
 800472e:	4770      	bx	lr
 8004730:	2000000c 	.word	0x2000000c

08004734 <_puts_r>:
 8004734:	b570      	push	{r4, r5, r6, lr}
 8004736:	460e      	mov	r6, r1
 8004738:	4605      	mov	r5, r0
 800473a:	b118      	cbz	r0, 8004744 <_puts_r+0x10>
 800473c:	6983      	ldr	r3, [r0, #24]
 800473e:	b90b      	cbnz	r3, 8004744 <_puts_r+0x10>
 8004740:	f000 fa68 	bl	8004c14 <__sinit>
 8004744:	69ab      	ldr	r3, [r5, #24]
 8004746:	68ac      	ldr	r4, [r5, #8]
 8004748:	b913      	cbnz	r3, 8004750 <_puts_r+0x1c>
 800474a:	4628      	mov	r0, r5
 800474c:	f000 fa62 	bl	8004c14 <__sinit>
 8004750:	4b2c      	ldr	r3, [pc, #176]	; (8004804 <_puts_r+0xd0>)
 8004752:	429c      	cmp	r4, r3
 8004754:	d120      	bne.n	8004798 <_puts_r+0x64>
 8004756:	686c      	ldr	r4, [r5, #4]
 8004758:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800475a:	07db      	lsls	r3, r3, #31
 800475c:	d405      	bmi.n	800476a <_puts_r+0x36>
 800475e:	89a3      	ldrh	r3, [r4, #12]
 8004760:	0598      	lsls	r0, r3, #22
 8004762:	d402      	bmi.n	800476a <_puts_r+0x36>
 8004764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004766:	f000 faf3 	bl	8004d50 <__retarget_lock_acquire_recursive>
 800476a:	89a3      	ldrh	r3, [r4, #12]
 800476c:	0719      	lsls	r1, r3, #28
 800476e:	d51d      	bpl.n	80047ac <_puts_r+0x78>
 8004770:	6923      	ldr	r3, [r4, #16]
 8004772:	b1db      	cbz	r3, 80047ac <_puts_r+0x78>
 8004774:	3e01      	subs	r6, #1
 8004776:	68a3      	ldr	r3, [r4, #8]
 8004778:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800477c:	3b01      	subs	r3, #1
 800477e:	60a3      	str	r3, [r4, #8]
 8004780:	bb39      	cbnz	r1, 80047d2 <_puts_r+0x9e>
 8004782:	2b00      	cmp	r3, #0
 8004784:	da38      	bge.n	80047f8 <_puts_r+0xc4>
 8004786:	4622      	mov	r2, r4
 8004788:	210a      	movs	r1, #10
 800478a:	4628      	mov	r0, r5
 800478c:	f000 f868 	bl	8004860 <__swbuf_r>
 8004790:	3001      	adds	r0, #1
 8004792:	d011      	beq.n	80047b8 <_puts_r+0x84>
 8004794:	250a      	movs	r5, #10
 8004796:	e011      	b.n	80047bc <_puts_r+0x88>
 8004798:	4b1b      	ldr	r3, [pc, #108]	; (8004808 <_puts_r+0xd4>)
 800479a:	429c      	cmp	r4, r3
 800479c:	d101      	bne.n	80047a2 <_puts_r+0x6e>
 800479e:	68ac      	ldr	r4, [r5, #8]
 80047a0:	e7da      	b.n	8004758 <_puts_r+0x24>
 80047a2:	4b1a      	ldr	r3, [pc, #104]	; (800480c <_puts_r+0xd8>)
 80047a4:	429c      	cmp	r4, r3
 80047a6:	bf08      	it	eq
 80047a8:	68ec      	ldreq	r4, [r5, #12]
 80047aa:	e7d5      	b.n	8004758 <_puts_r+0x24>
 80047ac:	4621      	mov	r1, r4
 80047ae:	4628      	mov	r0, r5
 80047b0:	f000 f8a8 	bl	8004904 <__swsetup_r>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	d0dd      	beq.n	8004774 <_puts_r+0x40>
 80047b8:	f04f 35ff 	mov.w	r5, #4294967295
 80047bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047be:	07da      	lsls	r2, r3, #31
 80047c0:	d405      	bmi.n	80047ce <_puts_r+0x9a>
 80047c2:	89a3      	ldrh	r3, [r4, #12]
 80047c4:	059b      	lsls	r3, r3, #22
 80047c6:	d402      	bmi.n	80047ce <_puts_r+0x9a>
 80047c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ca:	f000 fac2 	bl	8004d52 <__retarget_lock_release_recursive>
 80047ce:	4628      	mov	r0, r5
 80047d0:	bd70      	pop	{r4, r5, r6, pc}
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	da04      	bge.n	80047e0 <_puts_r+0xac>
 80047d6:	69a2      	ldr	r2, [r4, #24]
 80047d8:	429a      	cmp	r2, r3
 80047da:	dc06      	bgt.n	80047ea <_puts_r+0xb6>
 80047dc:	290a      	cmp	r1, #10
 80047de:	d004      	beq.n	80047ea <_puts_r+0xb6>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	6022      	str	r2, [r4, #0]
 80047e6:	7019      	strb	r1, [r3, #0]
 80047e8:	e7c5      	b.n	8004776 <_puts_r+0x42>
 80047ea:	4622      	mov	r2, r4
 80047ec:	4628      	mov	r0, r5
 80047ee:	f000 f837 	bl	8004860 <__swbuf_r>
 80047f2:	3001      	adds	r0, #1
 80047f4:	d1bf      	bne.n	8004776 <_puts_r+0x42>
 80047f6:	e7df      	b.n	80047b8 <_puts_r+0x84>
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	250a      	movs	r5, #10
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	6022      	str	r2, [r4, #0]
 8004800:	701d      	strb	r5, [r3, #0]
 8004802:	e7db      	b.n	80047bc <_puts_r+0x88>
 8004804:	08005b2c 	.word	0x08005b2c
 8004808:	08005b4c 	.word	0x08005b4c
 800480c:	08005b0c 	.word	0x08005b0c

08004810 <puts>:
 8004810:	4b02      	ldr	r3, [pc, #8]	; (800481c <puts+0xc>)
 8004812:	4601      	mov	r1, r0
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	f7ff bf8d 	b.w	8004734 <_puts_r>
 800481a:	bf00      	nop
 800481c:	2000000c 	.word	0x2000000c

08004820 <siprintf>:
 8004820:	b40e      	push	{r1, r2, r3}
 8004822:	b500      	push	{lr}
 8004824:	b09c      	sub	sp, #112	; 0x70
 8004826:	ab1d      	add	r3, sp, #116	; 0x74
 8004828:	9002      	str	r0, [sp, #8]
 800482a:	9006      	str	r0, [sp, #24]
 800482c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004830:	4809      	ldr	r0, [pc, #36]	; (8004858 <siprintf+0x38>)
 8004832:	9107      	str	r1, [sp, #28]
 8004834:	9104      	str	r1, [sp, #16]
 8004836:	4909      	ldr	r1, [pc, #36]	; (800485c <siprintf+0x3c>)
 8004838:	f853 2b04 	ldr.w	r2, [r3], #4
 800483c:	9105      	str	r1, [sp, #20]
 800483e:	6800      	ldr	r0, [r0, #0]
 8004840:	9301      	str	r3, [sp, #4]
 8004842:	a902      	add	r1, sp, #8
 8004844:	f000 fbf0 	bl	8005028 <_svfiprintf_r>
 8004848:	9b02      	ldr	r3, [sp, #8]
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	b01c      	add	sp, #112	; 0x70
 8004850:	f85d eb04 	ldr.w	lr, [sp], #4
 8004854:	b003      	add	sp, #12
 8004856:	4770      	bx	lr
 8004858:	2000000c 	.word	0x2000000c
 800485c:	ffff0208 	.word	0xffff0208

08004860 <__swbuf_r>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	460e      	mov	r6, r1
 8004864:	4614      	mov	r4, r2
 8004866:	4605      	mov	r5, r0
 8004868:	b118      	cbz	r0, 8004872 <__swbuf_r+0x12>
 800486a:	6983      	ldr	r3, [r0, #24]
 800486c:	b90b      	cbnz	r3, 8004872 <__swbuf_r+0x12>
 800486e:	f000 f9d1 	bl	8004c14 <__sinit>
 8004872:	4b21      	ldr	r3, [pc, #132]	; (80048f8 <__swbuf_r+0x98>)
 8004874:	429c      	cmp	r4, r3
 8004876:	d12b      	bne.n	80048d0 <__swbuf_r+0x70>
 8004878:	686c      	ldr	r4, [r5, #4]
 800487a:	69a3      	ldr	r3, [r4, #24]
 800487c:	60a3      	str	r3, [r4, #8]
 800487e:	89a3      	ldrh	r3, [r4, #12]
 8004880:	071a      	lsls	r2, r3, #28
 8004882:	d52f      	bpl.n	80048e4 <__swbuf_r+0x84>
 8004884:	6923      	ldr	r3, [r4, #16]
 8004886:	b36b      	cbz	r3, 80048e4 <__swbuf_r+0x84>
 8004888:	6923      	ldr	r3, [r4, #16]
 800488a:	6820      	ldr	r0, [r4, #0]
 800488c:	1ac0      	subs	r0, r0, r3
 800488e:	6963      	ldr	r3, [r4, #20]
 8004890:	b2f6      	uxtb	r6, r6
 8004892:	4283      	cmp	r3, r0
 8004894:	4637      	mov	r7, r6
 8004896:	dc04      	bgt.n	80048a2 <__swbuf_r+0x42>
 8004898:	4621      	mov	r1, r4
 800489a:	4628      	mov	r0, r5
 800489c:	f000 f926 	bl	8004aec <_fflush_r>
 80048a0:	bb30      	cbnz	r0, 80048f0 <__swbuf_r+0x90>
 80048a2:	68a3      	ldr	r3, [r4, #8]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	60a3      	str	r3, [r4, #8]
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	6022      	str	r2, [r4, #0]
 80048ae:	701e      	strb	r6, [r3, #0]
 80048b0:	6963      	ldr	r3, [r4, #20]
 80048b2:	3001      	adds	r0, #1
 80048b4:	4283      	cmp	r3, r0
 80048b6:	d004      	beq.n	80048c2 <__swbuf_r+0x62>
 80048b8:	89a3      	ldrh	r3, [r4, #12]
 80048ba:	07db      	lsls	r3, r3, #31
 80048bc:	d506      	bpl.n	80048cc <__swbuf_r+0x6c>
 80048be:	2e0a      	cmp	r6, #10
 80048c0:	d104      	bne.n	80048cc <__swbuf_r+0x6c>
 80048c2:	4621      	mov	r1, r4
 80048c4:	4628      	mov	r0, r5
 80048c6:	f000 f911 	bl	8004aec <_fflush_r>
 80048ca:	b988      	cbnz	r0, 80048f0 <__swbuf_r+0x90>
 80048cc:	4638      	mov	r0, r7
 80048ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048d0:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <__swbuf_r+0x9c>)
 80048d2:	429c      	cmp	r4, r3
 80048d4:	d101      	bne.n	80048da <__swbuf_r+0x7a>
 80048d6:	68ac      	ldr	r4, [r5, #8]
 80048d8:	e7cf      	b.n	800487a <__swbuf_r+0x1a>
 80048da:	4b09      	ldr	r3, [pc, #36]	; (8004900 <__swbuf_r+0xa0>)
 80048dc:	429c      	cmp	r4, r3
 80048de:	bf08      	it	eq
 80048e0:	68ec      	ldreq	r4, [r5, #12]
 80048e2:	e7ca      	b.n	800487a <__swbuf_r+0x1a>
 80048e4:	4621      	mov	r1, r4
 80048e6:	4628      	mov	r0, r5
 80048e8:	f000 f80c 	bl	8004904 <__swsetup_r>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d0cb      	beq.n	8004888 <__swbuf_r+0x28>
 80048f0:	f04f 37ff 	mov.w	r7, #4294967295
 80048f4:	e7ea      	b.n	80048cc <__swbuf_r+0x6c>
 80048f6:	bf00      	nop
 80048f8:	08005b2c 	.word	0x08005b2c
 80048fc:	08005b4c 	.word	0x08005b4c
 8004900:	08005b0c 	.word	0x08005b0c

08004904 <__swsetup_r>:
 8004904:	4b32      	ldr	r3, [pc, #200]	; (80049d0 <__swsetup_r+0xcc>)
 8004906:	b570      	push	{r4, r5, r6, lr}
 8004908:	681d      	ldr	r5, [r3, #0]
 800490a:	4606      	mov	r6, r0
 800490c:	460c      	mov	r4, r1
 800490e:	b125      	cbz	r5, 800491a <__swsetup_r+0x16>
 8004910:	69ab      	ldr	r3, [r5, #24]
 8004912:	b913      	cbnz	r3, 800491a <__swsetup_r+0x16>
 8004914:	4628      	mov	r0, r5
 8004916:	f000 f97d 	bl	8004c14 <__sinit>
 800491a:	4b2e      	ldr	r3, [pc, #184]	; (80049d4 <__swsetup_r+0xd0>)
 800491c:	429c      	cmp	r4, r3
 800491e:	d10f      	bne.n	8004940 <__swsetup_r+0x3c>
 8004920:	686c      	ldr	r4, [r5, #4]
 8004922:	89a3      	ldrh	r3, [r4, #12]
 8004924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004928:	0719      	lsls	r1, r3, #28
 800492a:	d42c      	bmi.n	8004986 <__swsetup_r+0x82>
 800492c:	06dd      	lsls	r5, r3, #27
 800492e:	d411      	bmi.n	8004954 <__swsetup_r+0x50>
 8004930:	2309      	movs	r3, #9
 8004932:	6033      	str	r3, [r6, #0]
 8004934:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004938:	81a3      	strh	r3, [r4, #12]
 800493a:	f04f 30ff 	mov.w	r0, #4294967295
 800493e:	e03e      	b.n	80049be <__swsetup_r+0xba>
 8004940:	4b25      	ldr	r3, [pc, #148]	; (80049d8 <__swsetup_r+0xd4>)
 8004942:	429c      	cmp	r4, r3
 8004944:	d101      	bne.n	800494a <__swsetup_r+0x46>
 8004946:	68ac      	ldr	r4, [r5, #8]
 8004948:	e7eb      	b.n	8004922 <__swsetup_r+0x1e>
 800494a:	4b24      	ldr	r3, [pc, #144]	; (80049dc <__swsetup_r+0xd8>)
 800494c:	429c      	cmp	r4, r3
 800494e:	bf08      	it	eq
 8004950:	68ec      	ldreq	r4, [r5, #12]
 8004952:	e7e6      	b.n	8004922 <__swsetup_r+0x1e>
 8004954:	0758      	lsls	r0, r3, #29
 8004956:	d512      	bpl.n	800497e <__swsetup_r+0x7a>
 8004958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800495a:	b141      	cbz	r1, 800496e <__swsetup_r+0x6a>
 800495c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004960:	4299      	cmp	r1, r3
 8004962:	d002      	beq.n	800496a <__swsetup_r+0x66>
 8004964:	4630      	mov	r0, r6
 8004966:	f000 fa59 	bl	8004e1c <_free_r>
 800496a:	2300      	movs	r3, #0
 800496c:	6363      	str	r3, [r4, #52]	; 0x34
 800496e:	89a3      	ldrh	r3, [r4, #12]
 8004970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004974:	81a3      	strh	r3, [r4, #12]
 8004976:	2300      	movs	r3, #0
 8004978:	6063      	str	r3, [r4, #4]
 800497a:	6923      	ldr	r3, [r4, #16]
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	89a3      	ldrh	r3, [r4, #12]
 8004980:	f043 0308 	orr.w	r3, r3, #8
 8004984:	81a3      	strh	r3, [r4, #12]
 8004986:	6923      	ldr	r3, [r4, #16]
 8004988:	b94b      	cbnz	r3, 800499e <__swsetup_r+0x9a>
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004994:	d003      	beq.n	800499e <__swsetup_r+0x9a>
 8004996:	4621      	mov	r1, r4
 8004998:	4630      	mov	r0, r6
 800499a:	f000 f9ff 	bl	8004d9c <__smakebuf_r>
 800499e:	89a0      	ldrh	r0, [r4, #12]
 80049a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049a4:	f010 0301 	ands.w	r3, r0, #1
 80049a8:	d00a      	beq.n	80049c0 <__swsetup_r+0xbc>
 80049aa:	2300      	movs	r3, #0
 80049ac:	60a3      	str	r3, [r4, #8]
 80049ae:	6963      	ldr	r3, [r4, #20]
 80049b0:	425b      	negs	r3, r3
 80049b2:	61a3      	str	r3, [r4, #24]
 80049b4:	6923      	ldr	r3, [r4, #16]
 80049b6:	b943      	cbnz	r3, 80049ca <__swsetup_r+0xc6>
 80049b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80049bc:	d1ba      	bne.n	8004934 <__swsetup_r+0x30>
 80049be:	bd70      	pop	{r4, r5, r6, pc}
 80049c0:	0781      	lsls	r1, r0, #30
 80049c2:	bf58      	it	pl
 80049c4:	6963      	ldrpl	r3, [r4, #20]
 80049c6:	60a3      	str	r3, [r4, #8]
 80049c8:	e7f4      	b.n	80049b4 <__swsetup_r+0xb0>
 80049ca:	2000      	movs	r0, #0
 80049cc:	e7f7      	b.n	80049be <__swsetup_r+0xba>
 80049ce:	bf00      	nop
 80049d0:	2000000c 	.word	0x2000000c
 80049d4:	08005b2c 	.word	0x08005b2c
 80049d8:	08005b4c 	.word	0x08005b4c
 80049dc:	08005b0c 	.word	0x08005b0c

080049e0 <__sflush_r>:
 80049e0:	898a      	ldrh	r2, [r1, #12]
 80049e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e6:	4605      	mov	r5, r0
 80049e8:	0710      	lsls	r0, r2, #28
 80049ea:	460c      	mov	r4, r1
 80049ec:	d458      	bmi.n	8004aa0 <__sflush_r+0xc0>
 80049ee:	684b      	ldr	r3, [r1, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	dc05      	bgt.n	8004a00 <__sflush_r+0x20>
 80049f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	dc02      	bgt.n	8004a00 <__sflush_r+0x20>
 80049fa:	2000      	movs	r0, #0
 80049fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a02:	2e00      	cmp	r6, #0
 8004a04:	d0f9      	beq.n	80049fa <__sflush_r+0x1a>
 8004a06:	2300      	movs	r3, #0
 8004a08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a0c:	682f      	ldr	r7, [r5, #0]
 8004a0e:	602b      	str	r3, [r5, #0]
 8004a10:	d032      	beq.n	8004a78 <__sflush_r+0x98>
 8004a12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a14:	89a3      	ldrh	r3, [r4, #12]
 8004a16:	075a      	lsls	r2, r3, #29
 8004a18:	d505      	bpl.n	8004a26 <__sflush_r+0x46>
 8004a1a:	6863      	ldr	r3, [r4, #4]
 8004a1c:	1ac0      	subs	r0, r0, r3
 8004a1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a20:	b10b      	cbz	r3, 8004a26 <__sflush_r+0x46>
 8004a22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a24:	1ac0      	subs	r0, r0, r3
 8004a26:	2300      	movs	r3, #0
 8004a28:	4602      	mov	r2, r0
 8004a2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a2c:	6a21      	ldr	r1, [r4, #32]
 8004a2e:	4628      	mov	r0, r5
 8004a30:	47b0      	blx	r6
 8004a32:	1c43      	adds	r3, r0, #1
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	d106      	bne.n	8004a46 <__sflush_r+0x66>
 8004a38:	6829      	ldr	r1, [r5, #0]
 8004a3a:	291d      	cmp	r1, #29
 8004a3c:	d82c      	bhi.n	8004a98 <__sflush_r+0xb8>
 8004a3e:	4a2a      	ldr	r2, [pc, #168]	; (8004ae8 <__sflush_r+0x108>)
 8004a40:	40ca      	lsrs	r2, r1
 8004a42:	07d6      	lsls	r6, r2, #31
 8004a44:	d528      	bpl.n	8004a98 <__sflush_r+0xb8>
 8004a46:	2200      	movs	r2, #0
 8004a48:	6062      	str	r2, [r4, #4]
 8004a4a:	04d9      	lsls	r1, r3, #19
 8004a4c:	6922      	ldr	r2, [r4, #16]
 8004a4e:	6022      	str	r2, [r4, #0]
 8004a50:	d504      	bpl.n	8004a5c <__sflush_r+0x7c>
 8004a52:	1c42      	adds	r2, r0, #1
 8004a54:	d101      	bne.n	8004a5a <__sflush_r+0x7a>
 8004a56:	682b      	ldr	r3, [r5, #0]
 8004a58:	b903      	cbnz	r3, 8004a5c <__sflush_r+0x7c>
 8004a5a:	6560      	str	r0, [r4, #84]	; 0x54
 8004a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a5e:	602f      	str	r7, [r5, #0]
 8004a60:	2900      	cmp	r1, #0
 8004a62:	d0ca      	beq.n	80049fa <__sflush_r+0x1a>
 8004a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a68:	4299      	cmp	r1, r3
 8004a6a:	d002      	beq.n	8004a72 <__sflush_r+0x92>
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	f000 f9d5 	bl	8004e1c <_free_r>
 8004a72:	2000      	movs	r0, #0
 8004a74:	6360      	str	r0, [r4, #52]	; 0x34
 8004a76:	e7c1      	b.n	80049fc <__sflush_r+0x1c>
 8004a78:	6a21      	ldr	r1, [r4, #32]
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	47b0      	blx	r6
 8004a80:	1c41      	adds	r1, r0, #1
 8004a82:	d1c7      	bne.n	8004a14 <__sflush_r+0x34>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0c4      	beq.n	8004a14 <__sflush_r+0x34>
 8004a8a:	2b1d      	cmp	r3, #29
 8004a8c:	d001      	beq.n	8004a92 <__sflush_r+0xb2>
 8004a8e:	2b16      	cmp	r3, #22
 8004a90:	d101      	bne.n	8004a96 <__sflush_r+0xb6>
 8004a92:	602f      	str	r7, [r5, #0]
 8004a94:	e7b1      	b.n	80049fa <__sflush_r+0x1a>
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a9c:	81a3      	strh	r3, [r4, #12]
 8004a9e:	e7ad      	b.n	80049fc <__sflush_r+0x1c>
 8004aa0:	690f      	ldr	r7, [r1, #16]
 8004aa2:	2f00      	cmp	r7, #0
 8004aa4:	d0a9      	beq.n	80049fa <__sflush_r+0x1a>
 8004aa6:	0793      	lsls	r3, r2, #30
 8004aa8:	680e      	ldr	r6, [r1, #0]
 8004aaa:	bf08      	it	eq
 8004aac:	694b      	ldreq	r3, [r1, #20]
 8004aae:	600f      	str	r7, [r1, #0]
 8004ab0:	bf18      	it	ne
 8004ab2:	2300      	movne	r3, #0
 8004ab4:	eba6 0807 	sub.w	r8, r6, r7
 8004ab8:	608b      	str	r3, [r1, #8]
 8004aba:	f1b8 0f00 	cmp.w	r8, #0
 8004abe:	dd9c      	ble.n	80049fa <__sflush_r+0x1a>
 8004ac0:	6a21      	ldr	r1, [r4, #32]
 8004ac2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ac4:	4643      	mov	r3, r8
 8004ac6:	463a      	mov	r2, r7
 8004ac8:	4628      	mov	r0, r5
 8004aca:	47b0      	blx	r6
 8004acc:	2800      	cmp	r0, #0
 8004ace:	dc06      	bgt.n	8004ade <__sflush_r+0xfe>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad6:	81a3      	strh	r3, [r4, #12]
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	e78e      	b.n	80049fc <__sflush_r+0x1c>
 8004ade:	4407      	add	r7, r0
 8004ae0:	eba8 0800 	sub.w	r8, r8, r0
 8004ae4:	e7e9      	b.n	8004aba <__sflush_r+0xda>
 8004ae6:	bf00      	nop
 8004ae8:	20400001 	.word	0x20400001

08004aec <_fflush_r>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	690b      	ldr	r3, [r1, #16]
 8004af0:	4605      	mov	r5, r0
 8004af2:	460c      	mov	r4, r1
 8004af4:	b913      	cbnz	r3, 8004afc <_fflush_r+0x10>
 8004af6:	2500      	movs	r5, #0
 8004af8:	4628      	mov	r0, r5
 8004afa:	bd38      	pop	{r3, r4, r5, pc}
 8004afc:	b118      	cbz	r0, 8004b06 <_fflush_r+0x1a>
 8004afe:	6983      	ldr	r3, [r0, #24]
 8004b00:	b90b      	cbnz	r3, 8004b06 <_fflush_r+0x1a>
 8004b02:	f000 f887 	bl	8004c14 <__sinit>
 8004b06:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <_fflush_r+0x6c>)
 8004b08:	429c      	cmp	r4, r3
 8004b0a:	d11b      	bne.n	8004b44 <_fflush_r+0x58>
 8004b0c:	686c      	ldr	r4, [r5, #4]
 8004b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0ef      	beq.n	8004af6 <_fflush_r+0xa>
 8004b16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b18:	07d0      	lsls	r0, r2, #31
 8004b1a:	d404      	bmi.n	8004b26 <_fflush_r+0x3a>
 8004b1c:	0599      	lsls	r1, r3, #22
 8004b1e:	d402      	bmi.n	8004b26 <_fflush_r+0x3a>
 8004b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b22:	f000 f915 	bl	8004d50 <__retarget_lock_acquire_recursive>
 8004b26:	4628      	mov	r0, r5
 8004b28:	4621      	mov	r1, r4
 8004b2a:	f7ff ff59 	bl	80049e0 <__sflush_r>
 8004b2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b30:	07da      	lsls	r2, r3, #31
 8004b32:	4605      	mov	r5, r0
 8004b34:	d4e0      	bmi.n	8004af8 <_fflush_r+0xc>
 8004b36:	89a3      	ldrh	r3, [r4, #12]
 8004b38:	059b      	lsls	r3, r3, #22
 8004b3a:	d4dd      	bmi.n	8004af8 <_fflush_r+0xc>
 8004b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b3e:	f000 f908 	bl	8004d52 <__retarget_lock_release_recursive>
 8004b42:	e7d9      	b.n	8004af8 <_fflush_r+0xc>
 8004b44:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <_fflush_r+0x70>)
 8004b46:	429c      	cmp	r4, r3
 8004b48:	d101      	bne.n	8004b4e <_fflush_r+0x62>
 8004b4a:	68ac      	ldr	r4, [r5, #8]
 8004b4c:	e7df      	b.n	8004b0e <_fflush_r+0x22>
 8004b4e:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <_fflush_r+0x74>)
 8004b50:	429c      	cmp	r4, r3
 8004b52:	bf08      	it	eq
 8004b54:	68ec      	ldreq	r4, [r5, #12]
 8004b56:	e7da      	b.n	8004b0e <_fflush_r+0x22>
 8004b58:	08005b2c 	.word	0x08005b2c
 8004b5c:	08005b4c 	.word	0x08005b4c
 8004b60:	08005b0c 	.word	0x08005b0c

08004b64 <std>:
 8004b64:	2300      	movs	r3, #0
 8004b66:	b510      	push	{r4, lr}
 8004b68:	4604      	mov	r4, r0
 8004b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8004b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b72:	6083      	str	r3, [r0, #8]
 8004b74:	8181      	strh	r1, [r0, #12]
 8004b76:	6643      	str	r3, [r0, #100]	; 0x64
 8004b78:	81c2      	strh	r2, [r0, #14]
 8004b7a:	6183      	str	r3, [r0, #24]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	2208      	movs	r2, #8
 8004b80:	305c      	adds	r0, #92	; 0x5c
 8004b82:	f7ff fdb7 	bl	80046f4 <memset>
 8004b86:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <std+0x38>)
 8004b88:	6263      	str	r3, [r4, #36]	; 0x24
 8004b8a:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <std+0x3c>)
 8004b8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b8e:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <std+0x40>)
 8004b90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b92:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <std+0x44>)
 8004b94:	6224      	str	r4, [r4, #32]
 8004b96:	6323      	str	r3, [r4, #48]	; 0x30
 8004b98:	bd10      	pop	{r4, pc}
 8004b9a:	bf00      	nop
 8004b9c:	08005825 	.word	0x08005825
 8004ba0:	08005847 	.word	0x08005847
 8004ba4:	0800587f 	.word	0x0800587f
 8004ba8:	080058a3 	.word	0x080058a3

08004bac <_cleanup_r>:
 8004bac:	4901      	ldr	r1, [pc, #4]	; (8004bb4 <_cleanup_r+0x8>)
 8004bae:	f000 b8af 	b.w	8004d10 <_fwalk_reent>
 8004bb2:	bf00      	nop
 8004bb4:	08004aed 	.word	0x08004aed

08004bb8 <__sfmoreglue>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	1e4a      	subs	r2, r1, #1
 8004bbc:	2568      	movs	r5, #104	; 0x68
 8004bbe:	4355      	muls	r5, r2
 8004bc0:	460e      	mov	r6, r1
 8004bc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004bc6:	f000 f979 	bl	8004ebc <_malloc_r>
 8004bca:	4604      	mov	r4, r0
 8004bcc:	b140      	cbz	r0, 8004be0 <__sfmoreglue+0x28>
 8004bce:	2100      	movs	r1, #0
 8004bd0:	e9c0 1600 	strd	r1, r6, [r0]
 8004bd4:	300c      	adds	r0, #12
 8004bd6:	60a0      	str	r0, [r4, #8]
 8004bd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004bdc:	f7ff fd8a 	bl	80046f4 <memset>
 8004be0:	4620      	mov	r0, r4
 8004be2:	bd70      	pop	{r4, r5, r6, pc}

08004be4 <__sfp_lock_acquire>:
 8004be4:	4801      	ldr	r0, [pc, #4]	; (8004bec <__sfp_lock_acquire+0x8>)
 8004be6:	f000 b8b3 	b.w	8004d50 <__retarget_lock_acquire_recursive>
 8004bea:	bf00      	nop
 8004bec:	20000270 	.word	0x20000270

08004bf0 <__sfp_lock_release>:
 8004bf0:	4801      	ldr	r0, [pc, #4]	; (8004bf8 <__sfp_lock_release+0x8>)
 8004bf2:	f000 b8ae 	b.w	8004d52 <__retarget_lock_release_recursive>
 8004bf6:	bf00      	nop
 8004bf8:	20000270 	.word	0x20000270

08004bfc <__sinit_lock_acquire>:
 8004bfc:	4801      	ldr	r0, [pc, #4]	; (8004c04 <__sinit_lock_acquire+0x8>)
 8004bfe:	f000 b8a7 	b.w	8004d50 <__retarget_lock_acquire_recursive>
 8004c02:	bf00      	nop
 8004c04:	2000026b 	.word	0x2000026b

08004c08 <__sinit_lock_release>:
 8004c08:	4801      	ldr	r0, [pc, #4]	; (8004c10 <__sinit_lock_release+0x8>)
 8004c0a:	f000 b8a2 	b.w	8004d52 <__retarget_lock_release_recursive>
 8004c0e:	bf00      	nop
 8004c10:	2000026b 	.word	0x2000026b

08004c14 <__sinit>:
 8004c14:	b510      	push	{r4, lr}
 8004c16:	4604      	mov	r4, r0
 8004c18:	f7ff fff0 	bl	8004bfc <__sinit_lock_acquire>
 8004c1c:	69a3      	ldr	r3, [r4, #24]
 8004c1e:	b11b      	cbz	r3, 8004c28 <__sinit+0x14>
 8004c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c24:	f7ff bff0 	b.w	8004c08 <__sinit_lock_release>
 8004c28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c2c:	6523      	str	r3, [r4, #80]	; 0x50
 8004c2e:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <__sinit+0x68>)
 8004c30:	4a13      	ldr	r2, [pc, #76]	; (8004c80 <__sinit+0x6c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c36:	42a3      	cmp	r3, r4
 8004c38:	bf04      	itt	eq
 8004c3a:	2301      	moveq	r3, #1
 8004c3c:	61a3      	streq	r3, [r4, #24]
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f000 f820 	bl	8004c84 <__sfp>
 8004c44:	6060      	str	r0, [r4, #4]
 8004c46:	4620      	mov	r0, r4
 8004c48:	f000 f81c 	bl	8004c84 <__sfp>
 8004c4c:	60a0      	str	r0, [r4, #8]
 8004c4e:	4620      	mov	r0, r4
 8004c50:	f000 f818 	bl	8004c84 <__sfp>
 8004c54:	2200      	movs	r2, #0
 8004c56:	60e0      	str	r0, [r4, #12]
 8004c58:	2104      	movs	r1, #4
 8004c5a:	6860      	ldr	r0, [r4, #4]
 8004c5c:	f7ff ff82 	bl	8004b64 <std>
 8004c60:	68a0      	ldr	r0, [r4, #8]
 8004c62:	2201      	movs	r2, #1
 8004c64:	2109      	movs	r1, #9
 8004c66:	f7ff ff7d 	bl	8004b64 <std>
 8004c6a:	68e0      	ldr	r0, [r4, #12]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	2112      	movs	r1, #18
 8004c70:	f7ff ff78 	bl	8004b64 <std>
 8004c74:	2301      	movs	r3, #1
 8004c76:	61a3      	str	r3, [r4, #24]
 8004c78:	e7d2      	b.n	8004c20 <__sinit+0xc>
 8004c7a:	bf00      	nop
 8004c7c:	08005b08 	.word	0x08005b08
 8004c80:	08004bad 	.word	0x08004bad

08004c84 <__sfp>:
 8004c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c86:	4607      	mov	r7, r0
 8004c88:	f7ff ffac 	bl	8004be4 <__sfp_lock_acquire>
 8004c8c:	4b1e      	ldr	r3, [pc, #120]	; (8004d08 <__sfp+0x84>)
 8004c8e:	681e      	ldr	r6, [r3, #0]
 8004c90:	69b3      	ldr	r3, [r6, #24]
 8004c92:	b913      	cbnz	r3, 8004c9a <__sfp+0x16>
 8004c94:	4630      	mov	r0, r6
 8004c96:	f7ff ffbd 	bl	8004c14 <__sinit>
 8004c9a:	3648      	adds	r6, #72	; 0x48
 8004c9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	d503      	bpl.n	8004cac <__sfp+0x28>
 8004ca4:	6833      	ldr	r3, [r6, #0]
 8004ca6:	b30b      	cbz	r3, 8004cec <__sfp+0x68>
 8004ca8:	6836      	ldr	r6, [r6, #0]
 8004caa:	e7f7      	b.n	8004c9c <__sfp+0x18>
 8004cac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004cb0:	b9d5      	cbnz	r5, 8004ce8 <__sfp+0x64>
 8004cb2:	4b16      	ldr	r3, [pc, #88]	; (8004d0c <__sfp+0x88>)
 8004cb4:	60e3      	str	r3, [r4, #12]
 8004cb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004cba:	6665      	str	r5, [r4, #100]	; 0x64
 8004cbc:	f000 f847 	bl	8004d4e <__retarget_lock_init_recursive>
 8004cc0:	f7ff ff96 	bl	8004bf0 <__sfp_lock_release>
 8004cc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004cc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ccc:	6025      	str	r5, [r4, #0]
 8004cce:	61a5      	str	r5, [r4, #24]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004cd8:	f7ff fd0c 	bl	80046f4 <memset>
 8004cdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce8:	3468      	adds	r4, #104	; 0x68
 8004cea:	e7d9      	b.n	8004ca0 <__sfp+0x1c>
 8004cec:	2104      	movs	r1, #4
 8004cee:	4638      	mov	r0, r7
 8004cf0:	f7ff ff62 	bl	8004bb8 <__sfmoreglue>
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	6030      	str	r0, [r6, #0]
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	d1d5      	bne.n	8004ca8 <__sfp+0x24>
 8004cfc:	f7ff ff78 	bl	8004bf0 <__sfp_lock_release>
 8004d00:	230c      	movs	r3, #12
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	e7ee      	b.n	8004ce4 <__sfp+0x60>
 8004d06:	bf00      	nop
 8004d08:	08005b08 	.word	0x08005b08
 8004d0c:	ffff0001 	.word	0xffff0001

08004d10 <_fwalk_reent>:
 8004d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d14:	4606      	mov	r6, r0
 8004d16:	4688      	mov	r8, r1
 8004d18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d1c:	2700      	movs	r7, #0
 8004d1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d22:	f1b9 0901 	subs.w	r9, r9, #1
 8004d26:	d505      	bpl.n	8004d34 <_fwalk_reent+0x24>
 8004d28:	6824      	ldr	r4, [r4, #0]
 8004d2a:	2c00      	cmp	r4, #0
 8004d2c:	d1f7      	bne.n	8004d1e <_fwalk_reent+0xe>
 8004d2e:	4638      	mov	r0, r7
 8004d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d34:	89ab      	ldrh	r3, [r5, #12]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d907      	bls.n	8004d4a <_fwalk_reent+0x3a>
 8004d3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	d003      	beq.n	8004d4a <_fwalk_reent+0x3a>
 8004d42:	4629      	mov	r1, r5
 8004d44:	4630      	mov	r0, r6
 8004d46:	47c0      	blx	r8
 8004d48:	4307      	orrs	r7, r0
 8004d4a:	3568      	adds	r5, #104	; 0x68
 8004d4c:	e7e9      	b.n	8004d22 <_fwalk_reent+0x12>

08004d4e <__retarget_lock_init_recursive>:
 8004d4e:	4770      	bx	lr

08004d50 <__retarget_lock_acquire_recursive>:
 8004d50:	4770      	bx	lr

08004d52 <__retarget_lock_release_recursive>:
 8004d52:	4770      	bx	lr

08004d54 <__swhatbuf_r>:
 8004d54:	b570      	push	{r4, r5, r6, lr}
 8004d56:	460e      	mov	r6, r1
 8004d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d5c:	2900      	cmp	r1, #0
 8004d5e:	b096      	sub	sp, #88	; 0x58
 8004d60:	4614      	mov	r4, r2
 8004d62:	461d      	mov	r5, r3
 8004d64:	da07      	bge.n	8004d76 <__swhatbuf_r+0x22>
 8004d66:	2300      	movs	r3, #0
 8004d68:	602b      	str	r3, [r5, #0]
 8004d6a:	89b3      	ldrh	r3, [r6, #12]
 8004d6c:	061a      	lsls	r2, r3, #24
 8004d6e:	d410      	bmi.n	8004d92 <__swhatbuf_r+0x3e>
 8004d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d74:	e00e      	b.n	8004d94 <__swhatbuf_r+0x40>
 8004d76:	466a      	mov	r2, sp
 8004d78:	f000 fdba 	bl	80058f0 <_fstat_r>
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	dbf2      	blt.n	8004d66 <__swhatbuf_r+0x12>
 8004d80:	9a01      	ldr	r2, [sp, #4]
 8004d82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d8a:	425a      	negs	r2, r3
 8004d8c:	415a      	adcs	r2, r3
 8004d8e:	602a      	str	r2, [r5, #0]
 8004d90:	e7ee      	b.n	8004d70 <__swhatbuf_r+0x1c>
 8004d92:	2340      	movs	r3, #64	; 0x40
 8004d94:	2000      	movs	r0, #0
 8004d96:	6023      	str	r3, [r4, #0]
 8004d98:	b016      	add	sp, #88	; 0x58
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}

08004d9c <__smakebuf_r>:
 8004d9c:	898b      	ldrh	r3, [r1, #12]
 8004d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004da0:	079d      	lsls	r5, r3, #30
 8004da2:	4606      	mov	r6, r0
 8004da4:	460c      	mov	r4, r1
 8004da6:	d507      	bpl.n	8004db8 <__smakebuf_r+0x1c>
 8004da8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004dac:	6023      	str	r3, [r4, #0]
 8004dae:	6123      	str	r3, [r4, #16]
 8004db0:	2301      	movs	r3, #1
 8004db2:	6163      	str	r3, [r4, #20]
 8004db4:	b002      	add	sp, #8
 8004db6:	bd70      	pop	{r4, r5, r6, pc}
 8004db8:	ab01      	add	r3, sp, #4
 8004dba:	466a      	mov	r2, sp
 8004dbc:	f7ff ffca 	bl	8004d54 <__swhatbuf_r>
 8004dc0:	9900      	ldr	r1, [sp, #0]
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	f000 f879 	bl	8004ebc <_malloc_r>
 8004dca:	b948      	cbnz	r0, 8004de0 <__smakebuf_r+0x44>
 8004dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dd0:	059a      	lsls	r2, r3, #22
 8004dd2:	d4ef      	bmi.n	8004db4 <__smakebuf_r+0x18>
 8004dd4:	f023 0303 	bic.w	r3, r3, #3
 8004dd8:	f043 0302 	orr.w	r3, r3, #2
 8004ddc:	81a3      	strh	r3, [r4, #12]
 8004dde:	e7e3      	b.n	8004da8 <__smakebuf_r+0xc>
 8004de0:	4b0d      	ldr	r3, [pc, #52]	; (8004e18 <__smakebuf_r+0x7c>)
 8004de2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004de4:	89a3      	ldrh	r3, [r4, #12]
 8004de6:	6020      	str	r0, [r4, #0]
 8004de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dec:	81a3      	strh	r3, [r4, #12]
 8004dee:	9b00      	ldr	r3, [sp, #0]
 8004df0:	6163      	str	r3, [r4, #20]
 8004df2:	9b01      	ldr	r3, [sp, #4]
 8004df4:	6120      	str	r0, [r4, #16]
 8004df6:	b15b      	cbz	r3, 8004e10 <__smakebuf_r+0x74>
 8004df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	f000 fd89 	bl	8005914 <_isatty_r>
 8004e02:	b128      	cbz	r0, 8004e10 <__smakebuf_r+0x74>
 8004e04:	89a3      	ldrh	r3, [r4, #12]
 8004e06:	f023 0303 	bic.w	r3, r3, #3
 8004e0a:	f043 0301 	orr.w	r3, r3, #1
 8004e0e:	81a3      	strh	r3, [r4, #12]
 8004e10:	89a0      	ldrh	r0, [r4, #12]
 8004e12:	4305      	orrs	r5, r0
 8004e14:	81a5      	strh	r5, [r4, #12]
 8004e16:	e7cd      	b.n	8004db4 <__smakebuf_r+0x18>
 8004e18:	08004bad 	.word	0x08004bad

08004e1c <_free_r>:
 8004e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e1e:	2900      	cmp	r1, #0
 8004e20:	d048      	beq.n	8004eb4 <_free_r+0x98>
 8004e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e26:	9001      	str	r0, [sp, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f1a1 0404 	sub.w	r4, r1, #4
 8004e2e:	bfb8      	it	lt
 8004e30:	18e4      	addlt	r4, r4, r3
 8004e32:	f000 fdb9 	bl	80059a8 <__malloc_lock>
 8004e36:	4a20      	ldr	r2, [pc, #128]	; (8004eb8 <_free_r+0x9c>)
 8004e38:	9801      	ldr	r0, [sp, #4]
 8004e3a:	6813      	ldr	r3, [r2, #0]
 8004e3c:	4615      	mov	r5, r2
 8004e3e:	b933      	cbnz	r3, 8004e4e <_free_r+0x32>
 8004e40:	6063      	str	r3, [r4, #4]
 8004e42:	6014      	str	r4, [r2, #0]
 8004e44:	b003      	add	sp, #12
 8004e46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e4a:	f000 bdb3 	b.w	80059b4 <__malloc_unlock>
 8004e4e:	42a3      	cmp	r3, r4
 8004e50:	d90b      	bls.n	8004e6a <_free_r+0x4e>
 8004e52:	6821      	ldr	r1, [r4, #0]
 8004e54:	1862      	adds	r2, r4, r1
 8004e56:	4293      	cmp	r3, r2
 8004e58:	bf04      	itt	eq
 8004e5a:	681a      	ldreq	r2, [r3, #0]
 8004e5c:	685b      	ldreq	r3, [r3, #4]
 8004e5e:	6063      	str	r3, [r4, #4]
 8004e60:	bf04      	itt	eq
 8004e62:	1852      	addeq	r2, r2, r1
 8004e64:	6022      	streq	r2, [r4, #0]
 8004e66:	602c      	str	r4, [r5, #0]
 8004e68:	e7ec      	b.n	8004e44 <_free_r+0x28>
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	b10b      	cbz	r3, 8004e74 <_free_r+0x58>
 8004e70:	42a3      	cmp	r3, r4
 8004e72:	d9fa      	bls.n	8004e6a <_free_r+0x4e>
 8004e74:	6811      	ldr	r1, [r2, #0]
 8004e76:	1855      	adds	r5, r2, r1
 8004e78:	42a5      	cmp	r5, r4
 8004e7a:	d10b      	bne.n	8004e94 <_free_r+0x78>
 8004e7c:	6824      	ldr	r4, [r4, #0]
 8004e7e:	4421      	add	r1, r4
 8004e80:	1854      	adds	r4, r2, r1
 8004e82:	42a3      	cmp	r3, r4
 8004e84:	6011      	str	r1, [r2, #0]
 8004e86:	d1dd      	bne.n	8004e44 <_free_r+0x28>
 8004e88:	681c      	ldr	r4, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	6053      	str	r3, [r2, #4]
 8004e8e:	4421      	add	r1, r4
 8004e90:	6011      	str	r1, [r2, #0]
 8004e92:	e7d7      	b.n	8004e44 <_free_r+0x28>
 8004e94:	d902      	bls.n	8004e9c <_free_r+0x80>
 8004e96:	230c      	movs	r3, #12
 8004e98:	6003      	str	r3, [r0, #0]
 8004e9a:	e7d3      	b.n	8004e44 <_free_r+0x28>
 8004e9c:	6825      	ldr	r5, [r4, #0]
 8004e9e:	1961      	adds	r1, r4, r5
 8004ea0:	428b      	cmp	r3, r1
 8004ea2:	bf04      	itt	eq
 8004ea4:	6819      	ldreq	r1, [r3, #0]
 8004ea6:	685b      	ldreq	r3, [r3, #4]
 8004ea8:	6063      	str	r3, [r4, #4]
 8004eaa:	bf04      	itt	eq
 8004eac:	1949      	addeq	r1, r1, r5
 8004eae:	6021      	streq	r1, [r4, #0]
 8004eb0:	6054      	str	r4, [r2, #4]
 8004eb2:	e7c7      	b.n	8004e44 <_free_r+0x28>
 8004eb4:	b003      	add	sp, #12
 8004eb6:	bd30      	pop	{r4, r5, pc}
 8004eb8:	20000090 	.word	0x20000090

08004ebc <_malloc_r>:
 8004ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebe:	1ccd      	adds	r5, r1, #3
 8004ec0:	f025 0503 	bic.w	r5, r5, #3
 8004ec4:	3508      	adds	r5, #8
 8004ec6:	2d0c      	cmp	r5, #12
 8004ec8:	bf38      	it	cc
 8004eca:	250c      	movcc	r5, #12
 8004ecc:	2d00      	cmp	r5, #0
 8004ece:	4606      	mov	r6, r0
 8004ed0:	db01      	blt.n	8004ed6 <_malloc_r+0x1a>
 8004ed2:	42a9      	cmp	r1, r5
 8004ed4:	d903      	bls.n	8004ede <_malloc_r+0x22>
 8004ed6:	230c      	movs	r3, #12
 8004ed8:	6033      	str	r3, [r6, #0]
 8004eda:	2000      	movs	r0, #0
 8004edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ede:	f000 fd63 	bl	80059a8 <__malloc_lock>
 8004ee2:	4921      	ldr	r1, [pc, #132]	; (8004f68 <_malloc_r+0xac>)
 8004ee4:	680a      	ldr	r2, [r1, #0]
 8004ee6:	4614      	mov	r4, r2
 8004ee8:	b99c      	cbnz	r4, 8004f12 <_malloc_r+0x56>
 8004eea:	4f20      	ldr	r7, [pc, #128]	; (8004f6c <_malloc_r+0xb0>)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	b923      	cbnz	r3, 8004efa <_malloc_r+0x3e>
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f000 fc86 	bl	8005804 <_sbrk_r>
 8004ef8:	6038      	str	r0, [r7, #0]
 8004efa:	4629      	mov	r1, r5
 8004efc:	4630      	mov	r0, r6
 8004efe:	f000 fc81 	bl	8005804 <_sbrk_r>
 8004f02:	1c43      	adds	r3, r0, #1
 8004f04:	d123      	bne.n	8004f4e <_malloc_r+0x92>
 8004f06:	230c      	movs	r3, #12
 8004f08:	6033      	str	r3, [r6, #0]
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	f000 fd52 	bl	80059b4 <__malloc_unlock>
 8004f10:	e7e3      	b.n	8004eda <_malloc_r+0x1e>
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	1b5b      	subs	r3, r3, r5
 8004f16:	d417      	bmi.n	8004f48 <_malloc_r+0x8c>
 8004f18:	2b0b      	cmp	r3, #11
 8004f1a:	d903      	bls.n	8004f24 <_malloc_r+0x68>
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	441c      	add	r4, r3
 8004f20:	6025      	str	r5, [r4, #0]
 8004f22:	e004      	b.n	8004f2e <_malloc_r+0x72>
 8004f24:	6863      	ldr	r3, [r4, #4]
 8004f26:	42a2      	cmp	r2, r4
 8004f28:	bf0c      	ite	eq
 8004f2a:	600b      	streq	r3, [r1, #0]
 8004f2c:	6053      	strne	r3, [r2, #4]
 8004f2e:	4630      	mov	r0, r6
 8004f30:	f000 fd40 	bl	80059b4 <__malloc_unlock>
 8004f34:	f104 000b 	add.w	r0, r4, #11
 8004f38:	1d23      	adds	r3, r4, #4
 8004f3a:	f020 0007 	bic.w	r0, r0, #7
 8004f3e:	1ac2      	subs	r2, r0, r3
 8004f40:	d0cc      	beq.n	8004edc <_malloc_r+0x20>
 8004f42:	1a1b      	subs	r3, r3, r0
 8004f44:	50a3      	str	r3, [r4, r2]
 8004f46:	e7c9      	b.n	8004edc <_malloc_r+0x20>
 8004f48:	4622      	mov	r2, r4
 8004f4a:	6864      	ldr	r4, [r4, #4]
 8004f4c:	e7cc      	b.n	8004ee8 <_malloc_r+0x2c>
 8004f4e:	1cc4      	adds	r4, r0, #3
 8004f50:	f024 0403 	bic.w	r4, r4, #3
 8004f54:	42a0      	cmp	r0, r4
 8004f56:	d0e3      	beq.n	8004f20 <_malloc_r+0x64>
 8004f58:	1a21      	subs	r1, r4, r0
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	f000 fc52 	bl	8005804 <_sbrk_r>
 8004f60:	3001      	adds	r0, #1
 8004f62:	d1dd      	bne.n	8004f20 <_malloc_r+0x64>
 8004f64:	e7cf      	b.n	8004f06 <_malloc_r+0x4a>
 8004f66:	bf00      	nop
 8004f68:	20000090 	.word	0x20000090
 8004f6c:	20000094 	.word	0x20000094

08004f70 <__ssputs_r>:
 8004f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f74:	688e      	ldr	r6, [r1, #8]
 8004f76:	429e      	cmp	r6, r3
 8004f78:	4682      	mov	sl, r0
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	4690      	mov	r8, r2
 8004f7e:	461f      	mov	r7, r3
 8004f80:	d838      	bhi.n	8004ff4 <__ssputs_r+0x84>
 8004f82:	898a      	ldrh	r2, [r1, #12]
 8004f84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f88:	d032      	beq.n	8004ff0 <__ssputs_r+0x80>
 8004f8a:	6825      	ldr	r5, [r4, #0]
 8004f8c:	6909      	ldr	r1, [r1, #16]
 8004f8e:	eba5 0901 	sub.w	r9, r5, r1
 8004f92:	6965      	ldr	r5, [r4, #20]
 8004f94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	444b      	add	r3, r9
 8004fa0:	106d      	asrs	r5, r5, #1
 8004fa2:	429d      	cmp	r5, r3
 8004fa4:	bf38      	it	cc
 8004fa6:	461d      	movcc	r5, r3
 8004fa8:	0553      	lsls	r3, r2, #21
 8004faa:	d531      	bpl.n	8005010 <__ssputs_r+0xa0>
 8004fac:	4629      	mov	r1, r5
 8004fae:	f7ff ff85 	bl	8004ebc <_malloc_r>
 8004fb2:	4606      	mov	r6, r0
 8004fb4:	b950      	cbnz	r0, 8004fcc <__ssputs_r+0x5c>
 8004fb6:	230c      	movs	r3, #12
 8004fb8:	f8ca 3000 	str.w	r3, [sl]
 8004fbc:	89a3      	ldrh	r3, [r4, #12]
 8004fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fc2:	81a3      	strh	r3, [r4, #12]
 8004fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fcc:	6921      	ldr	r1, [r4, #16]
 8004fce:	464a      	mov	r2, r9
 8004fd0:	f000 fcc2 	bl	8005958 <memcpy>
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fde:	81a3      	strh	r3, [r4, #12]
 8004fe0:	6126      	str	r6, [r4, #16]
 8004fe2:	6165      	str	r5, [r4, #20]
 8004fe4:	444e      	add	r6, r9
 8004fe6:	eba5 0509 	sub.w	r5, r5, r9
 8004fea:	6026      	str	r6, [r4, #0]
 8004fec:	60a5      	str	r5, [r4, #8]
 8004fee:	463e      	mov	r6, r7
 8004ff0:	42be      	cmp	r6, r7
 8004ff2:	d900      	bls.n	8004ff6 <__ssputs_r+0x86>
 8004ff4:	463e      	mov	r6, r7
 8004ff6:	4632      	mov	r2, r6
 8004ff8:	6820      	ldr	r0, [r4, #0]
 8004ffa:	4641      	mov	r1, r8
 8004ffc:	f000 fcba 	bl	8005974 <memmove>
 8005000:	68a3      	ldr	r3, [r4, #8]
 8005002:	6822      	ldr	r2, [r4, #0]
 8005004:	1b9b      	subs	r3, r3, r6
 8005006:	4432      	add	r2, r6
 8005008:	60a3      	str	r3, [r4, #8]
 800500a:	6022      	str	r2, [r4, #0]
 800500c:	2000      	movs	r0, #0
 800500e:	e7db      	b.n	8004fc8 <__ssputs_r+0x58>
 8005010:	462a      	mov	r2, r5
 8005012:	f000 fcd5 	bl	80059c0 <_realloc_r>
 8005016:	4606      	mov	r6, r0
 8005018:	2800      	cmp	r0, #0
 800501a:	d1e1      	bne.n	8004fe0 <__ssputs_r+0x70>
 800501c:	6921      	ldr	r1, [r4, #16]
 800501e:	4650      	mov	r0, sl
 8005020:	f7ff fefc 	bl	8004e1c <_free_r>
 8005024:	e7c7      	b.n	8004fb6 <__ssputs_r+0x46>
	...

08005028 <_svfiprintf_r>:
 8005028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502c:	4698      	mov	r8, r3
 800502e:	898b      	ldrh	r3, [r1, #12]
 8005030:	061b      	lsls	r3, r3, #24
 8005032:	b09d      	sub	sp, #116	; 0x74
 8005034:	4607      	mov	r7, r0
 8005036:	460d      	mov	r5, r1
 8005038:	4614      	mov	r4, r2
 800503a:	d50e      	bpl.n	800505a <_svfiprintf_r+0x32>
 800503c:	690b      	ldr	r3, [r1, #16]
 800503e:	b963      	cbnz	r3, 800505a <_svfiprintf_r+0x32>
 8005040:	2140      	movs	r1, #64	; 0x40
 8005042:	f7ff ff3b 	bl	8004ebc <_malloc_r>
 8005046:	6028      	str	r0, [r5, #0]
 8005048:	6128      	str	r0, [r5, #16]
 800504a:	b920      	cbnz	r0, 8005056 <_svfiprintf_r+0x2e>
 800504c:	230c      	movs	r3, #12
 800504e:	603b      	str	r3, [r7, #0]
 8005050:	f04f 30ff 	mov.w	r0, #4294967295
 8005054:	e0d1      	b.n	80051fa <_svfiprintf_r+0x1d2>
 8005056:	2340      	movs	r3, #64	; 0x40
 8005058:	616b      	str	r3, [r5, #20]
 800505a:	2300      	movs	r3, #0
 800505c:	9309      	str	r3, [sp, #36]	; 0x24
 800505e:	2320      	movs	r3, #32
 8005060:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005064:	f8cd 800c 	str.w	r8, [sp, #12]
 8005068:	2330      	movs	r3, #48	; 0x30
 800506a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005214 <_svfiprintf_r+0x1ec>
 800506e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005072:	f04f 0901 	mov.w	r9, #1
 8005076:	4623      	mov	r3, r4
 8005078:	469a      	mov	sl, r3
 800507a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800507e:	b10a      	cbz	r2, 8005084 <_svfiprintf_r+0x5c>
 8005080:	2a25      	cmp	r2, #37	; 0x25
 8005082:	d1f9      	bne.n	8005078 <_svfiprintf_r+0x50>
 8005084:	ebba 0b04 	subs.w	fp, sl, r4
 8005088:	d00b      	beq.n	80050a2 <_svfiprintf_r+0x7a>
 800508a:	465b      	mov	r3, fp
 800508c:	4622      	mov	r2, r4
 800508e:	4629      	mov	r1, r5
 8005090:	4638      	mov	r0, r7
 8005092:	f7ff ff6d 	bl	8004f70 <__ssputs_r>
 8005096:	3001      	adds	r0, #1
 8005098:	f000 80aa 	beq.w	80051f0 <_svfiprintf_r+0x1c8>
 800509c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800509e:	445a      	add	r2, fp
 80050a0:	9209      	str	r2, [sp, #36]	; 0x24
 80050a2:	f89a 3000 	ldrb.w	r3, [sl]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 80a2 	beq.w	80051f0 <_svfiprintf_r+0x1c8>
 80050ac:	2300      	movs	r3, #0
 80050ae:	f04f 32ff 	mov.w	r2, #4294967295
 80050b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050b6:	f10a 0a01 	add.w	sl, sl, #1
 80050ba:	9304      	str	r3, [sp, #16]
 80050bc:	9307      	str	r3, [sp, #28]
 80050be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050c2:	931a      	str	r3, [sp, #104]	; 0x68
 80050c4:	4654      	mov	r4, sl
 80050c6:	2205      	movs	r2, #5
 80050c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050cc:	4851      	ldr	r0, [pc, #324]	; (8005214 <_svfiprintf_r+0x1ec>)
 80050ce:	f7fb f8bf 	bl	8000250 <memchr>
 80050d2:	9a04      	ldr	r2, [sp, #16]
 80050d4:	b9d8      	cbnz	r0, 800510e <_svfiprintf_r+0xe6>
 80050d6:	06d0      	lsls	r0, r2, #27
 80050d8:	bf44      	itt	mi
 80050da:	2320      	movmi	r3, #32
 80050dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050e0:	0711      	lsls	r1, r2, #28
 80050e2:	bf44      	itt	mi
 80050e4:	232b      	movmi	r3, #43	; 0x2b
 80050e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050ea:	f89a 3000 	ldrb.w	r3, [sl]
 80050ee:	2b2a      	cmp	r3, #42	; 0x2a
 80050f0:	d015      	beq.n	800511e <_svfiprintf_r+0xf6>
 80050f2:	9a07      	ldr	r2, [sp, #28]
 80050f4:	4654      	mov	r4, sl
 80050f6:	2000      	movs	r0, #0
 80050f8:	f04f 0c0a 	mov.w	ip, #10
 80050fc:	4621      	mov	r1, r4
 80050fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005102:	3b30      	subs	r3, #48	; 0x30
 8005104:	2b09      	cmp	r3, #9
 8005106:	d94e      	bls.n	80051a6 <_svfiprintf_r+0x17e>
 8005108:	b1b0      	cbz	r0, 8005138 <_svfiprintf_r+0x110>
 800510a:	9207      	str	r2, [sp, #28]
 800510c:	e014      	b.n	8005138 <_svfiprintf_r+0x110>
 800510e:	eba0 0308 	sub.w	r3, r0, r8
 8005112:	fa09 f303 	lsl.w	r3, r9, r3
 8005116:	4313      	orrs	r3, r2
 8005118:	9304      	str	r3, [sp, #16]
 800511a:	46a2      	mov	sl, r4
 800511c:	e7d2      	b.n	80050c4 <_svfiprintf_r+0x9c>
 800511e:	9b03      	ldr	r3, [sp, #12]
 8005120:	1d19      	adds	r1, r3, #4
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	9103      	str	r1, [sp, #12]
 8005126:	2b00      	cmp	r3, #0
 8005128:	bfbb      	ittet	lt
 800512a:	425b      	neglt	r3, r3
 800512c:	f042 0202 	orrlt.w	r2, r2, #2
 8005130:	9307      	strge	r3, [sp, #28]
 8005132:	9307      	strlt	r3, [sp, #28]
 8005134:	bfb8      	it	lt
 8005136:	9204      	strlt	r2, [sp, #16]
 8005138:	7823      	ldrb	r3, [r4, #0]
 800513a:	2b2e      	cmp	r3, #46	; 0x2e
 800513c:	d10c      	bne.n	8005158 <_svfiprintf_r+0x130>
 800513e:	7863      	ldrb	r3, [r4, #1]
 8005140:	2b2a      	cmp	r3, #42	; 0x2a
 8005142:	d135      	bne.n	80051b0 <_svfiprintf_r+0x188>
 8005144:	9b03      	ldr	r3, [sp, #12]
 8005146:	1d1a      	adds	r2, r3, #4
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	9203      	str	r2, [sp, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	bfb8      	it	lt
 8005150:	f04f 33ff 	movlt.w	r3, #4294967295
 8005154:	3402      	adds	r4, #2
 8005156:	9305      	str	r3, [sp, #20]
 8005158:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005224 <_svfiprintf_r+0x1fc>
 800515c:	7821      	ldrb	r1, [r4, #0]
 800515e:	2203      	movs	r2, #3
 8005160:	4650      	mov	r0, sl
 8005162:	f7fb f875 	bl	8000250 <memchr>
 8005166:	b140      	cbz	r0, 800517a <_svfiprintf_r+0x152>
 8005168:	2340      	movs	r3, #64	; 0x40
 800516a:	eba0 000a 	sub.w	r0, r0, sl
 800516e:	fa03 f000 	lsl.w	r0, r3, r0
 8005172:	9b04      	ldr	r3, [sp, #16]
 8005174:	4303      	orrs	r3, r0
 8005176:	3401      	adds	r4, #1
 8005178:	9304      	str	r3, [sp, #16]
 800517a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800517e:	4826      	ldr	r0, [pc, #152]	; (8005218 <_svfiprintf_r+0x1f0>)
 8005180:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005184:	2206      	movs	r2, #6
 8005186:	f7fb f863 	bl	8000250 <memchr>
 800518a:	2800      	cmp	r0, #0
 800518c:	d038      	beq.n	8005200 <_svfiprintf_r+0x1d8>
 800518e:	4b23      	ldr	r3, [pc, #140]	; (800521c <_svfiprintf_r+0x1f4>)
 8005190:	bb1b      	cbnz	r3, 80051da <_svfiprintf_r+0x1b2>
 8005192:	9b03      	ldr	r3, [sp, #12]
 8005194:	3307      	adds	r3, #7
 8005196:	f023 0307 	bic.w	r3, r3, #7
 800519a:	3308      	adds	r3, #8
 800519c:	9303      	str	r3, [sp, #12]
 800519e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a0:	4433      	add	r3, r6
 80051a2:	9309      	str	r3, [sp, #36]	; 0x24
 80051a4:	e767      	b.n	8005076 <_svfiprintf_r+0x4e>
 80051a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80051aa:	460c      	mov	r4, r1
 80051ac:	2001      	movs	r0, #1
 80051ae:	e7a5      	b.n	80050fc <_svfiprintf_r+0xd4>
 80051b0:	2300      	movs	r3, #0
 80051b2:	3401      	adds	r4, #1
 80051b4:	9305      	str	r3, [sp, #20]
 80051b6:	4619      	mov	r1, r3
 80051b8:	f04f 0c0a 	mov.w	ip, #10
 80051bc:	4620      	mov	r0, r4
 80051be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051c2:	3a30      	subs	r2, #48	; 0x30
 80051c4:	2a09      	cmp	r2, #9
 80051c6:	d903      	bls.n	80051d0 <_svfiprintf_r+0x1a8>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0c5      	beq.n	8005158 <_svfiprintf_r+0x130>
 80051cc:	9105      	str	r1, [sp, #20]
 80051ce:	e7c3      	b.n	8005158 <_svfiprintf_r+0x130>
 80051d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80051d4:	4604      	mov	r4, r0
 80051d6:	2301      	movs	r3, #1
 80051d8:	e7f0      	b.n	80051bc <_svfiprintf_r+0x194>
 80051da:	ab03      	add	r3, sp, #12
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	462a      	mov	r2, r5
 80051e0:	4b0f      	ldr	r3, [pc, #60]	; (8005220 <_svfiprintf_r+0x1f8>)
 80051e2:	a904      	add	r1, sp, #16
 80051e4:	4638      	mov	r0, r7
 80051e6:	f3af 8000 	nop.w
 80051ea:	1c42      	adds	r2, r0, #1
 80051ec:	4606      	mov	r6, r0
 80051ee:	d1d6      	bne.n	800519e <_svfiprintf_r+0x176>
 80051f0:	89ab      	ldrh	r3, [r5, #12]
 80051f2:	065b      	lsls	r3, r3, #25
 80051f4:	f53f af2c 	bmi.w	8005050 <_svfiprintf_r+0x28>
 80051f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051fa:	b01d      	add	sp, #116	; 0x74
 80051fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005200:	ab03      	add	r3, sp, #12
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	462a      	mov	r2, r5
 8005206:	4b06      	ldr	r3, [pc, #24]	; (8005220 <_svfiprintf_r+0x1f8>)
 8005208:	a904      	add	r1, sp, #16
 800520a:	4638      	mov	r0, r7
 800520c:	f000 f9d4 	bl	80055b8 <_printf_i>
 8005210:	e7eb      	b.n	80051ea <_svfiprintf_r+0x1c2>
 8005212:	bf00      	nop
 8005214:	08005b6c 	.word	0x08005b6c
 8005218:	08005b76 	.word	0x08005b76
 800521c:	00000000 	.word	0x00000000
 8005220:	08004f71 	.word	0x08004f71
 8005224:	08005b72 	.word	0x08005b72

08005228 <__sfputc_r>:
 8005228:	6893      	ldr	r3, [r2, #8]
 800522a:	3b01      	subs	r3, #1
 800522c:	2b00      	cmp	r3, #0
 800522e:	b410      	push	{r4}
 8005230:	6093      	str	r3, [r2, #8]
 8005232:	da08      	bge.n	8005246 <__sfputc_r+0x1e>
 8005234:	6994      	ldr	r4, [r2, #24]
 8005236:	42a3      	cmp	r3, r4
 8005238:	db01      	blt.n	800523e <__sfputc_r+0x16>
 800523a:	290a      	cmp	r1, #10
 800523c:	d103      	bne.n	8005246 <__sfputc_r+0x1e>
 800523e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005242:	f7ff bb0d 	b.w	8004860 <__swbuf_r>
 8005246:	6813      	ldr	r3, [r2, #0]
 8005248:	1c58      	adds	r0, r3, #1
 800524a:	6010      	str	r0, [r2, #0]
 800524c:	7019      	strb	r1, [r3, #0]
 800524e:	4608      	mov	r0, r1
 8005250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005254:	4770      	bx	lr

08005256 <__sfputs_r>:
 8005256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005258:	4606      	mov	r6, r0
 800525a:	460f      	mov	r7, r1
 800525c:	4614      	mov	r4, r2
 800525e:	18d5      	adds	r5, r2, r3
 8005260:	42ac      	cmp	r4, r5
 8005262:	d101      	bne.n	8005268 <__sfputs_r+0x12>
 8005264:	2000      	movs	r0, #0
 8005266:	e007      	b.n	8005278 <__sfputs_r+0x22>
 8005268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800526c:	463a      	mov	r2, r7
 800526e:	4630      	mov	r0, r6
 8005270:	f7ff ffda 	bl	8005228 <__sfputc_r>
 8005274:	1c43      	adds	r3, r0, #1
 8005276:	d1f3      	bne.n	8005260 <__sfputs_r+0xa>
 8005278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800527c <_vfiprintf_r>:
 800527c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005280:	460d      	mov	r5, r1
 8005282:	b09d      	sub	sp, #116	; 0x74
 8005284:	4614      	mov	r4, r2
 8005286:	4698      	mov	r8, r3
 8005288:	4606      	mov	r6, r0
 800528a:	b118      	cbz	r0, 8005294 <_vfiprintf_r+0x18>
 800528c:	6983      	ldr	r3, [r0, #24]
 800528e:	b90b      	cbnz	r3, 8005294 <_vfiprintf_r+0x18>
 8005290:	f7ff fcc0 	bl	8004c14 <__sinit>
 8005294:	4b89      	ldr	r3, [pc, #548]	; (80054bc <_vfiprintf_r+0x240>)
 8005296:	429d      	cmp	r5, r3
 8005298:	d11b      	bne.n	80052d2 <_vfiprintf_r+0x56>
 800529a:	6875      	ldr	r5, [r6, #4]
 800529c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800529e:	07d9      	lsls	r1, r3, #31
 80052a0:	d405      	bmi.n	80052ae <_vfiprintf_r+0x32>
 80052a2:	89ab      	ldrh	r3, [r5, #12]
 80052a4:	059a      	lsls	r2, r3, #22
 80052a6:	d402      	bmi.n	80052ae <_vfiprintf_r+0x32>
 80052a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052aa:	f7ff fd51 	bl	8004d50 <__retarget_lock_acquire_recursive>
 80052ae:	89ab      	ldrh	r3, [r5, #12]
 80052b0:	071b      	lsls	r3, r3, #28
 80052b2:	d501      	bpl.n	80052b8 <_vfiprintf_r+0x3c>
 80052b4:	692b      	ldr	r3, [r5, #16]
 80052b6:	b9eb      	cbnz	r3, 80052f4 <_vfiprintf_r+0x78>
 80052b8:	4629      	mov	r1, r5
 80052ba:	4630      	mov	r0, r6
 80052bc:	f7ff fb22 	bl	8004904 <__swsetup_r>
 80052c0:	b1c0      	cbz	r0, 80052f4 <_vfiprintf_r+0x78>
 80052c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052c4:	07dc      	lsls	r4, r3, #31
 80052c6:	d50e      	bpl.n	80052e6 <_vfiprintf_r+0x6a>
 80052c8:	f04f 30ff 	mov.w	r0, #4294967295
 80052cc:	b01d      	add	sp, #116	; 0x74
 80052ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d2:	4b7b      	ldr	r3, [pc, #492]	; (80054c0 <_vfiprintf_r+0x244>)
 80052d4:	429d      	cmp	r5, r3
 80052d6:	d101      	bne.n	80052dc <_vfiprintf_r+0x60>
 80052d8:	68b5      	ldr	r5, [r6, #8]
 80052da:	e7df      	b.n	800529c <_vfiprintf_r+0x20>
 80052dc:	4b79      	ldr	r3, [pc, #484]	; (80054c4 <_vfiprintf_r+0x248>)
 80052de:	429d      	cmp	r5, r3
 80052e0:	bf08      	it	eq
 80052e2:	68f5      	ldreq	r5, [r6, #12]
 80052e4:	e7da      	b.n	800529c <_vfiprintf_r+0x20>
 80052e6:	89ab      	ldrh	r3, [r5, #12]
 80052e8:	0598      	lsls	r0, r3, #22
 80052ea:	d4ed      	bmi.n	80052c8 <_vfiprintf_r+0x4c>
 80052ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052ee:	f7ff fd30 	bl	8004d52 <__retarget_lock_release_recursive>
 80052f2:	e7e9      	b.n	80052c8 <_vfiprintf_r+0x4c>
 80052f4:	2300      	movs	r3, #0
 80052f6:	9309      	str	r3, [sp, #36]	; 0x24
 80052f8:	2320      	movs	r3, #32
 80052fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005302:	2330      	movs	r3, #48	; 0x30
 8005304:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80054c8 <_vfiprintf_r+0x24c>
 8005308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800530c:	f04f 0901 	mov.w	r9, #1
 8005310:	4623      	mov	r3, r4
 8005312:	469a      	mov	sl, r3
 8005314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005318:	b10a      	cbz	r2, 800531e <_vfiprintf_r+0xa2>
 800531a:	2a25      	cmp	r2, #37	; 0x25
 800531c:	d1f9      	bne.n	8005312 <_vfiprintf_r+0x96>
 800531e:	ebba 0b04 	subs.w	fp, sl, r4
 8005322:	d00b      	beq.n	800533c <_vfiprintf_r+0xc0>
 8005324:	465b      	mov	r3, fp
 8005326:	4622      	mov	r2, r4
 8005328:	4629      	mov	r1, r5
 800532a:	4630      	mov	r0, r6
 800532c:	f7ff ff93 	bl	8005256 <__sfputs_r>
 8005330:	3001      	adds	r0, #1
 8005332:	f000 80aa 	beq.w	800548a <_vfiprintf_r+0x20e>
 8005336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005338:	445a      	add	r2, fp
 800533a:	9209      	str	r2, [sp, #36]	; 0x24
 800533c:	f89a 3000 	ldrb.w	r3, [sl]
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 80a2 	beq.w	800548a <_vfiprintf_r+0x20e>
 8005346:	2300      	movs	r3, #0
 8005348:	f04f 32ff 	mov.w	r2, #4294967295
 800534c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005350:	f10a 0a01 	add.w	sl, sl, #1
 8005354:	9304      	str	r3, [sp, #16]
 8005356:	9307      	str	r3, [sp, #28]
 8005358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800535c:	931a      	str	r3, [sp, #104]	; 0x68
 800535e:	4654      	mov	r4, sl
 8005360:	2205      	movs	r2, #5
 8005362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005366:	4858      	ldr	r0, [pc, #352]	; (80054c8 <_vfiprintf_r+0x24c>)
 8005368:	f7fa ff72 	bl	8000250 <memchr>
 800536c:	9a04      	ldr	r2, [sp, #16]
 800536e:	b9d8      	cbnz	r0, 80053a8 <_vfiprintf_r+0x12c>
 8005370:	06d1      	lsls	r1, r2, #27
 8005372:	bf44      	itt	mi
 8005374:	2320      	movmi	r3, #32
 8005376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800537a:	0713      	lsls	r3, r2, #28
 800537c:	bf44      	itt	mi
 800537e:	232b      	movmi	r3, #43	; 0x2b
 8005380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005384:	f89a 3000 	ldrb.w	r3, [sl]
 8005388:	2b2a      	cmp	r3, #42	; 0x2a
 800538a:	d015      	beq.n	80053b8 <_vfiprintf_r+0x13c>
 800538c:	9a07      	ldr	r2, [sp, #28]
 800538e:	4654      	mov	r4, sl
 8005390:	2000      	movs	r0, #0
 8005392:	f04f 0c0a 	mov.w	ip, #10
 8005396:	4621      	mov	r1, r4
 8005398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800539c:	3b30      	subs	r3, #48	; 0x30
 800539e:	2b09      	cmp	r3, #9
 80053a0:	d94e      	bls.n	8005440 <_vfiprintf_r+0x1c4>
 80053a2:	b1b0      	cbz	r0, 80053d2 <_vfiprintf_r+0x156>
 80053a4:	9207      	str	r2, [sp, #28]
 80053a6:	e014      	b.n	80053d2 <_vfiprintf_r+0x156>
 80053a8:	eba0 0308 	sub.w	r3, r0, r8
 80053ac:	fa09 f303 	lsl.w	r3, r9, r3
 80053b0:	4313      	orrs	r3, r2
 80053b2:	9304      	str	r3, [sp, #16]
 80053b4:	46a2      	mov	sl, r4
 80053b6:	e7d2      	b.n	800535e <_vfiprintf_r+0xe2>
 80053b8:	9b03      	ldr	r3, [sp, #12]
 80053ba:	1d19      	adds	r1, r3, #4
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	9103      	str	r1, [sp, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	bfbb      	ittet	lt
 80053c4:	425b      	neglt	r3, r3
 80053c6:	f042 0202 	orrlt.w	r2, r2, #2
 80053ca:	9307      	strge	r3, [sp, #28]
 80053cc:	9307      	strlt	r3, [sp, #28]
 80053ce:	bfb8      	it	lt
 80053d0:	9204      	strlt	r2, [sp, #16]
 80053d2:	7823      	ldrb	r3, [r4, #0]
 80053d4:	2b2e      	cmp	r3, #46	; 0x2e
 80053d6:	d10c      	bne.n	80053f2 <_vfiprintf_r+0x176>
 80053d8:	7863      	ldrb	r3, [r4, #1]
 80053da:	2b2a      	cmp	r3, #42	; 0x2a
 80053dc:	d135      	bne.n	800544a <_vfiprintf_r+0x1ce>
 80053de:	9b03      	ldr	r3, [sp, #12]
 80053e0:	1d1a      	adds	r2, r3, #4
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	9203      	str	r2, [sp, #12]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	bfb8      	it	lt
 80053ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80053ee:	3402      	adds	r4, #2
 80053f0:	9305      	str	r3, [sp, #20]
 80053f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80054d8 <_vfiprintf_r+0x25c>
 80053f6:	7821      	ldrb	r1, [r4, #0]
 80053f8:	2203      	movs	r2, #3
 80053fa:	4650      	mov	r0, sl
 80053fc:	f7fa ff28 	bl	8000250 <memchr>
 8005400:	b140      	cbz	r0, 8005414 <_vfiprintf_r+0x198>
 8005402:	2340      	movs	r3, #64	; 0x40
 8005404:	eba0 000a 	sub.w	r0, r0, sl
 8005408:	fa03 f000 	lsl.w	r0, r3, r0
 800540c:	9b04      	ldr	r3, [sp, #16]
 800540e:	4303      	orrs	r3, r0
 8005410:	3401      	adds	r4, #1
 8005412:	9304      	str	r3, [sp, #16]
 8005414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005418:	482c      	ldr	r0, [pc, #176]	; (80054cc <_vfiprintf_r+0x250>)
 800541a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800541e:	2206      	movs	r2, #6
 8005420:	f7fa ff16 	bl	8000250 <memchr>
 8005424:	2800      	cmp	r0, #0
 8005426:	d03f      	beq.n	80054a8 <_vfiprintf_r+0x22c>
 8005428:	4b29      	ldr	r3, [pc, #164]	; (80054d0 <_vfiprintf_r+0x254>)
 800542a:	bb1b      	cbnz	r3, 8005474 <_vfiprintf_r+0x1f8>
 800542c:	9b03      	ldr	r3, [sp, #12]
 800542e:	3307      	adds	r3, #7
 8005430:	f023 0307 	bic.w	r3, r3, #7
 8005434:	3308      	adds	r3, #8
 8005436:	9303      	str	r3, [sp, #12]
 8005438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800543a:	443b      	add	r3, r7
 800543c:	9309      	str	r3, [sp, #36]	; 0x24
 800543e:	e767      	b.n	8005310 <_vfiprintf_r+0x94>
 8005440:	fb0c 3202 	mla	r2, ip, r2, r3
 8005444:	460c      	mov	r4, r1
 8005446:	2001      	movs	r0, #1
 8005448:	e7a5      	b.n	8005396 <_vfiprintf_r+0x11a>
 800544a:	2300      	movs	r3, #0
 800544c:	3401      	adds	r4, #1
 800544e:	9305      	str	r3, [sp, #20]
 8005450:	4619      	mov	r1, r3
 8005452:	f04f 0c0a 	mov.w	ip, #10
 8005456:	4620      	mov	r0, r4
 8005458:	f810 2b01 	ldrb.w	r2, [r0], #1
 800545c:	3a30      	subs	r2, #48	; 0x30
 800545e:	2a09      	cmp	r2, #9
 8005460:	d903      	bls.n	800546a <_vfiprintf_r+0x1ee>
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0c5      	beq.n	80053f2 <_vfiprintf_r+0x176>
 8005466:	9105      	str	r1, [sp, #20]
 8005468:	e7c3      	b.n	80053f2 <_vfiprintf_r+0x176>
 800546a:	fb0c 2101 	mla	r1, ip, r1, r2
 800546e:	4604      	mov	r4, r0
 8005470:	2301      	movs	r3, #1
 8005472:	e7f0      	b.n	8005456 <_vfiprintf_r+0x1da>
 8005474:	ab03      	add	r3, sp, #12
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	462a      	mov	r2, r5
 800547a:	4b16      	ldr	r3, [pc, #88]	; (80054d4 <_vfiprintf_r+0x258>)
 800547c:	a904      	add	r1, sp, #16
 800547e:	4630      	mov	r0, r6
 8005480:	f3af 8000 	nop.w
 8005484:	4607      	mov	r7, r0
 8005486:	1c78      	adds	r0, r7, #1
 8005488:	d1d6      	bne.n	8005438 <_vfiprintf_r+0x1bc>
 800548a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800548c:	07d9      	lsls	r1, r3, #31
 800548e:	d405      	bmi.n	800549c <_vfiprintf_r+0x220>
 8005490:	89ab      	ldrh	r3, [r5, #12]
 8005492:	059a      	lsls	r2, r3, #22
 8005494:	d402      	bmi.n	800549c <_vfiprintf_r+0x220>
 8005496:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005498:	f7ff fc5b 	bl	8004d52 <__retarget_lock_release_recursive>
 800549c:	89ab      	ldrh	r3, [r5, #12]
 800549e:	065b      	lsls	r3, r3, #25
 80054a0:	f53f af12 	bmi.w	80052c8 <_vfiprintf_r+0x4c>
 80054a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054a6:	e711      	b.n	80052cc <_vfiprintf_r+0x50>
 80054a8:	ab03      	add	r3, sp, #12
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	462a      	mov	r2, r5
 80054ae:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <_vfiprintf_r+0x258>)
 80054b0:	a904      	add	r1, sp, #16
 80054b2:	4630      	mov	r0, r6
 80054b4:	f000 f880 	bl	80055b8 <_printf_i>
 80054b8:	e7e4      	b.n	8005484 <_vfiprintf_r+0x208>
 80054ba:	bf00      	nop
 80054bc:	08005b2c 	.word	0x08005b2c
 80054c0:	08005b4c 	.word	0x08005b4c
 80054c4:	08005b0c 	.word	0x08005b0c
 80054c8:	08005b6c 	.word	0x08005b6c
 80054cc:	08005b76 	.word	0x08005b76
 80054d0:	00000000 	.word	0x00000000
 80054d4:	08005257 	.word	0x08005257
 80054d8:	08005b72 	.word	0x08005b72

080054dc <_printf_common>:
 80054dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054e0:	4616      	mov	r6, r2
 80054e2:	4699      	mov	r9, r3
 80054e4:	688a      	ldr	r2, [r1, #8]
 80054e6:	690b      	ldr	r3, [r1, #16]
 80054e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054ec:	4293      	cmp	r3, r2
 80054ee:	bfb8      	it	lt
 80054f0:	4613      	movlt	r3, r2
 80054f2:	6033      	str	r3, [r6, #0]
 80054f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054f8:	4607      	mov	r7, r0
 80054fa:	460c      	mov	r4, r1
 80054fc:	b10a      	cbz	r2, 8005502 <_printf_common+0x26>
 80054fe:	3301      	adds	r3, #1
 8005500:	6033      	str	r3, [r6, #0]
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	0699      	lsls	r1, r3, #26
 8005506:	bf42      	ittt	mi
 8005508:	6833      	ldrmi	r3, [r6, #0]
 800550a:	3302      	addmi	r3, #2
 800550c:	6033      	strmi	r3, [r6, #0]
 800550e:	6825      	ldr	r5, [r4, #0]
 8005510:	f015 0506 	ands.w	r5, r5, #6
 8005514:	d106      	bne.n	8005524 <_printf_common+0x48>
 8005516:	f104 0a19 	add.w	sl, r4, #25
 800551a:	68e3      	ldr	r3, [r4, #12]
 800551c:	6832      	ldr	r2, [r6, #0]
 800551e:	1a9b      	subs	r3, r3, r2
 8005520:	42ab      	cmp	r3, r5
 8005522:	dc26      	bgt.n	8005572 <_printf_common+0x96>
 8005524:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005528:	1e13      	subs	r3, r2, #0
 800552a:	6822      	ldr	r2, [r4, #0]
 800552c:	bf18      	it	ne
 800552e:	2301      	movne	r3, #1
 8005530:	0692      	lsls	r2, r2, #26
 8005532:	d42b      	bmi.n	800558c <_printf_common+0xb0>
 8005534:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005538:	4649      	mov	r1, r9
 800553a:	4638      	mov	r0, r7
 800553c:	47c0      	blx	r8
 800553e:	3001      	adds	r0, #1
 8005540:	d01e      	beq.n	8005580 <_printf_common+0xa4>
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	68e5      	ldr	r5, [r4, #12]
 8005546:	6832      	ldr	r2, [r6, #0]
 8005548:	f003 0306 	and.w	r3, r3, #6
 800554c:	2b04      	cmp	r3, #4
 800554e:	bf08      	it	eq
 8005550:	1aad      	subeq	r5, r5, r2
 8005552:	68a3      	ldr	r3, [r4, #8]
 8005554:	6922      	ldr	r2, [r4, #16]
 8005556:	bf0c      	ite	eq
 8005558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800555c:	2500      	movne	r5, #0
 800555e:	4293      	cmp	r3, r2
 8005560:	bfc4      	itt	gt
 8005562:	1a9b      	subgt	r3, r3, r2
 8005564:	18ed      	addgt	r5, r5, r3
 8005566:	2600      	movs	r6, #0
 8005568:	341a      	adds	r4, #26
 800556a:	42b5      	cmp	r5, r6
 800556c:	d11a      	bne.n	80055a4 <_printf_common+0xc8>
 800556e:	2000      	movs	r0, #0
 8005570:	e008      	b.n	8005584 <_printf_common+0xa8>
 8005572:	2301      	movs	r3, #1
 8005574:	4652      	mov	r2, sl
 8005576:	4649      	mov	r1, r9
 8005578:	4638      	mov	r0, r7
 800557a:	47c0      	blx	r8
 800557c:	3001      	adds	r0, #1
 800557e:	d103      	bne.n	8005588 <_printf_common+0xac>
 8005580:	f04f 30ff 	mov.w	r0, #4294967295
 8005584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005588:	3501      	adds	r5, #1
 800558a:	e7c6      	b.n	800551a <_printf_common+0x3e>
 800558c:	18e1      	adds	r1, r4, r3
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	2030      	movs	r0, #48	; 0x30
 8005592:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005596:	4422      	add	r2, r4
 8005598:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800559c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055a0:	3302      	adds	r3, #2
 80055a2:	e7c7      	b.n	8005534 <_printf_common+0x58>
 80055a4:	2301      	movs	r3, #1
 80055a6:	4622      	mov	r2, r4
 80055a8:	4649      	mov	r1, r9
 80055aa:	4638      	mov	r0, r7
 80055ac:	47c0      	blx	r8
 80055ae:	3001      	adds	r0, #1
 80055b0:	d0e6      	beq.n	8005580 <_printf_common+0xa4>
 80055b2:	3601      	adds	r6, #1
 80055b4:	e7d9      	b.n	800556a <_printf_common+0x8e>
	...

080055b8 <_printf_i>:
 80055b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055bc:	460c      	mov	r4, r1
 80055be:	4691      	mov	r9, r2
 80055c0:	7e27      	ldrb	r7, [r4, #24]
 80055c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80055c4:	2f78      	cmp	r7, #120	; 0x78
 80055c6:	4680      	mov	r8, r0
 80055c8:	469a      	mov	sl, r3
 80055ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055ce:	d807      	bhi.n	80055e0 <_printf_i+0x28>
 80055d0:	2f62      	cmp	r7, #98	; 0x62
 80055d2:	d80a      	bhi.n	80055ea <_printf_i+0x32>
 80055d4:	2f00      	cmp	r7, #0
 80055d6:	f000 80d8 	beq.w	800578a <_printf_i+0x1d2>
 80055da:	2f58      	cmp	r7, #88	; 0x58
 80055dc:	f000 80a3 	beq.w	8005726 <_printf_i+0x16e>
 80055e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055e8:	e03a      	b.n	8005660 <_printf_i+0xa8>
 80055ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055ee:	2b15      	cmp	r3, #21
 80055f0:	d8f6      	bhi.n	80055e0 <_printf_i+0x28>
 80055f2:	a001      	add	r0, pc, #4	; (adr r0, 80055f8 <_printf_i+0x40>)
 80055f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80055f8:	08005651 	.word	0x08005651
 80055fc:	08005665 	.word	0x08005665
 8005600:	080055e1 	.word	0x080055e1
 8005604:	080055e1 	.word	0x080055e1
 8005608:	080055e1 	.word	0x080055e1
 800560c:	080055e1 	.word	0x080055e1
 8005610:	08005665 	.word	0x08005665
 8005614:	080055e1 	.word	0x080055e1
 8005618:	080055e1 	.word	0x080055e1
 800561c:	080055e1 	.word	0x080055e1
 8005620:	080055e1 	.word	0x080055e1
 8005624:	08005771 	.word	0x08005771
 8005628:	08005695 	.word	0x08005695
 800562c:	08005753 	.word	0x08005753
 8005630:	080055e1 	.word	0x080055e1
 8005634:	080055e1 	.word	0x080055e1
 8005638:	08005793 	.word	0x08005793
 800563c:	080055e1 	.word	0x080055e1
 8005640:	08005695 	.word	0x08005695
 8005644:	080055e1 	.word	0x080055e1
 8005648:	080055e1 	.word	0x080055e1
 800564c:	0800575b 	.word	0x0800575b
 8005650:	680b      	ldr	r3, [r1, #0]
 8005652:	1d1a      	adds	r2, r3, #4
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	600a      	str	r2, [r1, #0]
 8005658:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800565c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005660:	2301      	movs	r3, #1
 8005662:	e0a3      	b.n	80057ac <_printf_i+0x1f4>
 8005664:	6825      	ldr	r5, [r4, #0]
 8005666:	6808      	ldr	r0, [r1, #0]
 8005668:	062e      	lsls	r6, r5, #24
 800566a:	f100 0304 	add.w	r3, r0, #4
 800566e:	d50a      	bpl.n	8005686 <_printf_i+0xce>
 8005670:	6805      	ldr	r5, [r0, #0]
 8005672:	600b      	str	r3, [r1, #0]
 8005674:	2d00      	cmp	r5, #0
 8005676:	da03      	bge.n	8005680 <_printf_i+0xc8>
 8005678:	232d      	movs	r3, #45	; 0x2d
 800567a:	426d      	negs	r5, r5
 800567c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005680:	485e      	ldr	r0, [pc, #376]	; (80057fc <_printf_i+0x244>)
 8005682:	230a      	movs	r3, #10
 8005684:	e019      	b.n	80056ba <_printf_i+0x102>
 8005686:	f015 0f40 	tst.w	r5, #64	; 0x40
 800568a:	6805      	ldr	r5, [r0, #0]
 800568c:	600b      	str	r3, [r1, #0]
 800568e:	bf18      	it	ne
 8005690:	b22d      	sxthne	r5, r5
 8005692:	e7ef      	b.n	8005674 <_printf_i+0xbc>
 8005694:	680b      	ldr	r3, [r1, #0]
 8005696:	6825      	ldr	r5, [r4, #0]
 8005698:	1d18      	adds	r0, r3, #4
 800569a:	6008      	str	r0, [r1, #0]
 800569c:	0628      	lsls	r0, r5, #24
 800569e:	d501      	bpl.n	80056a4 <_printf_i+0xec>
 80056a0:	681d      	ldr	r5, [r3, #0]
 80056a2:	e002      	b.n	80056aa <_printf_i+0xf2>
 80056a4:	0669      	lsls	r1, r5, #25
 80056a6:	d5fb      	bpl.n	80056a0 <_printf_i+0xe8>
 80056a8:	881d      	ldrh	r5, [r3, #0]
 80056aa:	4854      	ldr	r0, [pc, #336]	; (80057fc <_printf_i+0x244>)
 80056ac:	2f6f      	cmp	r7, #111	; 0x6f
 80056ae:	bf0c      	ite	eq
 80056b0:	2308      	moveq	r3, #8
 80056b2:	230a      	movne	r3, #10
 80056b4:	2100      	movs	r1, #0
 80056b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056ba:	6866      	ldr	r6, [r4, #4]
 80056bc:	60a6      	str	r6, [r4, #8]
 80056be:	2e00      	cmp	r6, #0
 80056c0:	bfa2      	ittt	ge
 80056c2:	6821      	ldrge	r1, [r4, #0]
 80056c4:	f021 0104 	bicge.w	r1, r1, #4
 80056c8:	6021      	strge	r1, [r4, #0]
 80056ca:	b90d      	cbnz	r5, 80056d0 <_printf_i+0x118>
 80056cc:	2e00      	cmp	r6, #0
 80056ce:	d04d      	beq.n	800576c <_printf_i+0x1b4>
 80056d0:	4616      	mov	r6, r2
 80056d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80056d6:	fb03 5711 	mls	r7, r3, r1, r5
 80056da:	5dc7      	ldrb	r7, [r0, r7]
 80056dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056e0:	462f      	mov	r7, r5
 80056e2:	42bb      	cmp	r3, r7
 80056e4:	460d      	mov	r5, r1
 80056e6:	d9f4      	bls.n	80056d2 <_printf_i+0x11a>
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d10b      	bne.n	8005704 <_printf_i+0x14c>
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	07df      	lsls	r7, r3, #31
 80056f0:	d508      	bpl.n	8005704 <_printf_i+0x14c>
 80056f2:	6923      	ldr	r3, [r4, #16]
 80056f4:	6861      	ldr	r1, [r4, #4]
 80056f6:	4299      	cmp	r1, r3
 80056f8:	bfde      	ittt	le
 80056fa:	2330      	movle	r3, #48	; 0x30
 80056fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005700:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005704:	1b92      	subs	r2, r2, r6
 8005706:	6122      	str	r2, [r4, #16]
 8005708:	f8cd a000 	str.w	sl, [sp]
 800570c:	464b      	mov	r3, r9
 800570e:	aa03      	add	r2, sp, #12
 8005710:	4621      	mov	r1, r4
 8005712:	4640      	mov	r0, r8
 8005714:	f7ff fee2 	bl	80054dc <_printf_common>
 8005718:	3001      	adds	r0, #1
 800571a:	d14c      	bne.n	80057b6 <_printf_i+0x1fe>
 800571c:	f04f 30ff 	mov.w	r0, #4294967295
 8005720:	b004      	add	sp, #16
 8005722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005726:	4835      	ldr	r0, [pc, #212]	; (80057fc <_printf_i+0x244>)
 8005728:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	680e      	ldr	r6, [r1, #0]
 8005730:	061f      	lsls	r7, r3, #24
 8005732:	f856 5b04 	ldr.w	r5, [r6], #4
 8005736:	600e      	str	r6, [r1, #0]
 8005738:	d514      	bpl.n	8005764 <_printf_i+0x1ac>
 800573a:	07d9      	lsls	r1, r3, #31
 800573c:	bf44      	itt	mi
 800573e:	f043 0320 	orrmi.w	r3, r3, #32
 8005742:	6023      	strmi	r3, [r4, #0]
 8005744:	b91d      	cbnz	r5, 800574e <_printf_i+0x196>
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	f023 0320 	bic.w	r3, r3, #32
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	2310      	movs	r3, #16
 8005750:	e7b0      	b.n	80056b4 <_printf_i+0xfc>
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	f043 0320 	orr.w	r3, r3, #32
 8005758:	6023      	str	r3, [r4, #0]
 800575a:	2378      	movs	r3, #120	; 0x78
 800575c:	4828      	ldr	r0, [pc, #160]	; (8005800 <_printf_i+0x248>)
 800575e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005762:	e7e3      	b.n	800572c <_printf_i+0x174>
 8005764:	065e      	lsls	r6, r3, #25
 8005766:	bf48      	it	mi
 8005768:	b2ad      	uxthmi	r5, r5
 800576a:	e7e6      	b.n	800573a <_printf_i+0x182>
 800576c:	4616      	mov	r6, r2
 800576e:	e7bb      	b.n	80056e8 <_printf_i+0x130>
 8005770:	680b      	ldr	r3, [r1, #0]
 8005772:	6826      	ldr	r6, [r4, #0]
 8005774:	6960      	ldr	r0, [r4, #20]
 8005776:	1d1d      	adds	r5, r3, #4
 8005778:	600d      	str	r5, [r1, #0]
 800577a:	0635      	lsls	r5, r6, #24
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	d501      	bpl.n	8005784 <_printf_i+0x1cc>
 8005780:	6018      	str	r0, [r3, #0]
 8005782:	e002      	b.n	800578a <_printf_i+0x1d2>
 8005784:	0671      	lsls	r1, r6, #25
 8005786:	d5fb      	bpl.n	8005780 <_printf_i+0x1c8>
 8005788:	8018      	strh	r0, [r3, #0]
 800578a:	2300      	movs	r3, #0
 800578c:	6123      	str	r3, [r4, #16]
 800578e:	4616      	mov	r6, r2
 8005790:	e7ba      	b.n	8005708 <_printf_i+0x150>
 8005792:	680b      	ldr	r3, [r1, #0]
 8005794:	1d1a      	adds	r2, r3, #4
 8005796:	600a      	str	r2, [r1, #0]
 8005798:	681e      	ldr	r6, [r3, #0]
 800579a:	6862      	ldr	r2, [r4, #4]
 800579c:	2100      	movs	r1, #0
 800579e:	4630      	mov	r0, r6
 80057a0:	f7fa fd56 	bl	8000250 <memchr>
 80057a4:	b108      	cbz	r0, 80057aa <_printf_i+0x1f2>
 80057a6:	1b80      	subs	r0, r0, r6
 80057a8:	6060      	str	r0, [r4, #4]
 80057aa:	6863      	ldr	r3, [r4, #4]
 80057ac:	6123      	str	r3, [r4, #16]
 80057ae:	2300      	movs	r3, #0
 80057b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057b4:	e7a8      	b.n	8005708 <_printf_i+0x150>
 80057b6:	6923      	ldr	r3, [r4, #16]
 80057b8:	4632      	mov	r2, r6
 80057ba:	4649      	mov	r1, r9
 80057bc:	4640      	mov	r0, r8
 80057be:	47d0      	blx	sl
 80057c0:	3001      	adds	r0, #1
 80057c2:	d0ab      	beq.n	800571c <_printf_i+0x164>
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	079b      	lsls	r3, r3, #30
 80057c8:	d413      	bmi.n	80057f2 <_printf_i+0x23a>
 80057ca:	68e0      	ldr	r0, [r4, #12]
 80057cc:	9b03      	ldr	r3, [sp, #12]
 80057ce:	4298      	cmp	r0, r3
 80057d0:	bfb8      	it	lt
 80057d2:	4618      	movlt	r0, r3
 80057d4:	e7a4      	b.n	8005720 <_printf_i+0x168>
 80057d6:	2301      	movs	r3, #1
 80057d8:	4632      	mov	r2, r6
 80057da:	4649      	mov	r1, r9
 80057dc:	4640      	mov	r0, r8
 80057de:	47d0      	blx	sl
 80057e0:	3001      	adds	r0, #1
 80057e2:	d09b      	beq.n	800571c <_printf_i+0x164>
 80057e4:	3501      	adds	r5, #1
 80057e6:	68e3      	ldr	r3, [r4, #12]
 80057e8:	9903      	ldr	r1, [sp, #12]
 80057ea:	1a5b      	subs	r3, r3, r1
 80057ec:	42ab      	cmp	r3, r5
 80057ee:	dcf2      	bgt.n	80057d6 <_printf_i+0x21e>
 80057f0:	e7eb      	b.n	80057ca <_printf_i+0x212>
 80057f2:	2500      	movs	r5, #0
 80057f4:	f104 0619 	add.w	r6, r4, #25
 80057f8:	e7f5      	b.n	80057e6 <_printf_i+0x22e>
 80057fa:	bf00      	nop
 80057fc:	08005b7d 	.word	0x08005b7d
 8005800:	08005b8e 	.word	0x08005b8e

08005804 <_sbrk_r>:
 8005804:	b538      	push	{r3, r4, r5, lr}
 8005806:	4d06      	ldr	r5, [pc, #24]	; (8005820 <_sbrk_r+0x1c>)
 8005808:	2300      	movs	r3, #0
 800580a:	4604      	mov	r4, r0
 800580c:	4608      	mov	r0, r1
 800580e:	602b      	str	r3, [r5, #0]
 8005810:	f7fb fb14 	bl	8000e3c <_sbrk>
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	d102      	bne.n	800581e <_sbrk_r+0x1a>
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	b103      	cbz	r3, 800581e <_sbrk_r+0x1a>
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	bd38      	pop	{r3, r4, r5, pc}
 8005820:	20000274 	.word	0x20000274

08005824 <__sread>:
 8005824:	b510      	push	{r4, lr}
 8005826:	460c      	mov	r4, r1
 8005828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800582c:	f000 f8ee 	bl	8005a0c <_read_r>
 8005830:	2800      	cmp	r0, #0
 8005832:	bfab      	itete	ge
 8005834:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005836:	89a3      	ldrhlt	r3, [r4, #12]
 8005838:	181b      	addge	r3, r3, r0
 800583a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800583e:	bfac      	ite	ge
 8005840:	6563      	strge	r3, [r4, #84]	; 0x54
 8005842:	81a3      	strhlt	r3, [r4, #12]
 8005844:	bd10      	pop	{r4, pc}

08005846 <__swrite>:
 8005846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584a:	461f      	mov	r7, r3
 800584c:	898b      	ldrh	r3, [r1, #12]
 800584e:	05db      	lsls	r3, r3, #23
 8005850:	4605      	mov	r5, r0
 8005852:	460c      	mov	r4, r1
 8005854:	4616      	mov	r6, r2
 8005856:	d505      	bpl.n	8005864 <__swrite+0x1e>
 8005858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800585c:	2302      	movs	r3, #2
 800585e:	2200      	movs	r2, #0
 8005860:	f000 f868 	bl	8005934 <_lseek_r>
 8005864:	89a3      	ldrh	r3, [r4, #12]
 8005866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800586a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800586e:	81a3      	strh	r3, [r4, #12]
 8005870:	4632      	mov	r2, r6
 8005872:	463b      	mov	r3, r7
 8005874:	4628      	mov	r0, r5
 8005876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800587a:	f000 b817 	b.w	80058ac <_write_r>

0800587e <__sseek>:
 800587e:	b510      	push	{r4, lr}
 8005880:	460c      	mov	r4, r1
 8005882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005886:	f000 f855 	bl	8005934 <_lseek_r>
 800588a:	1c43      	adds	r3, r0, #1
 800588c:	89a3      	ldrh	r3, [r4, #12]
 800588e:	bf15      	itete	ne
 8005890:	6560      	strne	r0, [r4, #84]	; 0x54
 8005892:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005896:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800589a:	81a3      	strheq	r3, [r4, #12]
 800589c:	bf18      	it	ne
 800589e:	81a3      	strhne	r3, [r4, #12]
 80058a0:	bd10      	pop	{r4, pc}

080058a2 <__sclose>:
 80058a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a6:	f000 b813 	b.w	80058d0 <_close_r>
	...

080058ac <_write_r>:
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	4d07      	ldr	r5, [pc, #28]	; (80058cc <_write_r+0x20>)
 80058b0:	4604      	mov	r4, r0
 80058b2:	4608      	mov	r0, r1
 80058b4:	4611      	mov	r1, r2
 80058b6:	2200      	movs	r2, #0
 80058b8:	602a      	str	r2, [r5, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	f7fb f9ea 	bl	8000c94 <_write>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d102      	bne.n	80058ca <_write_r+0x1e>
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	b103      	cbz	r3, 80058ca <_write_r+0x1e>
 80058c8:	6023      	str	r3, [r4, #0]
 80058ca:	bd38      	pop	{r3, r4, r5, pc}
 80058cc:	20000274 	.word	0x20000274

080058d0 <_close_r>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	4d06      	ldr	r5, [pc, #24]	; (80058ec <_close_r+0x1c>)
 80058d4:	2300      	movs	r3, #0
 80058d6:	4604      	mov	r4, r0
 80058d8:	4608      	mov	r0, r1
 80058da:	602b      	str	r3, [r5, #0]
 80058dc:	f7fb fa79 	bl	8000dd2 <_close>
 80058e0:	1c43      	adds	r3, r0, #1
 80058e2:	d102      	bne.n	80058ea <_close_r+0x1a>
 80058e4:	682b      	ldr	r3, [r5, #0]
 80058e6:	b103      	cbz	r3, 80058ea <_close_r+0x1a>
 80058e8:	6023      	str	r3, [r4, #0]
 80058ea:	bd38      	pop	{r3, r4, r5, pc}
 80058ec:	20000274 	.word	0x20000274

080058f0 <_fstat_r>:
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	4d07      	ldr	r5, [pc, #28]	; (8005910 <_fstat_r+0x20>)
 80058f4:	2300      	movs	r3, #0
 80058f6:	4604      	mov	r4, r0
 80058f8:	4608      	mov	r0, r1
 80058fa:	4611      	mov	r1, r2
 80058fc:	602b      	str	r3, [r5, #0]
 80058fe:	f7fb fa74 	bl	8000dea <_fstat>
 8005902:	1c43      	adds	r3, r0, #1
 8005904:	d102      	bne.n	800590c <_fstat_r+0x1c>
 8005906:	682b      	ldr	r3, [r5, #0]
 8005908:	b103      	cbz	r3, 800590c <_fstat_r+0x1c>
 800590a:	6023      	str	r3, [r4, #0]
 800590c:	bd38      	pop	{r3, r4, r5, pc}
 800590e:	bf00      	nop
 8005910:	20000274 	.word	0x20000274

08005914 <_isatty_r>:
 8005914:	b538      	push	{r3, r4, r5, lr}
 8005916:	4d06      	ldr	r5, [pc, #24]	; (8005930 <_isatty_r+0x1c>)
 8005918:	2300      	movs	r3, #0
 800591a:	4604      	mov	r4, r0
 800591c:	4608      	mov	r0, r1
 800591e:	602b      	str	r3, [r5, #0]
 8005920:	f7fb fa73 	bl	8000e0a <_isatty>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d102      	bne.n	800592e <_isatty_r+0x1a>
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	b103      	cbz	r3, 800592e <_isatty_r+0x1a>
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	bd38      	pop	{r3, r4, r5, pc}
 8005930:	20000274 	.word	0x20000274

08005934 <_lseek_r>:
 8005934:	b538      	push	{r3, r4, r5, lr}
 8005936:	4d07      	ldr	r5, [pc, #28]	; (8005954 <_lseek_r+0x20>)
 8005938:	4604      	mov	r4, r0
 800593a:	4608      	mov	r0, r1
 800593c:	4611      	mov	r1, r2
 800593e:	2200      	movs	r2, #0
 8005940:	602a      	str	r2, [r5, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	f7fb fa6c 	bl	8000e20 <_lseek>
 8005948:	1c43      	adds	r3, r0, #1
 800594a:	d102      	bne.n	8005952 <_lseek_r+0x1e>
 800594c:	682b      	ldr	r3, [r5, #0]
 800594e:	b103      	cbz	r3, 8005952 <_lseek_r+0x1e>
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	bd38      	pop	{r3, r4, r5, pc}
 8005954:	20000274 	.word	0x20000274

08005958 <memcpy>:
 8005958:	440a      	add	r2, r1
 800595a:	4291      	cmp	r1, r2
 800595c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005960:	d100      	bne.n	8005964 <memcpy+0xc>
 8005962:	4770      	bx	lr
 8005964:	b510      	push	{r4, lr}
 8005966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800596a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800596e:	4291      	cmp	r1, r2
 8005970:	d1f9      	bne.n	8005966 <memcpy+0xe>
 8005972:	bd10      	pop	{r4, pc}

08005974 <memmove>:
 8005974:	4288      	cmp	r0, r1
 8005976:	b510      	push	{r4, lr}
 8005978:	eb01 0402 	add.w	r4, r1, r2
 800597c:	d902      	bls.n	8005984 <memmove+0x10>
 800597e:	4284      	cmp	r4, r0
 8005980:	4623      	mov	r3, r4
 8005982:	d807      	bhi.n	8005994 <memmove+0x20>
 8005984:	1e43      	subs	r3, r0, #1
 8005986:	42a1      	cmp	r1, r4
 8005988:	d008      	beq.n	800599c <memmove+0x28>
 800598a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800598e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005992:	e7f8      	b.n	8005986 <memmove+0x12>
 8005994:	4402      	add	r2, r0
 8005996:	4601      	mov	r1, r0
 8005998:	428a      	cmp	r2, r1
 800599a:	d100      	bne.n	800599e <memmove+0x2a>
 800599c:	bd10      	pop	{r4, pc}
 800599e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059a6:	e7f7      	b.n	8005998 <memmove+0x24>

080059a8 <__malloc_lock>:
 80059a8:	4801      	ldr	r0, [pc, #4]	; (80059b0 <__malloc_lock+0x8>)
 80059aa:	f7ff b9d1 	b.w	8004d50 <__retarget_lock_acquire_recursive>
 80059ae:	bf00      	nop
 80059b0:	2000026c 	.word	0x2000026c

080059b4 <__malloc_unlock>:
 80059b4:	4801      	ldr	r0, [pc, #4]	; (80059bc <__malloc_unlock+0x8>)
 80059b6:	f7ff b9cc 	b.w	8004d52 <__retarget_lock_release_recursive>
 80059ba:	bf00      	nop
 80059bc:	2000026c 	.word	0x2000026c

080059c0 <_realloc_r>:
 80059c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c2:	4607      	mov	r7, r0
 80059c4:	4614      	mov	r4, r2
 80059c6:	460e      	mov	r6, r1
 80059c8:	b921      	cbnz	r1, 80059d4 <_realloc_r+0x14>
 80059ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80059ce:	4611      	mov	r1, r2
 80059d0:	f7ff ba74 	b.w	8004ebc <_malloc_r>
 80059d4:	b922      	cbnz	r2, 80059e0 <_realloc_r+0x20>
 80059d6:	f7ff fa21 	bl	8004e1c <_free_r>
 80059da:	4625      	mov	r5, r4
 80059dc:	4628      	mov	r0, r5
 80059de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059e0:	f000 f826 	bl	8005a30 <_malloc_usable_size_r>
 80059e4:	42a0      	cmp	r0, r4
 80059e6:	d20f      	bcs.n	8005a08 <_realloc_r+0x48>
 80059e8:	4621      	mov	r1, r4
 80059ea:	4638      	mov	r0, r7
 80059ec:	f7ff fa66 	bl	8004ebc <_malloc_r>
 80059f0:	4605      	mov	r5, r0
 80059f2:	2800      	cmp	r0, #0
 80059f4:	d0f2      	beq.n	80059dc <_realloc_r+0x1c>
 80059f6:	4631      	mov	r1, r6
 80059f8:	4622      	mov	r2, r4
 80059fa:	f7ff ffad 	bl	8005958 <memcpy>
 80059fe:	4631      	mov	r1, r6
 8005a00:	4638      	mov	r0, r7
 8005a02:	f7ff fa0b 	bl	8004e1c <_free_r>
 8005a06:	e7e9      	b.n	80059dc <_realloc_r+0x1c>
 8005a08:	4635      	mov	r5, r6
 8005a0a:	e7e7      	b.n	80059dc <_realloc_r+0x1c>

08005a0c <_read_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4d07      	ldr	r5, [pc, #28]	; (8005a2c <_read_r+0x20>)
 8005a10:	4604      	mov	r4, r0
 8005a12:	4608      	mov	r0, r1
 8005a14:	4611      	mov	r1, r2
 8005a16:	2200      	movs	r2, #0
 8005a18:	602a      	str	r2, [r5, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f7fb f9bc 	bl	8000d98 <_read>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_read_r+0x1e>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_read_r+0x1e>
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	20000274 	.word	0x20000274

08005a30 <_malloc_usable_size_r>:
 8005a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a34:	1f18      	subs	r0, r3, #4
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	bfbc      	itt	lt
 8005a3a:	580b      	ldrlt	r3, [r1, r0]
 8005a3c:	18c0      	addlt	r0, r0, r3
 8005a3e:	4770      	bx	lr

08005a40 <_init>:
 8005a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a42:	bf00      	nop
 8005a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a46:	bc08      	pop	{r3}
 8005a48:	469e      	mov	lr, r3
 8005a4a:	4770      	bx	lr

08005a4c <_fini>:
 8005a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4e:	bf00      	nop
 8005a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a52:	bc08      	pop	{r3}
 8005a54:	469e      	mov	lr, r3
 8005a56:	4770      	bx	lr
